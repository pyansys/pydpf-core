[
    {
        "objectID": "api/ansys.dpf.core.operators.result.velocity_Y",
        "href": "api/ansys.dpf.core.operators.result.velocity_Y.html#velocity_y",
        "title": "velocity_Y",
        "section": "velocity_Y",
        "text": "Autogenerated DPF operator classes.\nvelocity_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.enrich_materials",
        "href": "api/ansys.dpf.core.operators.logic.enrich_materials.html#enrich_materials",
        "title": "enrich_materials",
        "section": "enrich_materials",
        "text": "Autogenerated DPF operator classes.\nenrich_materials"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.temperature_grad",
        "href": "api/ansys.dpf.core.operators.result.temperature_grad.html#temperature_grad",
        "title": "temperature_grad",
        "section": "temperature_grad",
        "text": "Autogenerated DPF operator classes.\ntemperature_grad"
    },
    {
        "objectID": "examples/14-lsdyna/00-lsdyna_operators",
        "href": "examples/14-lsdyna/00-lsdyna_operators.html#results-extraction-and-analysis-from-ls-dyna-sources",
        "title": "Results extraction and analysis from LS-DYNA sources",
        "section": "Results extraction and analysis from LS-DYNA sources",
        "text": "This example provides an overview of the LS-DYNA results providers.\nThis example requires DPF 6.1 (ansys-dpf-server-2023-2-pre0) or above.\nFor more information, see ref_compatibility.\nResults extraction and analysis from LS-DYNA sources"
    },
    {
        "objectID": "examples/14-lsdyna/00-lsdyna_operators",
        "href": "examples/14-lsdyna/00-lsdyna_operators.html#d3plot-file-results-extraction",
        "title": "Results extraction and analysis from LS-DYNA sources > d3plot file results extraction",
        "section": "d3plot file results extraction",
        "text": "Create the model and print its contents. This LS-DYNA d3plot file contains\nseveral individual results, each at different times. The d3plot file does not\ncontain information related to Units. In this case, as the simulation was run\nthrough Mechanical, a file.actunits file is produced. If this file is\nsupplemented in the data_sources, the units will be correctly fetched for all\nresults in the file as well as for the mesh.\nThe model has solid (3D) elements and beam (1D) elements. Some of the results\nonly apply to one type of elements (such as the stress tensor for solids, or\nthe axial force for beams, for example).\nLet’s extract beam axial force for the last time step and plot it, deforming\nthe mesh according to the displacement field at the same time step.\nThe axial force has only been computed for the beam elements (the bottom\nframe), whereas the top sphere, which is comprised by solid elements, has\nonly been deformed by the displacement field.\nPyDPF also allows you to animate the results in a FieldsContainer. Thus, if\nall time steps are extracted, an animation can be produced.\nSome of the results are marked as global. They are not scoped over any mesh\nentity, but are global variables of the model.\nEnergy plots over time (the sphere was released with some initial velocity).\nd3plot file results extraction"
    },
    {
        "objectID": "examples/14-lsdyna/00-lsdyna_operators",
        "href": "examples/14-lsdyna/00-lsdyna_operators.html#binout-file-results-extraction",
        "title": "Results extraction and analysis from LS-DYNA sources > binout file results extraction",
        "section": "binout file results extraction",
        "text": "Create the model and dprint its contents. This LS-DYNA binout file contains\nseveral branches (glstat, matsum and rcforc).\nIn this case, the Unit System is not attached to the data_source, but it can\nbe directly assigned to the results. As we are employing the dpf.Model API, we\nonly need to assign the Unit System once (the Model will assign it for the\nrest of the results).\nResults from the matsum branch of the binout file are a FieldsContainer on a\nLabelSpace comprised by part IDs. Extract part kinetic energy for all parts:\nExtract part internal energy for only a selected number of parts.\nPlot part kinetic and internal energy for a selection of parts. In this case,\nthe TimeFreqSupport of the matsum branch does not have all the time steps in\nthe binout file. Thus, a rescoping operation is needed:\nSimilarly, results from the rcforc branch of the binout file are a\nFieldsContainer on a LabelSpace comprised by interface IDs. Extract interface\ncontact force for only one interface.\nIn addition to interface, the FieldsContainer is scoped on idtype (0 for the\nmaster side of the interface, 1 for the slave). Contact force is a vector, and\nthe three components are available.\nTotal running time of the script: (0 minutes 13.760 seconds)\nDownload Jupyter notebook: 00-lsdyna_operators.ipynb\nDownload Python source code: 00-lsdyna_operators.py\nDownload zipped: 00-lsdyna_operators.zip\nGallery generated by Sphinx-Gallery\nbinout file results extraction\nDownload Jupyter notebook: 00-lsdyna_operators.ipynb\nDownload Python source code: 00-lsdyna_operators.py\nDownload zipped: 00-lsdyna_operators.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.nodal_moment",
        "href": "api/ansys.dpf.core.operators.result.nodal_moment.html#nodal_moment",
        "title": "nodal_moment",
        "section": "nodal_moment",
        "text": "Autogenerated DPF operator classes.\nnodal_moment"
    },
    {
        "objectID": "examples/04-advanced/07-load_plugin",
        "href": "examples/04-advanced/07-load_plugin.html#load-plugin",
        "title": "Load plugin",
        "section": "Load plugin",
        "text": "This example shows how to load a plugin that is not loaded automatically.\nImport DPF-Core:\nCreate a base service for loading a plugin:\nMath operators are now loaded and accessible in ansys.dpf.core.operators:\nTotal running time of the script: (0 minutes 0.016 seconds)\nDownload Jupyter notebook: 07-load_plugin.ipynb\nDownload Python source code: 07-load_plugin.py\nDownload zipped: 07-load_plugin.zip\nGallery generated by Sphinx-Gallery\nLoad plugin\nansys.dpf.core.operators\nDownload Jupyter notebook: 07-load_plugin.ipynb\nDownload Python source code: 07-load_plugin.py\nDownload zipped: 07-load_plugin.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.remote_workflow_instantiate",
        "href": "api/ansys.dpf.core.operators.utility.remote_workflow_instantiate.html#remote_workflow_instantiate",
        "title": "remote_workflow_instantiate",
        "section": "remote_workflow_instantiate",
        "text": "Autogenerated DPF operator classes.\nremote_workflow_instantiate"
    },
    {
        "objectID": "examples/12-fluids/index",
        "href": "examples/12-fluids/index.html#fluids-examples",
        "title": "Fluids examples",
        "section": "Fluids examples",
        "text": "These examples show how to post-process Fluid models.\nsphx_glr_examples_12-fluids_00-fluids_model.py\nsphx_glr_examples_12-fluids_01-fluids_mesh.py\nsphx_glr_examples_12-fluids_02-fluids_results.py\nsphx_glr_examples_12-fluids_03-fluids_isosurface.py\nFluids examples"
    },
    {
        "objectID": "examples/09-averaging/01-average_across_bodies",
        "href": "examples/09-averaging/01-average_across_bodies.html#average-across-bodies",
        "title": "Average across bodies",
        "section": "Average across bodies",
        "text": "In multibody simulations, some nodes may be shared by the bodies at their interfaces,\nbut the values of the results (for example stresses or strains) calculated at these nodes\nmay differ between the bodies. This can cause discontinuous plots, given that a single\nnode will have multiple values for a variable. To avoid this, you can average these results\nacross the bodies of the model.\nThis example demonstrates how to average across bodies in DPF when\ndealing with Nodal variables. It also illustrates how the end results\nof a postprocessing workflow can be different when averaging and when not.\nThis example requires DPF 6.1 or above.\nFor more information, see ref_compatibility.\nImport the necessary modules\nLoad the simulation results from an RST file and create a model of it.\nTo visualize the model and see how the bodies are connected, extract their\nindividual meshes using the split_mesh operator with the mat (or “material”)\nproperty.\nAs can be seen in the preceding image, even though the piston rod is one single part,\nit is composed of two different bodies. Additionally, their interface shares common nodes.\nAverage across bodies\nNodal\nsplit_mesh\nmat"
    },
    {
        "objectID": "examples/09-averaging/01-average_across_bodies",
        "href": "examples/09-averaging/01-average_across_bodies.html#averaging-across-bodies-with-dpf",
        "title": "Average across bodies > Averaging across bodies with DPF",
        "section": "Averaging across bodies with DPF",
        "text": "# To compare the results of averaging across bodies and not averaging,\ndefine two workflows.\nThe variable of interest is the Von Mises stress field, which is\ncalculated by applying the eqv_fc operator on the\nstresses extracted from the model.\nAveraging across bodies with DPF\neqv_fc"
    },
    {
        "objectID": "examples/09-averaging/01-average_across_bodies",
        "href": "examples/09-averaging/01-average_across_bodies.html#workflow-for-not-averaging-across-bodies",
        "title": "Average across bodies > Workflow for not averaging across bodies",
        "section": "Workflow for not averaging across bodies",
        "text": "Computing Von Mises stresses without averaging across the bodies of the\nmodel requires the stresses to be extracted separately for each body.\nTo do this in DPF, pass a scopings container the stress operator that\ncontains the elements of each body in scopings, separated by the mat label\nSet the time set of interest to the last time set:\nExtracting the stresses for each body of the simulation:\nProceeding with the workflow to obtain Nodal Von Mises stresses:\nAs you can see, the final Von Mises stresses fields container has the mat\nlabel with two different entries, meaning that it holds data for two separate bodies.\nFinally, define this workflow as a function for better organization and\nease of use:\nWorkflow for not averaging across bodies\nmat\nNodal\nmat"
    },
    {
        "objectID": "examples/09-averaging/01-average_across_bodies",
        "href": "examples/09-averaging/01-average_across_bodies.html#workflow-for-averaging-across-bodies",
        "title": "Average across bodies > Workflow for averaging across bodies",
        "section": "Workflow for averaging across bodies",
        "text": "The workflow for performing averaging across bodies in DPF is similar to to the\none shown above, with the extraction of stresses per body. The difference comes\nin the end, where a weighted merge is done between the fields that contain different\nvalues for the mat label to actually average the results across the bodies.\nDefine a function like the one above:\nIn this case, we can see that the output fields container only has one field, indicating\nthat the results of the two different bodies were averaged successfully.\nWorkflow for averaging across bodies\nmat"
    },
    {
        "objectID": "examples/09-averaging/01-average_across_bodies",
        "href": "examples/09-averaging/01-average_across_bodies.html#plot-and-compare-the-results",
        "title": "Average across bodies > Plot and compare the results",
        "section": "Plot and compare the results",
        "text": "The two different approaches can be compared. The first plot shows the\nresults when averaging across bodies is not performed, while the second illustrates\nwhen it is.\nFinally, the maximum stresses for both cases can be compared:\nPlot and compare the results"
    },
    {
        "objectID": "examples/09-averaging/01-average_across_bodies",
        "href": "examples/09-averaging/01-average_across_bodies.html#dedicated-operator",
        "title": "Average across bodies > Dedicated Operator",
        "section": "Dedicated Operator",
        "text": "The operator detailed below is available in Ansys 23R2 and later versions.\nAlternatively, those workflows can be automatically instantiated by calling the\nstress_eqv_as_mechanical operator, which does exactly the same thing as described\nin the functions above, depending on what is passed to the “average_across_bodies” input\npin:\nTotal running time of the script: (0 minutes 17.987 seconds)\nDownload Jupyter notebook: 01-average_across_bodies.ipynb\nDownload Python source code: 01-average_across_bodies.py\nDownload zipped: 01-average_across_bodies.zip\nGallery generated by Sphinx-Gallery\nDedicated Operator\nstress_eqv_as_mechanical\nDownload Jupyter notebook: 01-average_across_bodies.ipynb\nDownload Python source code: 01-average_across_bodies.py\nDownload zipped: 01-average_across_bodies.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.on_reduced_coordinates",
        "href": "api/ansys.dpf.core.operators.mapping.on_reduced_coordinates.html#on_reduced_coordinates",
        "title": "on_reduced_coordinates",
        "section": "on_reduced_coordinates",
        "text": "Autogenerated DPF operator classes.\non_reduced_coordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.serializer_to_string",
        "href": "api/ansys.dpf.core.operators.serialization.serializer_to_string.html#serializer_to_string",
        "title": "serializer_to_string",
        "section": "serializer_to_string",
        "text": "Autogenerated DPF operator classes.\nserializer_to_string"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.rescope_fc",
        "href": "api/ansys.dpf.core.operators.scoping.rescope_fc.html#rescope_fc",
        "title": "rescope_fc",
        "section": "rescope_fc",
        "text": "Autogenerated DPF operator classes.\nrescope_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.custom",
        "href": "api/ansys.dpf.core.operators.result.custom.html#custom",
        "title": "custom",
        "section": "custom",
        "text": "Autogenerated DPF operator classes.\ncustom"
    },
    {
        "objectID": "user_guide/xmlfiles",
        "href": "user_guide/xmlfiles.html#dpf-xml-files",
        "title": "DPF XML files",
        "section": "DPF XML files",
        "text": "This page describes the DataProcessingCore.xml and Plugin.xml XML files\nprovided with DPF. These XML files work on both Linux and Windows\nbecause they contain content for both of these operating systems.\nThese XML files must be located alongside the plugin DLL files on Windows or\nSO files on Linux.\nDPF XML files\nDataProcessingCore.xml\nPlugin.xml"
    },
    {
        "objectID": "user_guide/xmlfiles",
        "href": "user_guide/xmlfiles.html#dataprocessingcorexml-file",
        "title": "DPF XML files > DataProcessingCore.xml file",
        "section": "DataProcessingCore.xml file",
        "text": "The DataProcessingCore.xml file provides for configuring the plugins to load.\nHere is the content of this XML file:\nIn this XML file, some of the elements are optional, and many of the\nelements have Linux-specific versus Windows-specific child elements.\nTo ensure that DPF operates correctly, modify this XML file\ncarefully. All paths specified in this XML file must adhere to the path\nconventions of the respective operating system. For Linux paths, use\nforward slashes (/). For Windows paths, use backward slashes (\\).\nDataProcessingCore.xml file\nDataProcessingCore.xml\nDataProcessingCore.xml"
    },
    {
        "objectID": "user_guide/xmlfiles",
        "href": "user_guide/xmlfiles.html#environment-element",
        "title": "DPF XML files > <Environment> element",
        "section": "<Environment> element",
        "text": "The <Environment> element is used only for defining the root folder\nof the Ansys software. Its child <ANSYS_ROOT_FOLDER> elements can\ndefine the root folders for Ansys software installed on Linux and on Windows.\nThe path for the root folder ends with Ansys version information, v###,\nwhere ### is the three-digit format for the installed version. For example,\non Windows, the path for the root folder for Ansys 2022 R2 likely ends with\n\\ANSYS Inc\\v222.\nThe ANSYS_ROOT_FOLDER element defines a variable\nthat can be used in the other XML files. For example, you might use it to find required\nthird-party software.\nIf the ANSYS_ROOT_FOLDER element is not defined in the DataProcessing.xml\nfile, an attempt is made to\nfind the root folder relative to the DataProcessingCore DLL or SO file. This\nworks only if the DataProcessingCore.xml file is located in its default\nlocation.\nIf the ANSYS_ROOT_FOLDER element is still not defined, the root folder is\ndetermined by reading the AWP_ROOT### environment variable specific to your\ninstalled Ansys version. For example, if you are using Ansys 2022 R2, it looks\nfor the AWP_ROOT222 environment variable to find the root folder.\nANSYS_ROOT_FOLDER is not an environment variable and cannot be set accordingly.\n<Environment> element\n<Environment>\n<Environment>\n<ANSYS_ROOT_FOLDER>\nv###\n###\n\\ANSYS Inc\\v222\nANSYS_ROOT_FOLDER\nANSYS_ROOT_FOLDER\nDataProcessing.xml\nDataProcessingCore\nDataProcessingCore.xml\nANSYS_ROOT_FOLDER\nAWP_ROOT###\nAWP_ROOT222"
    },
    {
        "objectID": "user_guide/xmlfiles",
        "href": "user_guide/xmlfiles.html#defaultplugin-element",
        "title": "DPF XML files > <DefaultPlugin> element",
        "section": "<DefaultPlugin> element",
        "text": "The <DefaultPlugin> element defines the plugins to load. The <Linux> or\n<Windows> child element contains the operating system for the plugins defined\nin the child elements.\nThe <native> element defines DPF native operators. The further subdividing of\nplugins into <Debug> or <Release> elements is optional. The <Debug>\nelement, for example, would only be used with a debug version of the\nDataProcessingCore DLL or SO file.\nThe element names for plugins, such as <native> and <fem_utils>, are used as\nkeys when loading plugins. Each plugin must have a unique key.\nThe element for each plug-in has child elements:\n<Path>: Contains the location of the plugin to load. The normal mechanism\nthat the operating system uses to find a DLL or SO file is used. The DLL\nfile could be in the Windows path, or the SO file could be in the Linux\nLD_LIBRARY_PATH system environment variable.\n<Loader>: Contains how the plugin is loaded. Only LoadOperators is\nsupported. It loads all operators within the plugin.\n<UsePluginXml>: Contains a true or  false value that indicates\nwhether to use the PLUGIN.XML file defined in the next element to load\nthe plugin. This element is optional. The default value is true.\nTo provide an absolute path to a plugin, you can use these predefined variables:\nANSYS_ROOT_FOLDER, which is described in the preceding section.\nTHIS_XML_FOLDER, which defines the location of where the current XML file\nis located. In this case, it defines the location of the DataProcessingCore.xml\nfile.\nYou can also use any other environment variable. For example, if you always have your\nplugins in a folder defined by a MY_PLUGINS environment variable, you could use\nit in the XML file.\nYou specify environment variables in the same way as the ANSYS_ROOT_FOLDER\nor THIS_XML_FOLDER variable. They are defined as $(…).\nIn the Ansys installation, the default DataProcessingCore.xml file is located\nnext to the DataProcessingCore DLL or SO file. If you want to use a different\none, you can initialize DPF using a specific DataProcessingCore.xml file.\n<DefaultPlugin> element\n<DefaultPlugin>\n<DefaultPlugin>\n<Linux>\n<Windows>\n<native>\n<Debug>\n<Release>\n<Debug>\nDataProcessingCore\n<native>\n<fem_utils>\n<Path>\nLD_LIBRARY_PATH\n<Loader>\nLoadOperators\n<UsePluginXml>\ntrue\nfalse\nPLUGIN.XML\ntrue\nANSYS_ROOT_FOLDER\nTHIS_XML_FOLDER\nDataProcessingCore.xml\nMY_PLUGINS\nANSYS_ROOT_FOLDER\nTHIS_XML_FOLDER\n$(…)\nDataProcessingCore.xml\nDataProcessingCore\nDataProcessingCore.xml"
    },
    {
        "objectID": "user_guide/xmlfiles",
        "href": "user_guide/xmlfiles.html#pluginxml-file",
        "title": "DPF XML files > Plugin.xml file",
        "section": "Plugin.xml file",
        "text": "The Plugin.xml file allows you to configure a specific environment for loading a\nplugin.\nHere is the content of this XML file:\nThe <Environment> element within this XML file is defined the same way\nas the DataProcessingCore.xml file.\nAny environment variables that are defined or used have the values at the time\nthat they are defined or used. You can effectively define a variable multiple times\nand keep appending it.\nPlugin.xml file\nPlugin.xml\nPlugin.xml\n<Environment>\nDataProcessingCore.xml"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max_over_time_by_entity",
        "href": "api/ansys.dpf.core.operators.min_max.min_max_over_time_by_entity.html#min_max_over_time_by_entity",
        "title": "min_max_over_time_by_entity",
        "section": "min_max_over_time_by_entity",
        "text": "Autogenerated DPF operator classes.\nmin_max_over_time_by_entity"
    },
    {
        "objectID": "api/ansys.dpf.core.plotter",
        "href": "api/ansys.dpf.core.plotter.html#plotter",
        "title": "Plotter",
        "section": "Plotter",
        "text": "This module contains the DPF plotter class.\nContains classes used to plot a mesh and a fields container using PyVista.\nPlotter"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_fraction_fc",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_fraction_fc.html#elemental_fraction_fc",
        "title": "elemental_fraction_fc",
        "section": "elemental_fraction_fc",
        "text": "Autogenerated DPF operator classes.\nelemental_fraction_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.streams_provider",
        "href": "api/ansys.dpf.core.operators.metadata.streams_provider.html#streams_provider",
        "title": "streams_provider",
        "section": "streams_provider",
        "text": "Autogenerated DPF operator classes.\nstreams_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.velocity_X",
        "href": "api/ansys.dpf.core.operators.result.velocity_X.html#velocity_x",
        "title": "velocity_X",
        "section": "velocity_X",
        "text": "Autogenerated DPF operator classes.\nvelocity_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_principal_1",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_principal_1.html#elastic_strain_principal_1",
        "title": "elastic_strain_principal_1",
        "section": "elastic_strain_principal_1",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_principal_1"
    },
    {
        "objectID": "examples/06-plotting/06-animate_results",
        "href": "examples/06-plotting/06-animate_results.html#review-of-available-animation-commands",
        "title": "Review of available animation commands",
        "section": "Review of available animation commands",
        "text": "This example lists the different commands available for creating animations of transient results,\nshown with the arguments available.\nTotal running time of the script: (0 minutes 16.451 seconds)\nDownload Jupyter notebook: 06-animate_results.ipynb\nDownload Python source code: 06-animate_results.py\nDownload zipped: 06-animate_results.zip\nGallery generated by Sphinx-Gallery\nReview of available animation commands\nDownload Jupyter notebook: 06-animate_results.ipynb\nDownload Python source code: 06-animate_results.py\nDownload zipped: 06-animate_results.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.string_field",
        "href": "api/ansys.dpf.core.string_field.html#stringfield",
        "title": "StringField",
        "section": "StringField",
        "text": "StringField"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.strain_eqv_as_mechanical_workflow",
        "href": "api/ansys.dpf.core.operators.result.strain_eqv_as_mechanical_workflow.html#strain_eqv_as_mechanical_workflow",
        "title": "strain_eqv_as_mechanical_workflow",
        "section": "strain_eqv_as_mechanical_workflow",
        "text": "Autogenerated DPF operator classes.\nstrain_eqv_as_mechanical_workflow"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.segalman_von_mises_eqv_fc",
        "href": "api/ansys.dpf.core.operators.invariant.segalman_von_mises_eqv_fc.html#segalman_von_mises_eqv_fc",
        "title": "segalman_von_mises_eqv_fc",
        "section": "segalman_von_mises_eqv_fc",
        "text": "Autogenerated DPF operator classes.\nsegalman_von_mises_eqv_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_relative_acceleration",
        "href": "api/ansys.dpf.core.operators.result.joint_relative_acceleration.html#joint_relative_acceleration",
        "title": "joint_relative_acceleration",
        "section": "joint_relative_acceleration",
        "text": "Autogenerated DPF operator classes.\njoint_relative_acceleration"
    },
    {
        "objectID": "api/ansys.dpf.core.session",
        "href": "api/ansys.dpf.core.session.html#session",
        "title": "Session",
        "section": "Session",
        "text": "Session"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.fft_approx",
        "href": "api/ansys.dpf.core.operators.math.fft_approx.html#fft_approx",
        "title": "fft_approx",
        "section": "fft_approx",
        "text": "Autogenerated DPF operator classes.\nfft_approx"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.field_to_csv",
        "href": "api/ansys.dpf.core.operators.serialization.field_to_csv.html#field_to_csv",
        "title": "field_to_csv",
        "section": "field_to_csv",
        "text": "Autogenerated DPF operator classes.\nfield_to_csv"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.scoping_signed_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.scoping_signed_high_pass.html#scoping_signed_high_pass",
        "title": "scoping_signed_high_pass",
        "section": "scoping_signed_high_pass",
        "text": "Autogenerated DPF operator classes.\nscoping_signed_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timescoping_band_pass",
        "href": "api/ansys.dpf.core.operators.filter.timescoping_band_pass.html#timescoping_band_pass",
        "title": "timescoping_band_pass",
        "section": "timescoping_band_pass",
        "text": "Autogenerated DPF operator classes.\ntimescoping_band_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.custom_operator",
        "href": "api/ansys.dpf.core.custom_operator.html#custom-operator-base",
        "title": "Custom Operator Base",
        "section": "Custom Operator Base",
        "text": "Contains utilities allowing you to implement and record custom Python operators.\nCustom Operator Base"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.on_coordinates",
        "href": "api/ansys.dpf.core.operators.mapping.on_coordinates.html#on_coordinates",
        "title": "on_coordinates",
        "section": "on_coordinates",
        "text": "Autogenerated DPF operator classes.\non_coordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.Workflow_to_PyDPF_Generator",
        "href": "api/ansys.dpf.core.operators.utility.Workflow_to_PyDPF_Generator.html#workflow_to_pydpf_generator",
        "title": "Workflow_to_PyDPF_Generator",
        "section": "Workflow_to_PyDPF_Generator",
        "text": "Autogenerated DPF operator classes.\nWorkflow_to_PyDPF_Generator"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.split_in_for_each_range",
        "href": "api/ansys.dpf.core.operators.utility.split_in_for_each_range.html#split_in_for_each_range",
        "title": "split_in_for_each_range",
        "section": "split_in_for_each_range",
        "text": "Autogenerated DPF operator classes.\nsplit_in_for_each_range"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.hdf5dpf_workglow_provider",
        "href": "api/ansys.dpf.core.operators.utility.hdf5dpf_workglow_provider.html#hdf5dpf_workglow_provider",
        "title": "hdf5dpf_workglow_provider",
        "section": "hdf5dpf_workglow_provider",
        "text": "Autogenerated DPF operator classes.\nhdf5dpf_workglow_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.vtk_to_fields",
        "href": "api/ansys.dpf.core.operators.serialization.vtk_to_fields.html#vtk_to_fields",
        "title": "vtk_to_fields",
        "section": "vtk_to_fields",
        "text": "Autogenerated DPF operator classes.\nvtk_to_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.path_utilities",
        "href": "api/ansys.dpf.core.path_utilities.html#path_utilities",
        "title": "path_utilities",
        "section": "path_utilities",
        "text": "Offer tools similar to os.path but taking the os of the\nserver into account to create path.\npath_utilities"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_rigid_body_stopper_energy",
        "href": "api/ansys.dpf.core.operators.result.global_rigid_body_stopper_energy.html#global_rigid_body_stopper_energy",
        "title": "global_rigid_body_stopper_energy",
        "section": "global_rigid_body_stopper_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_rigid_body_stopper_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_Z",
        "href": "api/ansys.dpf.core.operators.result.stress_Z.html#stress_z",
        "title": "stress_Z",
        "section": "stress_Z",
        "text": "Autogenerated DPF operator classes.\nstress_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.transform_invariant_terms_rbd",
        "href": "api/ansys.dpf.core.operators.result.transform_invariant_terms_rbd.html#transform_invariant_terms_rbd",
        "title": "transform_invariant_terms_rbd",
        "section": "transform_invariant_terms_rbd",
        "text": "Autogenerated DPF operator classes.\ntransform_invariant_terms_rbd"
    },
    {
        "objectID": "api/ansys.dpf.core.time_freq_scoping_factory",
        "href": "api/ansys.dpf.core.time_freq_scoping_factory.html#time_freq_scoping_factory",
        "title": "time_freq_scoping_factory",
        "section": "time_freq_scoping_factory",
        "text": "Contains functions to simplify creating time frequency scopings.\ntime_freq_scoping_factory"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_cut",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_cut.html#mesh_cut",
        "title": "mesh_cut",
        "section": "mesh_cut",
        "text": "Autogenerated DPF operator classes.\nmesh_cut"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.elementary_data_selector",
        "href": "api/ansys.dpf.core.operators.logic.elementary_data_selector.html#elementary_data_selector",
        "title": "elementary_data_selector",
        "section": "elementary_data_selector",
        "text": "Autogenerated DPF operator classes.\nelementary_data_selector"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.result_info_provider",
        "href": "api/ansys.dpf.core.operators.metadata.result_info_provider.html#result_info_provider",
        "title": "result_info_provider",
        "section": "result_info_provider",
        "text": "Autogenerated DPF operator classes.\nresult_info_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic",
        "href": "api/ansys.dpf.core.operators.logic.html#ansysdpfcoreoperatorslogic-package",
        "title": "ansys.dpf.core.operators.logic package",
        "section": "ansys.dpf.core.operators.logic package",
        "text": "ansys.dpf.core.operators.logic package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic",
        "href": "api/ansys.dpf.core.operators.logic.html#submodules",
        "title": "ansys.dpf.core.operators.logic package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic",
        "href": "api/ansys.dpf.core.operators.logic.html#module-contents",
        "title": "ansys.dpf.core.operators.logic package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "examples/06-plotting/05-plot_on_warped_mesh",
        "href": "examples/06-plotting/05-plot_on_warped_mesh.html#warp-the-mesh-by-a-field-for-plotting",
        "title": "Warp the mesh by a field for plotting",
        "section": "Warp the mesh by a field for plotting",
        "text": "This example shows how to warp the mesh by a vector field,\nenabling to plot on the deformed geometry.\nTotal running time of the script: (0 minutes 14.641 seconds)\nDownload Jupyter notebook: 05-plot_on_warped_mesh.ipynb\nDownload Python source code: 05-plot_on_warped_mesh.py\nDownload zipped: 05-plot_on_warped_mesh.zip\nGallery generated by Sphinx-Gallery\nWarp the mesh by a field for plotting\nDownload Jupyter notebook: 05-plot_on_warped_mesh.ipynb\nDownload Python source code: 05-plot_on_warped_mesh.py\nDownload zipped: 05-plot_on_warped_mesh.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.nodal_difference",
        "href": "api/ansys.dpf.core.operators.averaging.nodal_difference.html#nodal_difference",
        "title": "nodal_difference",
        "section": "nodal_difference",
        "text": "Autogenerated DPF operator classes.\nnodal_difference"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress",
        "href": "api/ansys.dpf.core.operators.result.compute_stress.html#compute_stress",
        "title": "compute_stress",
        "section": "compute_stress",
        "text": "Autogenerated DPF operator classes.\ncompute_stress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_difference",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_difference.html#elemental_difference",
        "title": "elemental_difference",
        "section": "elemental_difference",
        "text": "Autogenerated DPF operator classes.\nelemental_difference"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.initial_coordinates",
        "href": "api/ansys.dpf.core.operators.result.initial_coordinates.html#initial_coordinates",
        "title": "initial_coordinates",
        "section": "initial_coordinates",
        "text": "Autogenerated DPF operator classes.\ninitial_coordinates"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#fields-container-and-fields",
        "title": "Fields container and fields",
        "section": "Fields container and fields",
        "text": "While DPF uses operators to load and operate on data, it uses field containers\nand fields to store and return data. In other words, operators are like verbs,\nacting on the data, while field containers and fields are like nouns, objects\nthat hold data.\nFields container and fields"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#access-a-fields-container-or-field",
        "title": "Fields container and fields > Access a fields container or field",
        "section": "Access a fields container or field",
        "text": "The outputs from operators can be either a\nansys.dpf.core.fields_container.FieldsContainer or\nansys.dpf.core.field.Field class.\nA fields container is the DPF equivalent of a list of fields. It holds a\nvector of fields.\nThis example uses the elastic_strain operator to access a fields container:\nAccess a fields container or field\nansys.dpf.core.fields_container.FieldsContainer\nansys.dpf.core.field.Field\nelastic_strain"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#access-fields-within-a-fields-container",
        "title": "Fields container and fields > Access fields within a fields container",
        "section": "Access fields within a fields container",
        "text": "Many methods are available for accessing a field in a fields\ncontainer. The preceding results contain a transient\nresult, which means that the fields container has one field\nby time set.\nAccess the field:\nAccess the field based on its index:\nAccess the field based on its time set ID:\nTo access fields for more complex requests, you can use the\nget_field() method with the ID of the requested field:\nHere is a more real-word example:\nThe following example references the available time frequency support to determine which\ntime complex IDs are available in the fields container:\nNote that the time set IDs used are one-based. When indexing from Pythonic\nindexing with fields[0], you can use zero-based indexing. When using\nthe get_fields() method to access results, you should base the request on\ntime-scoping set IDs.\nAccess fields within a fields container\nget_field()\nfields[0]\nget_fields()"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#field-data",
        "title": "Fields container and fields > Field data",
        "section": "Field data",
        "text": "The ansys.dpf.core.field.Field class is the fundamental unit of data within DPF.\nIt contains the actual data and its metadata, which is results data defined by values\nassociated with entities (scoping). These entities are a subset of a model (support).\nIn DPF, field data is always associated with its scoping and support, making the field\na self-describing piece of data. A field is also defined by other attributes, including\ndimensionality, unit, and location.\nYou can get an overview of a field’s metadata by printing the field:\nThe next section provides an overview of the metadata associated with the field itself.\nField data\nansys.dpf.core.field.Field"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#field-metadata",
        "title": "Fields container and fields > Field metadata",
        "section": "Field metadata",
        "text": "A field contains the metadata for the result it is associated with. The metadata\nincludes the location (such as Elemental, Nodal, or\nElementalNodal) and the IDs associated with the location.\nThe field’s scoping defines the order of the data, for example: the first ID in the\nscoping identifies to which entity the first entity data in the data vector belongs.\nTo access the scoping of the field, use the scoping attribute:\nThe Elemental location denotes one value of data (multiplied by the number\nof components) per element.\nThe Nodal location is one value per node.\nThe ElementalNodal location is one value per node per element. For example,\nstrain is an ElementalNodal value because strain is evaluated at each node\nfor each element.\nThe field also contains metadata, including the shape of\nthe data stored, location of the field, number of components, and\nunits of the data:\nField metadata\nElemental\nNodal\nElementalNodal\nscoping\nentity data\nscoping\nElemental\nNodal\nElementalNodal\nElementalNodal"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#access-field-data",
        "title": "Fields container and fields > Access field data",
        "section": "Access field data",
        "text": "When DPF-Core returns the ansys.dpf.core.field.Field class,\nwhat Python actually has is a client-side representation of the field,\nnot the entirety of the field itself. This means that all the data of\nthe field is stored within the DPF service. This is important because\nwhen building your postprocessing workflows, the most efficient way of\ninteracting with result data is to minimize the exchange of data between\nPython and DPF, either by using operators or by accessing only the data\nthat is needed.\nThe field’s data is ordered with respect to its scoping ids (see above).\nTo access the entire array of data as a numpy array:\nThis array has 6 components by elementary data (symmetrical tensor XX,YY,ZZ,XY,YZ,XZ).\nNote that this array is a genuine, local, numpy array (overloaded by the DPFArray).\nIf you need to access an individual node or element, request it\nusing either the get_entity_data() or get_entity_data_by_id() method:\nGet the data from the first element in the field.\nGet the data for the element with ID 10.\nNote that this would correspond to an index of 29 within the\nfield. Be aware that scoping IDs are not sequential. You would\nget the index of element 29 in the field with:\nHere the data for the element with ID 10 is made of 8 symmetrical tensors.\nThe elastic strain has one tensor value by node by element (ElementalNodal location)\nTo get the displacement on node 3, you would use:\nOne 3D vector (X,Y,Z) displacement\nWhile these methods are acceptable when requesting data for a few elements\nor nodes, they should not be used when looping over the entire array. For efficiency,\na field’s data can be recovered locally before sending a large number of requests:\nAccess field data\nansys.dpf.core.field.Field\ndata\nscoping ids\nnumpy\nget_entity_data()\nget_entity_data_by_id()"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#operate-on-field-data",
        "title": "Fields container and fields > Operate on field data",
        "section": "Operate on field data",
        "text": "Oftentimes, you do not need to directly act on the data of an array within\nPython. For example, if you want to know the maximum of the data, you can\nuse the array.max() method to compute the maximum of the array with the\nnumpy package. However, this requires sending the entire array to Python\nand then computing the maximum there. Rather than copying the array over and\ncomputing the maximum in Python, you can instead compute the maximum directly\nfrom the field itself.\nThis example uses the min_max operator to compute the maximum of\nthe field while returning the field:\nCompute the maximum of the field within DPF and return the result\nin a numpy array\nGet the element or node ID of the maximum value.\nThis example uses the elemental_mean operator to compute the\naverage of a field:\nFor comprehensive information on chaining operators, see ref_user_guide_operators.\nOperate on field data\narray.max()\nnumpy\nmin_max\nelemental_mean"
    },
    {
        "objectID": "user_guide/fields_container",
        "href": "user_guide/fields_container.html#api-reference",
        "title": "Fields container and fields > API reference",
        "section": "API reference",
        "text": "For more information, see ref_fields_container and\nref_field in the API reference.\nAPI reference"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.weighted_merge_fields_by_label",
        "href": "api/ansys.dpf.core.operators.utility.weighted_merge_fields_by_label.html#weighted_merge_fields_by_label",
        "title": "weighted_merge_fields_by_label",
        "section": "weighted_merge_fields_by_label",
        "text": "Autogenerated DPF operator classes.\nweighted_merge_fields_by_label"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_external_work",
        "href": "api/ansys.dpf.core.operators.result.global_external_work.html#global_external_work",
        "title": "global_external_work",
        "section": "global_external_work",
        "text": "Autogenerated DPF operator classes.\nglobal_external_work"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.serialize_to_hdf5",
        "href": "api/ansys.dpf.core.operators.serialization.serialize_to_hdf5.html#serialize_to_hdf5",
        "title": "serialize_to_hdf5",
        "section": "serialize_to_hdf5",
        "text": "Autogenerated DPF operator classes.\nserialize_to_hdf5"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.elementary_data_selector_fc",
        "href": "api/ansys.dpf.core.operators.logic.elementary_data_selector_fc.html#elementary_data_selector_fc",
        "title": "elementary_data_selector_fc",
        "section": "elementary_data_selector_fc",
        "text": "Autogenerated DPF operator classes.\nelementary_data_selector_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.coordinates",
        "href": "api/ansys.dpf.core.operators.result.coordinates.html#coordinates",
        "title": "coordinates",
        "section": "coordinates",
        "text": "Autogenerated DPF operator classes.\ncoordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.centroid",
        "href": "api/ansys.dpf.core.operators.math.centroid.html#centroid",
        "title": "centroid",
        "section": "centroid",
        "text": "Autogenerated DPF operator classes.\ncentroid"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.combine_levelset",
        "href": "api/ansys.dpf.core.operators.mesh.combine_levelset.html#combine_levelset",
        "title": "combine_levelset",
        "section": "combine_levelset",
        "text": "Autogenerated DPF operator classes.\ncombine_levelset"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_data_tree",
        "href": "api/ansys.dpf.core.operators.utility.merge_data_tree.html#merge_data_tree",
        "title": "merge_data_tree",
        "section": "merge_data_tree",
        "text": "Autogenerated DPF operator classes.\nmerge_data_tree"
    },
    {
        "objectID": "api/ansys.dpf.core.custom_fields_container",
        "href": "api/ansys.dpf.core.custom_fields_container.html#custom-fields-containers",
        "title": "Custom Fields Containers",
        "section": "Custom Fields Containers",
        "text": "Contains the inherited classes from the\nFieldsContainer class.\nThese new classes offer helpers to access data for specific usage, such as\nresults split by body or split by material.\nCustom Fields Containers\nFieldsContainer"
    },
    {
        "objectID": "api/ansys.dpf.core.server_types",
        "href": "api/ansys.dpf.core.server_types.html#server-types",
        "title": "Server types",
        "section": "Server types",
        "text": "Contains the different kinds of\nservers available for the factory.\nServer types"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_t_bending_moment",
        "href": "api/ansys.dpf.core.operators.result.beam_t_bending_moment.html#beam_t_bending_moment",
        "title": "beam_t_bending_moment",
        "section": "beam_t_bending_moment",
        "text": "Autogenerated DPF operator classes.\nbeam_t_bending_moment"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.vtu_export",
        "href": "api/ansys.dpf.core.operators.serialization.vtu_export.html#vtu_export",
        "title": "vtu_export",
        "section": "vtu_export",
        "text": "Autogenerated DPF operator classes.\nvtu_export"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.extend_to_mid_nodes",
        "href": "api/ansys.dpf.core.operators.averaging.extend_to_mid_nodes.html#extend_to_mid_nodes",
        "title": "extend_to_mid_nodes",
        "section": "extend_to_mid_nodes",
        "text": "Autogenerated DPF operator classes.\nextend_to_mid_nodes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_low_pass_fc",
        "href": "api/ansys.dpf.core.operators.filter.field_low_pass_fc.html#field_low_pass_fc",
        "title": "field_low_pass_fc",
        "section": "field_low_pass_fc",
        "text": "Autogenerated DPF operator classes.\nfield_low_pass_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.eigen_vectors",
        "href": "api/ansys.dpf.core.operators.invariant.eigen_vectors.html#eigen_vectors",
        "title": "eigen_vectors",
        "section": "eigen_vectors",
        "text": "Autogenerated DPF operator classes.\neigen_vectors"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.add_fc",
        "href": "api/ansys.dpf.core.operators.math.add_fc.html#add_fc",
        "title": "add_fc",
        "section": "add_fc",
        "text": "Autogenerated DPF operator classes.\nadd_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.component_transformer_fc",
        "href": "api/ansys.dpf.core.operators.logic.component_transformer_fc.html#component_transformer_fc",
        "title": "component_transformer_fc",
        "section": "component_transformer_fc",
        "text": "Autogenerated DPF operator classes.\ncomponent_transformer_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.scoping_get_attribute",
        "href": "api/ansys.dpf.core.operators.scoping.scoping_get_attribute.html#scoping_get_attribute",
        "title": "scoping_get_attribute",
        "section": "scoping_get_attribute",
        "text": "Autogenerated DPF operator classes.\nscoping_get_attribute"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.txt_to_data_tree",
        "href": "api/ansys.dpf.core.operators.serialization.txt_to_data_tree.html#txt_to_data_tree",
        "title": "txt_to_data_tree",
        "section": "txt_to_data_tree",
        "text": "Autogenerated DPF operator classes.\ntxt_to_data_tree"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.identical_fields",
        "href": "api/ansys.dpf.core.operators.logic.identical_fields.html#identical_fields",
        "title": "identical_fields",
        "section": "identical_fields",
        "text": "Autogenerated DPF operator classes.\nidentical_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.mesh_support_provider",
        "href": "api/ansys.dpf.core.operators.metadata.mesh_support_provider.html#mesh_support_provider",
        "title": "mesh_support_provider",
        "section": "mesh_support_provider",
        "text": "Autogenerated DPF operator classes.\nmesh_support_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.remove_rigid_body_motion",
        "href": "api/ansys.dpf.core.operators.result.remove_rigid_body_motion.html#remove_rigid_body_motion",
        "title": "remove_rigid_body_motion",
        "section": "remove_rigid_body_motion",
        "text": "Autogenerated DPF operator classes.\nremove_rigid_body_motion"
    },
    {
        "objectID": "examples/02-modal_analyses/01-plot_and_animate_modes",
        "href": "examples/02-modal_analyses/01-plot_and_animate_modes.html#plot-and-animate-mode-shapes-with-dpf",
        "title": "Plot and animate mode shapes with DPF",
        "section": "Plot and animate mode shapes with DPF",
        "text": "This example shows how to extract mode shapes from a modal analysis result\nand how to plot and animate them.\nPlot and animate mode shapes with DPF"
    },
    {
        "objectID": "examples/02-modal_analyses/01-plot_and_animate_modes",
        "href": "examples/02-modal_analyses/01-plot_and_animate_modes.html#retrieve-mode-shapes",
        "title": "Plot and animate mode shapes with DPF > Retrieve mode shapes",
        "section": "Retrieve mode shapes",
        "text": "Retrieve mode shapes"
    },
    {
        "objectID": "examples/02-modal_analyses/01-plot_and_animate_modes",
        "href": "examples/02-modal_analyses/01-plot_and_animate_modes.html#plot-mode-shapes",
        "title": "Plot and animate mode shapes with DPF > Plot mode shapes",
        "section": "Plot mode shapes",
        "text": "Animate a mode shape\nTo suppress window pop-up, set the off_screen argument to True.\n~~~~~~~~~~~~~~~~~~~~\nTotal running time of the script: (0 minutes 38.342 seconds)\nDownload Jupyter notebook: 01-plot_and_animate_modes.ipynb\nDownload Python source code: 01-plot_and_animate_modes.py\nDownload zipped: 01-plot_and_animate_modes.zip\nGallery generated by Sphinx-Gallery\nPlot mode shapes\nDownload Jupyter notebook: 01-plot_and_animate_modes.ipynb\nDownload Python source code: 01-plot_and_animate_modes.py\nDownload zipped: 01-plot_and_animate_modes.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elemental_heat_generation",
        "href": "api/ansys.dpf.core.operators.result.elemental_heat_generation.html#elemental_heat_generation",
        "title": "elemental_heat_generation",
        "section": "elemental_heat_generation",
        "text": "Autogenerated DPF operator classes.\nelemental_heat_generation"
    },
    {
        "objectID": "api/ansys.dpf.core.fields_container",
        "href": "api/ansys.dpf.core.fields_container.html#fieldscontainer",
        "title": "FieldsContainer",
        "section": "FieldsContainer",
        "text": "Contains classes associated with the DPF FieldsContainer.\nFieldsContainer"
    },
    {
        "objectID": "api/ansys.dpf.core.helpers",
        "href": "api/ansys.dpf.core.helpers.html#ansysdpfcorehelpers-namespace",
        "title": "ansys.dpf.core.helpers namespace",
        "section": "ansys.dpf.core.helpers namespace",
        "text": "ansys.dpf.core.helpers namespace"
    },
    {
        "objectID": "api/ansys.dpf.core.helpers",
        "href": "api/ansys.dpf.core.helpers.html#submodules",
        "title": "ansys.dpf.core.helpers namespace > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.smisc",
        "href": "api/ansys.dpf.core.operators.result.smisc.html#smisc",
        "title": "smisc",
        "section": "smisc",
        "text": "Autogenerated DPF operator classes.\nsmisc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mapdl_split_on_facet_indices",
        "href": "api/ansys.dpf.core.operators.result.mapdl_split_on_facet_indices.html#mapdl_split_on_facet_indices",
        "title": "mapdl_split_on_facet_indices",
        "section": "mapdl_split_on_facet_indices",
        "text": "Autogenerated DPF operator classes.\nmapdl_split_on_facet_indices"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.scoping_band_pass",
        "href": "api/ansys.dpf.core.operators.filter.scoping_band_pass.html#scoping_band_pass",
        "title": "scoping_band_pass",
        "section": "scoping_band_pass",
        "text": "Autogenerated DPF operator classes.\nscoping_band_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.identical_string_fields",
        "href": "api/ansys.dpf.core.operators.logic.identical_string_fields.html#identical_string_fields",
        "title": "identical_string_fields",
        "section": "identical_string_fields",
        "text": "Autogenerated DPF operator classes.\nidentical_string_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.material_property_of_element",
        "href": "api/ansys.dpf.core.operators.result.material_property_of_element.html#material_property_of_element",
        "title": "material_property_of_element",
        "section": "material_property_of_element",
        "text": "Autogenerated DPF operator classes.\nmaterial_property_of_element"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_weighted_fields_containers",
        "href": "api/ansys.dpf.core.operators.utility.merge_weighted_fields_containers.html#merge_weighted_fields_containers",
        "title": "merge_weighted_fields_containers",
        "section": "merge_weighted_fields_containers",
        "text": "Autogenerated DPF operator classes.\nmerge_weighted_fields_containers"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_to_elemental_nodal",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_to_elemental_nodal.html#elemental_to_elemental_nodal",
        "title": "elemental_to_elemental_nodal",
        "section": "elemental_to_elemental_nodal",
        "text": "Autogenerated DPF operator classes.\nelemental_to_elemental_nodal"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_YZ",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_YZ.html#compute_total_strain_yz",
        "title": "compute_total_strain_YZ",
        "section": "compute_total_strain_YZ",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_YZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_principal_1",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_principal_1.html#plastic_strain_principal_1",
        "title": "plastic_strain_principal_1",
        "section": "plastic_strain_principal_1",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_principal_1"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.scale_fc",
        "href": "api/ansys.dpf.core.operators.math.scale_fc.html#scale_fc",
        "title": "scale_fc",
        "section": "scale_fc",
        "text": "Autogenerated DPF operator classes.\nscale_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_welch",
        "href": "api/ansys.dpf.core.operators.math.window_welch.html#window_welch",
        "title": "window_welch",
        "section": "window_welch",
        "text": "Autogenerated DPF operator classes.\nwindow_welch"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.acceleration_Z",
        "href": "api/ansys.dpf.core.operators.result.acceleration_Z.html#acceleration_z",
        "title": "acceleration_Z",
        "section": "acceleration_Z",
        "text": "Autogenerated DPF operator classes.\nacceleration_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.string_deserializer",
        "href": "api/ansys.dpf.core.operators.serialization.string_deserializer.html#string_deserializer",
        "title": "string_deserializer",
        "section": "string_deserializer",
        "text": "Autogenerated DPF operator classes.\nstring_deserializer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_analytic_seqv_max",
        "href": "api/ansys.dpf.core.operators.result.cyclic_analytic_seqv_max.html#cyclic_analytic_seqv_max",
        "title": "cyclic_analytic_seqv_max",
        "section": "cyclic_analytic_seqv_max",
        "text": "Autogenerated DPF operator classes.\ncyclic_analytic_seqv_max"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.minus",
        "href": "api/ansys.dpf.core.operators.math.minus.html#minus",
        "title": "minus",
        "section": "minus",
        "text": "Autogenerated DPF operator classes.\nminus"
    },
    {
        "objectID": "examples/00-basic/08-results_over_time_subset",
        "href": "examples/00-basic/08-results_over_time_subset.html#scope-results-over-custom-time-domains",
        "title": "Scope results over custom time domains",
        "section": "Scope results over custom time domains",
        "text": "The Result class, which are instances\ncreated by the Model, give\naccess to helpers for requesting results on specific mesh and time scopings.\nWith these helpers, working on a temporal subset of the\nmodel is straightforward. In this example, different ways to choose the temporal subset to\nevaluate a result are exposed. This example can be extended to frequency subsets.\nCreate a model object to establish a connection with an example result file:\nScope results over custom time domains\nResult\nModel"
    },
    {
        "objectID": "examples/00-basic/08-results_over_time_subset",
        "href": "examples/00-basic/08-results_over_time_subset.html#request-specific-time-sets",
        "title": "Scope results over custom time domains > Request specific time sets",
        "section": "Request specific time sets",
        "text": "If specific time sets are of interest, looking into the TimeFreqSupport\nand connect a given time_scoping accordingly to the cumulative indexes can be useful.\nEquivalent to:\nEquivalent to:\nRequest specific time sets\nTimeFreqSupport\ntime_scoping"
    },
    {
        "objectID": "examples/00-basic/08-results_over_time_subset",
        "href": "examples/00-basic/08-results_over_time_subset.html#request-specific-time-steps",
        "title": "Scope results over custom time domains > Request specific time steps",
        "section": "Request specific time steps",
        "text": "If specific time steps or load steps are of interest, looking into the\nTimeFreqSupport and connect a given time_scoping located on steps can be done.\nEquivalent to:\nRequest specific time steps\nTimeFreqSupport\ntime_scoping"
    },
    {
        "objectID": "examples/00-basic/08-results_over_time_subset",
        "href": "examples/00-basic/08-results_over_time_subset.html#using-helpers",
        "title": "Scope results over custom time domains > Using helpers",
        "section": "Using helpers",
        "text": "Evaluate at all times.\nEvaluate at first and last times\nTotal running time of the script: (0 minutes 0.688 seconds)\nDownload Jupyter notebook: 08-results_over_time_subset.ipynb\nDownload Python source code: 08-results_over_time_subset.py\nDownload zipped: 08-results_over_time_subset.zip\nGallery generated by Sphinx-Gallery\nUsing helpers\nDownload Jupyter notebook: 08-results_over_time_subset.ipynb\nDownload Python source code: 08-results_over_time_subset.py\nDownload zipped: 08-results_over_time_subset.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.rescope_custom_type_field",
        "href": "api/ansys.dpf.core.operators.scoping.rescope_custom_type_field.html#rescope_custom_type_field",
        "title": "rescope_custom_type_field",
        "section": "rescope_custom_type_field",
        "text": "Autogenerated DPF operator classes.\nrescope_custom_type_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.unit_convert",
        "href": "api/ansys.dpf.core.operators.math.unit_convert.html#unit_convert",
        "title": "unit_convert",
        "section": "unit_convert",
        "text": "Autogenerated DPF operator classes.\nunit_convert"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_max_shear",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_max_shear.html#elastic_strain_max_shear",
        "title": "elastic_strain_max_shear",
        "section": "elastic_strain_max_shear",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_max_shear"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.write_cms_rbd_file",
        "href": "api/ansys.dpf.core.operators.result.write_cms_rbd_file.html#write_cms_rbd_file",
        "title": "write_cms_rbd_file",
        "section": "write_cms_rbd_file",
        "text": "Autogenerated DPF operator classes.\nwrite_cms_rbd_file"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.accu_eqv_creep_strain",
        "href": "api/ansys.dpf.core.operators.result.accu_eqv_creep_strain.html#accu_eqv_creep_strain",
        "title": "accu_eqv_creep_strain",
        "section": "accu_eqv_creep_strain",
        "text": "Autogenerated DPF operator classes.\naccu_eqv_creep_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.element_orientations_Z",
        "href": "api/ansys.dpf.core.operators.result.element_orientations_Z.html#element_orientations_z",
        "title": "element_orientations_Z",
        "section": "element_orientations_Z",
        "text": "Autogenerated DPF operator classes.\nelement_orientations_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_Z",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_Z.html#plastic_strain_z",
        "title": "plastic_strain_Z",
        "section": "plastic_strain_Z",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_hourglass_energy",
        "href": "api/ansys.dpf.core.operators.result.part_hourglass_energy.html#part_hourglass_energy",
        "title": "part_hourglass_energy",
        "section": "part_hourglass_energy",
        "text": "Autogenerated DPF operator classes.\npart_hourglass_energy"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#custom-operators",
        "title": "Custom operators",
        "section": "Custom operators",
        "text": "In Ansys 2023 R1 and later, you can create custom operators in CPython. Creating custom operators\nconsists of wrapping Python routines in a DPF-compliant way so that you can access them in the same way\nas you access the native operators in the ansys.dpf.core.dpf_operator.Operator class in\nPyDPF-Core or in any supported client API.\nWith support for custom operators, PyDPF-Core becomes a development tool offering:\nAccessibility: A simple script can define a basic operator plugin.\nComponentization: Operators with similar applications can be grouped in Python plug-in packages.\nEasy distribution: Standard Python tools can be used to package, upload, and download custom operators.\nDependency management: Third-party Python modules can be added to the Python package.\nReusability: A documented and packaged operator can be reused in an infinite number of workflows.\nRemotable and parallel computing: Native DPF capabilities are inherited by custom operators.\nThe only prerequisite for creating custom operators is to be familiar with native operators.\nFor more information, see ref_user_guide_operators.\nCustom operators\nansys.dpf.core.dpf_operator.Operator"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#install-module",
        "title": "Custom operators > Install module",
        "section": "Install module",
        "text": "Once an Ansys-unified installation is complete, you must install the ansys-dpf-core module in the Ansys\ninstaller’s Python interpreter.\nDownload the script for you operating system:\nFor Windows, download this PowerShell script.\nFor Linux, download this Shell script\nRun the downloaded script for installing with optional arguments:\n-awp_root: Path to the Ansys root installation folder. For example, the 2023 R1 installation folder ends\nwith Ansys Inc/v231, and the default environment variable is AWP_ROOT231.\n-pip_args: Optional arguments to add to the pip command. For example, --extra-index-url or\n--trusted-host.\nIf you ever want to uninstall the ansys-dpf-core module from the Ansys installation, you can do so.\nDownload the script for your operating system:\nFor Windows, download this PowerShell script.\nFor Linux, download this Shell script.\nRun the downloaded script for uninstalling with the optional argument:\n-awp_root: Path to the Ansys root installation folder.  For example, the 2023 R1 installation folder ends\nwith Ansys Inc/v231, and the default environment variable is AWP_ROOT231.\nInstall module\nansys-dpf-core\nPowerShell script\nShell script\n-awp_root\nAnsys Inc/v231\nAWP_ROOT231\n-pip_args\npip\n--extra-index-url\n--trusted-host\nansys-dpf-core\nPowerShell script\nShell script\n-awp_root\nAnsys Inc/v231\nAWP_ROOT231"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#create-operators",
        "title": "Custom operators > Create operators",
        "section": "Create operators",
        "text": "You can create a basic operator plugin or a plug-in package with multiple operators.\nCreate operators"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#basic-operator-plugin",
        "title": "Custom operators > Basic operator plugin",
        "section": "Basic operator plugin",
        "text": "To create a basic operator plugin, you write a simple Python script. An operator implementation\nderives from the ansys.dpf.core.custom_operator.CustomOperatorBase class and a call to\nthe ansys.dpf.core.custom_operator.record_operator() method.\nThis example script shows how you create a basic operator plugin:\nIn the various properties for the class, you specify the following:\nName for the custom operator\nDescription of what the operator does\nDictionary for each input and output pin, which includes the name, a list of supported types, a description,\nand whether it is optional and/or ellipsis (meaning that the specification is valid for pins going from pin\nnumber x to infinity)\nList for operator properties, including name to use in the documentation and code generation and the\noperator category. The optional license property allows to define a required license to check out\nwhen running the operator. Set it equal to any_dpf_supported_increments to allow any license\ncurrently accepted by DPF (see here)\nFor comprehensive examples on writing operator plugins, see python_operators.\nBasic operator plugin\nansys.dpf.core.custom_operator.CustomOperatorBase\nansys.dpf.core.custom_operator.record_operator()\nlicense\nany_dpf_supported_increments"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#plug-in-package-with-multiple-operators",
        "title": "Custom operators > Plug-in package with multiple operators",
        "section": "Plug-in package with multiple operators",
        "text": "To create a plug-in package with multiple operators or with complex routines, you write a\nPython package. The benefits of writing packages rather than simple scripts are:\nComponentization: You can split the code into several Python modules or files.\nDistribution: You can use standard Python tools to upload and download packages.\nDocumentation: You can add README files, documentation, tests, and examples to the package.\nA plug-in package with dependencies consists of a folder with the necessary files. Assume\nthat the name of your plug-in package is custom_plugin. A folder with this name would\ncontain four files:\n__init__.py\noperators.py\noperators_loader.py\ncommon.py\n__init__.py file\nThe __init__.py file contains this code:\noperators.py file\nThe operators.py file contains code like this:\noperators_loader.py file\nThe operators_loader.py file contains code like this:\ncommon.py file\nThe common.py file contains the Python routines as classes and functions:\nPlug-in package with multiple operators\ncustom_plugin\n__init__.py\noperators.py\noperators_loader.py\ncommon.py\n__init__.py\noperators.py\noperators_loader.py\ncommon.py"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#third-party-dependencies",
        "title": "Custom operators > Third-party dependencies",
        "section": "Third-party dependencies",
        "text": "To add third-party modules as dependencies to a plug-in package, you should create\nand reference a folder or ZIP file with the sites of the dependencies in an XML file\nlocated next to the folder for the plug-in package. The XML file must have the same\nname as the plug-in package plus an .xml extension.\nWhen the ansys.dpf.core.core.load_library() method is called, PyDPF-Core uses the\nsite Python module to add custom sites to the path for the Python interpreter.\nTo create these custom sites, do the following:\nInstall the requirements of the plug-in package in a Python virtual environment.\nRemove unnecessary folders from the site packages and compress them to a ZIP file.\nPlace the ZIP file in the plug-in package.\nReference the path to the ZIP file in the XML file as indicated above.\nTo simplify this step, you can add a requirements file in the plug-in package:\nFor this approach, do the following:\nDownload the script for your operating system:\nFor Windows, download this PowerShell script.\nFor Linux, download this Shell script.\nRun the downloaded script with the mandatory arguments:\n-pluginpath: Path to the folder with the plug-in package.\n-zippath: Path and name for the ZIP file.\nOptional arguments are:\n-pythonexe: Path to a Python executable of your choice.\n-tempfolder: Path to a temporary folder to work in. The default is the environment variable\nTEMP on Windows and /tmp/ on Linux.\nRun the command for your operating system.\nFrom Windows PowerShell, run:\nFrom Linux Shell, run:\nAssume once again that the name of your plug-in package is custom_plugin.\nA folder with this name would contain these files:\n__init__.py\noperators.py\noperators_loader.py\ncommon.py\nwinx64.zip\nlinx64.zip\ncustom_plugin.xml\n__init__.py file\nThe __init__.py file contains this code:\noperators.py file\nThe operators.py file contains code like this:\noperators_loader.py file\nThe operators_loader.py file contains code like this:\ncommon.py file\nThe common.py file contains the Python routines as classes and functions:\nrequirements.txt file\nThe requirements.txt file contains code like this:\nThe ZIP files for Windows and Linux are included as assets:\nwinx64.zip\nlinx64.zip\ncustom_plugin.xml file\nThe custom_plugin.xml file contains code like this:\nThird-party dependencies\n.xml\nansys.dpf.core.core.load_library()\nsite\nPowerShell script\nShell script\n-pluginpath\n-zippath\n-pythonexe\n-tempfolder\nTEMP\n/tmp/\ncustom_plugin\n__init__.py\noperators.py\noperators_loader.py\ncommon.py\nwinx64.zip\nlinx64.zip\ncustom_plugin.xml\n__init__.py\noperators.py\noperators_loader.py\ncommon.py\nrequirements.txt\nwinx64.zip\nlinx64.zip\ncustom_plugin.xml"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#use-custom-operators",
        "title": "Custom operators > Use custom operators",
        "section": "Use custom operators",
        "text": "Once a custom operator is created, you can use the ansys.dpf.core.core.load_library() method to load it.\nThe first argument is the path to the directory with the plugin. The second argument is py_ plus any name\nidentifying the plugin. The last argument is the function name for recording operators.\nFor a plugin that is a single script, the second argument should be py_ plus the name of the Python file:\nFor a plug-in package, the second argument should be py_ plus any name:\nOnce the plugin is loaded, you can instantiate the custom operator:\nUse custom operators\nansys.dpf.core.core.load_library()\npy_\npy_\npy_"
    },
    {
        "objectID": "user_guide/custom_operators",
        "href": "user_guide/custom_operators.html#references",
        "title": "Custom operators > References",
        "section": "References",
        "text": "For more information, see ref_custom_operator in the API reference\nand python_operators in Examples.\nReferences"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cross_product_fc",
        "href": "api/ansys.dpf.core.operators.math.cross_product_fc.html#cross_product_fc",
        "title": "cross_product_fc",
        "section": "cross_product_fc",
        "text": "Autogenerated DPF operator classes.\ncross_product_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.connectivity_ids",
        "href": "api/ansys.dpf.core.operators.scoping.connectivity_ids.html#connectivity_ids",
        "title": "connectivity_ids",
        "section": "connectivity_ids",
        "text": "Autogenerated DPF operator classes.\nconnectivity_ids"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.acmo_mesh_provider",
        "href": "api/ansys.dpf.core.operators.mesh.acmo_mesh_provider.html#acmo_mesh_provider",
        "title": "acmo_mesh_provider",
        "section": "acmo_mesh_provider",
        "text": "Autogenerated DPF operator classes.\nacmo_mesh_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.rms_velocity",
        "href": "api/ansys.dpf.core.operators.result.rms_velocity.html#rms_velocity",
        "title": "rms_velocity",
        "section": "rms_velocity",
        "text": "Autogenerated DPF operator classes.\nrms_velocity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure_XZ",
        "href": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure_XZ.html#gasket_inelastic_closure_xz",
        "title": "gasket_inelastic_closure_XZ",
        "section": "gasket_inelastic_closure_XZ",
        "text": "Autogenerated DPF operator classes.\ngasket_inelastic_closure_XZ"
    },
    {
        "objectID": "examples/05-file-IO/sg_execution_times",
        "href": "examples/05-file-IO/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:30.327 total execution time for 4 files from examples05-file-IO:\nExample\nTime\nMem (MB)\nsphx_glr_examples_05-file-IO_02-hdf5_serialize_and_read.py (02-hdf5_serialize_and_read.py)\n00:13.100\n0.0\nsphx_glr_examples_05-file-IO_04-basic-load-file.py (04-basic-load-file.py)\n00:12.975\n0.0\nsphx_glr_examples_05-file-IO_01-reduced_matrices_export.py (01-reduced_matrices_export.py)\n00:04.064\n0.0\nsphx_glr_examples_05-file-IO_00-hdf5_double_float_comparison.py (00-hdf5_double_float_comparison.py)\n00:00.188\n0.0\nComputation times\n02-hdf5_serialize_and_read.py\n04-basic-load-file.py\n01-reduced_matrices_export.py\n00-hdf5_double_float_comparison.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.reduce_sampling",
        "href": "api/ansys.dpf.core.operators.scoping.reduce_sampling.html#reduce_sampling",
        "title": "reduce_sampling",
        "section": "reduce_sampling",
        "text": "Autogenerated DPF operator classes.\nreduce_sampling"
    },
    {
        "objectID": "api/ansys.dpf.core.errors",
        "href": "api/ansys.dpf.core.errors.html#errors",
        "title": "Errors",
        "section": "Errors",
        "text": "Error raised when the dpf-core/grpc-dpf python features are not\nsupported by the DPF gRPC server version.\nError raised when the DPF server cannot find an object.\nErrors"
    },
    {
        "objectID": "api/ansys.dpf.core.errors",
        "href": "api/ansys.dpf.core.errors.html#ansys.dpf.core.errors.DpfVersionNotSupported",
        "title": "Errors > Errors > DpfVersionNotSupported",
        "section": "Errors > DpfVersionNotSupported",
        "text": "exception ansys.dpf.core.errors.DpfVersionNotSupported(version, msg=None)\n\nError raised when the dpf-core/grpc-dpf python features are not\nsupported by the DPF gRPC server version."
    },
    {
        "objectID": "api/ansys.dpf.core.errors",
        "href": "api/ansys.dpf.core.errors.html#ansys.dpf.core.errors.DPFServerNullObject",
        "title": "Errors > Errors > DPFServerNullObject",
        "section": "Errors > DPFServerNullObject",
        "text": "exception ansys.dpf.core.errors.DPFServerNullObject(msg='')\n\nError raised when the DPF server cannot find an object."
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_el_strain",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_el_strain.html#cyclic_expanded_el_strain",
        "title": "cyclic_expanded_el_strain",
        "section": "cyclic_expanded_el_strain",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_el_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.element_centroids",
        "href": "api/ansys.dpf.core.operators.result.element_centroids.html#element_centroids",
        "title": "element_centroids",
        "section": "element_centroids",
        "text": "Autogenerated DPF operator classes.\nelement_centroids"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.eqv_stress_parameter",
        "href": "api/ansys.dpf.core.operators.result.eqv_stress_parameter.html#eqv_stress_parameter",
        "title": "eqv_stress_parameter",
        "section": "eqv_stress_parameter",
        "text": "Autogenerated DPF operator classes.\neqv_stress_parameter"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_materials",
        "href": "api/ansys.dpf.core.operators.utility.merge_materials.html#merge_materials",
        "title": "merge_materials",
        "section": "merge_materials",
        "text": "Autogenerated DPF operator classes.\nmerge_materials"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_s_bending_moment",
        "href": "api/ansys.dpf.core.operators.result.beam_s_bending_moment.html#beam_s_bending_moment",
        "title": "beam_s_bending_moment",
        "section": "beam_s_bending_moment",
        "text": "Autogenerated DPF operator classes.\nbeam_s_bending_moment"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.scalars_to_field",
        "href": "api/ansys.dpf.core.operators.utility.scalars_to_field.html#scalars_to_field",
        "title": "scalars_to_field",
        "section": "scalars_to_field",
        "text": "Autogenerated DPF operator classes.\nscalars_to_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.html_doc",
        "href": "api/ansys.dpf.core.operators.utility.html_doc.html#html_doc",
        "title": "html_doc",
        "section": "html_doc",
        "text": "Autogenerated DPF operator classes.\nhtml_doc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max_by_time",
        "href": "api/ansys.dpf.core.operators.min_max.min_max_by_time.html#min_max_by_time",
        "title": "min_max_by_time",
        "section": "min_max_by_time",
        "text": "Autogenerated DPF operator classes.\nmin_max_by_time"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_momentum",
        "href": "api/ansys.dpf.core.operators.result.part_momentum.html#part_momentum",
        "title": "part_momentum",
        "section": "part_momentum",
        "text": "Autogenerated DPF operator classes.\npart_momentum"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_t_shear_force",
        "href": "api/ansys.dpf.core.operators.result.beam_t_shear_force.html#beam_t_shear_force",
        "title": "beam_t_shear_force",
        "section": "beam_t_shear_force",
        "text": "Autogenerated DPF operator classes.\nbeam_t_shear_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.ln_fc",
        "href": "api/ansys.dpf.core.operators.math.ln_fc.html#ln_fc",
        "title": "ln_fc",
        "section": "ln_fc",
        "text": "Autogenerated DPF operator classes.\nln_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.coordinate_system",
        "href": "api/ansys.dpf.core.operators.result.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Autogenerated DPF operator classes.\ncoordinate_system"
    },
    {
        "objectID": "api/ansys.dpf.core.geometry_factory",
        "href": "api/ansys.dpf.core.geometry_factory.html#geometry-factory",
        "title": "Geometry Factory",
        "section": "Geometry Factory",
        "text": "Geometry factory module containing functions to create the different geometries.\nGeometry Factory"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.time_derivation",
        "href": "api/ansys.dpf.core.operators.math.time_derivation.html#time_derivation",
        "title": "time_derivation",
        "section": "time_derivation",
        "text": "Autogenerated DPF operator classes.\ntime_derivation"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.accu_eqv_plastic_strain",
        "href": "api/ansys.dpf.core.operators.result.accu_eqv_plastic_strain.html#accu_eqv_plastic_strain",
        "title": "accu_eqv_plastic_strain",
        "section": "accu_eqv_plastic_strain",
        "text": "Autogenerated DPF operator classes.\naccu_eqv_plastic_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.element_nodal_contribution",
        "href": "api/ansys.dpf.core.operators.geo.element_nodal_contribution.html#element_nodal_contribution",
        "title": "element_nodal_contribution",
        "section": "element_nodal_contribution",
        "text": "Autogenerated DPF operator classes.\nelement_nodal_contribution"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_invariant_terms_motion",
        "href": "api/ansys.dpf.core.operators.result.compute_invariant_terms_motion.html#compute_invariant_terms_motion",
        "title": "compute_invariant_terms_motion",
        "section": "compute_invariant_terms_motion",
        "text": "Autogenerated DPF operator classes.\ncompute_invariant_terms_motion"
    },
    {
        "objectID": "examples/04-advanced/sg_execution_times",
        "href": "examples/04-advanced/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "01:35.026 total execution time for 13 files from examples04-advanced:\nExample\nTime\nMem (MB)\nsphx_glr_examples_04-advanced_12-read_distributed_files.py (12-read_distributed_files.py)\n00:17.430\n0.0\nsphx_glr_examples_04-advanced_03-exchange_data_between_servers.py (03-exchange_data_between_servers.py)\n00:12.733\n0.0\nsphx_glr_examples_04-advanced_04-extrapolation_stress_3d.py (04-extrapolation_stress_3d.py)\n00:12.271\n0.0\nsphx_glr_examples_04-advanced_05-extrapolation_strain_2d.py (05-extrapolation_strain_2d.py)\n00:11.990\n0.0\nsphx_glr_examples_04-advanced_13-manage_licensing.py (13-manage_licensing.py)\n00:11.929\n0.0\nsphx_glr_examples_04-advanced_02-volume_averaged_stress.py (02-volume_averaged_stress.py)\n00:09.866\n0.0\nsphx_glr_examples_04-advanced_06-stress_gradient_path.py (06-stress_gradient_path.py)\n00:05.770\n0.0\nsphx_glr_examples_04-advanced_14-incremental_evaluation.py (14-incremental_evaluation.py)\n00:04.189\n0.0\nsphx_glr_examples_04-advanced_11-cycles_to_failure.py (11-cycles_to_failure.py)\n00:03.330\n0.0\nsphx_glr_examples_04-advanced_00-multistage_advanced_options.py (00-multistage_advanced_options.py)\n00:03.142\n0.0\nsphx_glr_examples_04-advanced_10-asme_secviii_divtwo.py (10-asme_secviii_divtwo.py)\n00:02.188\n0.0\nsphx_glr_examples_04-advanced_01-solve_harmonic_problem.py (01-solve_harmonic_problem.py)\n00:00.172\n0.0\nsphx_glr_examples_04-advanced_07-load_plugin.py (07-load_plugin.py)\n00:00.016\n0.0\nComputation times\n12-read_distributed_files.py\n03-exchange_data_between_servers.py\n04-extrapolation_stress_3d.py\n05-extrapolation_strain_2d.py\n13-manage_licensing.py\n02-volume_averaged_stress.py\n06-stress_gradient_path.py\n14-incremental_evaluation.py\n11-cycles_to_failure.py\n00-multistage_advanced_options.py\n10-asme_secviii_divtwo.py\n01-solve_harmonic_problem.py\n07-load_plugin.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.node_coordinates",
        "href": "api/ansys.dpf.core.operators.mesh.node_coordinates.html#node_coordinates",
        "title": "node_coordinates",
        "section": "node_coordinates",
        "text": "Autogenerated DPF operator classes.\nnode_coordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_energy_ratio",
        "href": "api/ansys.dpf.core.operators.result.global_energy_ratio.html#global_energy_ratio",
        "title": "global_energy_ratio",
        "section": "global_energy_ratio",
        "text": "Autogenerated DPF operator classes.\nglobal_energy_ratio"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cos_fc",
        "href": "api/ansys.dpf.core.operators.math.cos_fc.html#cos_fc",
        "title": "cos_fc",
        "section": "cos_fc",
        "text": "Autogenerated DPF operator classes.\ncos_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.normals",
        "href": "api/ansys.dpf.core.operators.geo.normals.html#normals",
        "title": "normals",
        "section": "normals",
        "text": "Autogenerated DPF operator classes.\nnormals"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sin",
        "href": "api/ansys.dpf.core.operators.math.sin.html#sin",
        "title": "sin",
        "section": "sin",
        "text": "Autogenerated DPF operator classes.\nsin"
    },
    {
        "objectID": "user_guide/server_types",
        "href": "user_guide/server_types.html#client-server-communication",
        "title": "Client-server communication",
        "section": "Client-server communication",
        "text": "Client-server communication"
    },
    {
        "objectID": "user_guide/server_types",
        "href": "user_guide/server_types.html#terminology",
        "title": "Client-server communication > Terminology",
        "section": "Terminology",
        "text": "DPF is based on a client-server architecture.\nA DPF Server is a set of files that enables DPF capabilities.\nPyDPF-Core is a Python client API communicating with a DPF Server, either\ndirectly in the same process or through the network using gRPC.\nTerminology"
    },
    {
        "objectID": "user_guide/server_types",
        "href": "user_guide/server_types.html#dpf-server-in-the-same-process",
        "title": "Client-server communication > DPF Server in the same process",
        "section": "DPF Server in the same process",
        "text": "Default use of a PyDPF-Core client and a DPF Server is in the same process,\nusing the InProcess class.\nThis DPF Server can now be used to instantiate models, operators, and more.\nDPF Server in the same process\nInProcess"
    },
    {
        "objectID": "user_guide/server_types",
        "href": "user_guide/server_types.html#dpf-server-through-the-network-using-grpc",
        "title": "Client-server communication > DPF Server through the network using gRPC",
        "section": "DPF Server through the network using gRPC",
        "text": "The GrpcServer class is used\nto enable gRPC communication:\nYou can obtain the server port and IP address:\nFrom another machine, you can connect remotely to this DPF Server and instantiate models, operators, and more:\nThrough the network using gRPC, a DPF sever enables distributed computation capabilities.\nFor more information, see distributed_post.\nDPF Server through the network using gRPC\nGrpcServer"
    },
    {
        "objectID": "user_guide/server_types",
        "href": "user_guide/server_types.html#dpf-server-startup-using-a-configuration",
        "title": "Client-server communication > DPF Server startup using a configuration",
        "section": "DPF Server startup using a configuration",
        "text": "The different DPF server types can be started using one of the\nAvailableServerConfigs\nconfigurations.\nDPF Server startup using a configuration\nAvailableServerConfigs"
    },
    {
        "objectID": "user_guide/server_types",
        "href": "user_guide/server_types.html#advanced-concepts-and-release-history",
        "title": "Client-server communication > Advanced concepts and release history",
        "section": "Advanced concepts and release history",
        "text": "The communication logic with a DPF server is defined when starting it using\nan instance of the ServerConfig class.\nDifferent predefined server configurations are available in DPF,\neach answering a different use case. For more information, see the\nAvailableServerConfigs class.\nThe GrpcServer configuration is available in\nserver version 4.0 (Ansys 2022 R2) and later. It allows you to remotely connect to a DPF server\nacross a network by telling the client to communicate with this server via the gRPC communication protocol.\nAlthough it can be used to communicate with a DPF server running on the same local machine, the next\nconfiguration is better for this option.\nThe InProcessServer configuration is available\nin server version 4.0 (Ansys 2022 R2) and later. It indicates to the client that a DPF server is\ninstalled on the local machine, enabling direct calls to the server binaries from within the client’s\nown Python process. This removes the need to copy and send data between the client and server, and it\nmakes calls to the server functionalities much faster and uses less memory.\nThe LegacyGrpcServer configuration is\nthe only one available for server versions 4.0 and earlier (Ansys 2022 R1, 2021 R2, and 2021 R1).\nThe client communicates with a local or remote DPF server via the gRPC communication protocol.\nFor DPF with Ansys 2023 R1 and later, InProcessServer\nis the default configuration, which means that servers are launched on the local machine.\nTo launch a DPF server on a remote machine and communicate with it using gRPC, use\nthe GrpcServer configuration as shown in ref_server_types_example.\nAdvanced concepts and release history\nServerConfig\nAvailableServerConfigs\nGrpcServer\nInProcessServer\nLegacyGrpcServer\nInProcessServer\nGrpcServer"
    },
    {
        "objectID": "api/ansys.dpf.core.data_tree",
        "href": "api/ansys.dpf.core.data_tree.html#datatree",
        "title": "DataTree",
        "section": "DataTree",
        "text": "DataTree"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.import_symbolic_workflow",
        "href": "api/ansys.dpf.core.operators.serialization.import_symbolic_workflow.html#import_symbolic_workflow",
        "title": "import_symbolic_workflow",
        "section": "import_symbolic_workflow",
        "text": "Autogenerated DPF operator classes.\nimport_symbolic_workflow"
    },
    {
        "objectID": "examples/07-distributed-post/01-distributed_workflows_on_remote",
        "href": "examples/07-distributed-post/01-distributed_workflows_on_remote.html#create-a-custom-workflow-on-distributed-processes",
        "title": "Create a custom workflow on distributed processes",
        "section": "Create a custom workflow on distributed processes",
        "text": "This example shows how to read and postprocess distributed files on\ndistributed processes. After remote postprocessing, results are merged\non the local process. This example creates different operator\nsequences directly on different servers. These operators are then\nconnected together so that you don’t have to care that they are on\nremote processes.\nImport the dpf-core module and its examples files.\nConfigure the servers.\nTo make it easier, this example starts local servers. However, you can\nconnect to any existing servers on your network.\nSend files to the temporary directory if they are not in shared memory.\nCreate the first operator chain.\nCreate the second operator chain.\nCreate the local merge operator.\nConnect the operator chains together and get the output.\nTotal running time of the script: (0 minutes 6.744 seconds)\nDownload Jupyter notebook: 01-distributed_workflows_on_remote.ipynb\nDownload Python source code: 01-distributed_workflows_on_remote.py\nDownload zipped: 01-distributed_workflows_on_remote.zip\nGallery generated by Sphinx-Gallery\nCreate a custom workflow on distributed processes\ndpf-core\nDownload Jupyter notebook: 01-distributed_workflows_on_remote.ipynb\nDownload Python source code: 01-distributed_workflows_on_remote.py\nDownload zipped: 01-distributed_workflows_on_remote.zip"
    },
    {
        "objectID": "examples/02-modal_analyses/index",
        "href": "examples/02-modal_analyses/index.html#modal-analysis-examples",
        "title": "Modal analysis examples",
        "section": "Modal analysis examples",
        "text": "These examples show how to use DPF to extract and manipulate\nresults from modal analyses.\nsphx_glr_examples_02-modal_analyses_00-compare_modes.py\nsphx_glr_examples_02-modal_analyses_01-plot_and_animate_modes.py\nModal analysis examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_2",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_2.html#compute_total_strain_2",
        "title": "compute_total_strain_2",
        "section": "compute_total_strain_2",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_2"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.nodal_to_elemental",
        "href": "api/ansys.dpf.core.operators.averaging.nodal_to_elemental.html#nodal_to_elemental",
        "title": "nodal_to_elemental",
        "section": "nodal_to_elemental",
        "text": "Autogenerated DPF operator classes.\nnodal_to_elemental"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_axial_total_strain",
        "href": "api/ansys.dpf.core.operators.result.beam_axial_total_strain.html#beam_axial_total_strain",
        "title": "beam_axial_total_strain",
        "section": "beam_axial_total_strain",
        "text": "Autogenerated DPF operator classes.\nbeam_axial_total_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.modal_superposition",
        "href": "api/ansys.dpf.core.operators.math.modal_superposition.html#modal_superposition",
        "title": "modal_superposition",
        "section": "modal_superposition",
        "text": "Autogenerated DPF operator classes.\nmodal_superposition"
    },
    {
        "objectID": "examples/09-averaging/sg_execution_times",
        "href": "examples/09-averaging/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:19.644 total execution time for 2 files from examples09-averaging:\nExample\nTime\nMem (MB)\nsphx_glr_examples_09-averaging_01-average_across_bodies.py (01-average_across_bodies.py)\n00:17.987\n0.0\nsphx_glr_examples_09-averaging_00-compute_and_average.py (00-compute_and_average.py)\n00:01.658\n0.0\nComputation times\n01-average_across_bodies.py\n00-compute_and_average.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.kinetic_energy",
        "href": "api/ansys.dpf.core.operators.result.kinetic_energy.html#kinetic_energy",
        "title": "kinetic_energy",
        "section": "kinetic_energy",
        "text": "Autogenerated DPF operator classes.\nkinetic_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_XZ",
        "href": "api/ansys.dpf.core.operators.result.stress_XZ.html#stress_xz",
        "title": "stress_XZ",
        "section": "stress_XZ",
        "text": "Autogenerated DPF operator classes.\nstress_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_over_time_by_entity",
        "href": "api/ansys.dpf.core.operators.min_max.min_over_time_by_entity.html#min_over_time_by_entity",
        "title": "min_over_time_by_entity",
        "section": "min_over_time_by_entity",
        "text": "Autogenerated DPF operator classes.\nmin_over_time_by_entity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.time_of_max_by_entity",
        "href": "api/ansys.dpf.core.operators.min_max.time_of_max_by_entity.html#time_of_max_by_entity",
        "title": "time_of_max_by_entity",
        "section": "time_of_max_by_entity",
        "text": "Autogenerated DPF operator classes.\ntime_of_max_by_entity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.workflow_energy_per_component",
        "href": "api/ansys.dpf.core.operators.result.workflow_energy_per_component.html#workflow_energy_per_component",
        "title": "workflow_energy_per_component",
        "section": "workflow_energy_per_component",
        "text": "Autogenerated DPF operator classes.\nworkflow_energy_per_component"
    },
    {
        "objectID": "examples/01-transient_analyses/index",
        "href": "examples/01-transient_analyses/index.html#transient-analysis-examples",
        "title": "Transient analysis examples",
        "section": "Transient analysis examples",
        "text": "These examples show how to use DPF to extract and plot displacements,\nstresses, and strains for a transient result.\nsphx_glr_examples_01-transient_analyses_00-basic_transient.py\nsphx_glr_examples_01-transient_analyses_01-transient_easy_time_scoping.py\nTransient analysis examples"
    },
    {
        "objectID": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons",
        "href": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons.html#create-and-display-a-mesh-with-polygon-and-polyhedron-elements",
        "title": "Create and display a mesh with polygon and polyhedron elements",
        "section": "Create and display a mesh with polygon and polyhedron elements",
        "text": "This example shows how to manually create a\nMeshedRegion\nobject with polygons and polyhedrons.\nBecause the cell_faces connectivity and the faces_nodes connectivity give all the\ninformation concerning the mesh we decide to avoid the process of adding element\nby defining directly the PropertyField.\nIn order to plot the mesh, we add at the end of this example the cell_node connectivity\nCreate and display a mesh with polygon and polyhedron elements\nMeshedRegion"
    },
    {
        "objectID": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons",
        "href": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons.html#define-manually-the-node-coordinates-of-the-polyhedrons-and-polygons",
        "title": "Create and display a mesh with polygon and polyhedron elements > Define manually the node coordinates of the polyhedrons and polygons",
        "section": "Define manually the node coordinates of the polyhedrons and polygons",
        "text": "Note on these two sets of nodes, there are two nodes at [0,0,0]\nThis anomaly has been taking into account for this example\nWe then use these coordinates to build meshed region\nOne meshed region will define shell elements and their connectivity\n(nodes -> lines -> surfaces),\nwhile the second will define solid elements and their own connectivity\n(nodes -> surfaces -> volumes).\nCreate a bare mesh with pre-reserved memory\nAdd the nodes to the meshed regions\nDefine manually the node coordinates of the polyhedrons and polygons"
    },
    {
        "objectID": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons",
        "href": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons.html#create-the-connectivity-tables",
        "title": "Create and display a mesh with polygon and polyhedron elements > Create the connectivity tables",
        "section": "Create the connectivity tables",
        "text": "face-to-node connectivity\ncell-to-face connectivity\nNow also have to define a PropertyField relative the element_face reverse.\nIt is necessary to define the orientation of the faces relative to the cells\nthat they surround.\nA given face has its nodal connectivity defined in a certain order,\nwhich means that the two cells that it bounds are\neither at the positive or negative sides of the face. We indicate this with\nthe elements_faces_reversed PropertyField,\n# whose values can be either 0 or 1.\nBy convention, 0 means that the face->node connectivity implies that the given\ncell is at side 0 of the face, and 1 the opposite\nelement_face reverse connectivity\nCreate the connectivity tables"
    },
    {
        "objectID": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons",
        "href": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons.html#connectivity-set-in-property-fields",
        "title": "Create and display a mesh with polygon and polyhedron elements > Connectivity set in property fields",
        "section": "Connectivity set in property fields",
        "text": "We now set all of these information into a PropertyField regarding the meshed region\nface_node connectivity\nelement_face connectivity\nConnectivity set in property fields"
    },
    {
        "objectID": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons",
        "href": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons.html#faceelement-types-set-in-property-fields",
        "title": "Create and display a mesh with polygon and polyhedron elements > Face/Element types set in property fields",
        "section": "Face/Element types set in property fields",
        "text": "Set the element/face type for the meshed region\nFor the ShellOnly the faces are lines and the elements are Quad\nFor the SolidOnly the faces are Polygon, Quad and Tri and the elements are Polyhedrons\nface type\nelement type\nFace/Element types set in property fields"
    },
    {
        "objectID": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons",
        "href": "examples/10-mesh_operations/00-create_polygons_and_polyhedrons.html#plot-the-meshes",
        "title": "Create and display a mesh with polygon and polyhedron elements > Plot the meshes",
        "section": "Plot the meshes",
        "text": "In order to plot the meshes, we have to set a cell_node connectivity PropertyField\ncell_node connectivity\nSet the cell_node connectivity in PropertyField\nPlot\nTotal running time of the script: (0 minutes 1.314 seconds)\nDownload Jupyter notebook: 00-create_polygons_and_polyhedrons.ipynb\nDownload Python source code: 00-create_polygons_and_polyhedrons.py\nDownload zipped: 00-create_polygons_and_polyhedrons.zip\nGallery generated by Sphinx-Gallery\nPlot the meshes\nDownload Jupyter notebook: 00-create_polygons_and_polyhedrons.ipynb\nDownload Python source code: 00-create_polygons_and_polyhedrons.py\nDownload zipped: 00-create_polygons_and_polyhedrons.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.compression.apply_zfp",
        "href": "api/ansys.dpf.core.operators.compression.apply_zfp.html#apply_zfp",
        "title": "apply_zfp",
        "section": "apply_zfp",
        "text": "Autogenerated DPF operator classes.\napply_zfp"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_velocity",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_velocity.html#cyclic_expanded_velocity",
        "title": "cyclic_expanded_velocity",
        "section": "cyclic_expanded_velocity",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_velocity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_X",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_X.html#compute_total_strain_x",
        "title": "compute_total_strain_X",
        "section": "compute_total_strain_X",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.field_to_fc",
        "href": "api/ansys.dpf.core.operators.utility.field_to_fc.html#field_to_fc",
        "title": "field_to_fc",
        "section": "field_to_fc",
        "text": "Autogenerated DPF operator classes.\nfield_to_fc"
    },
    {
        "objectID": "api/modules",
        "href": "api/modules.html#ansys",
        "title": "ansys",
        "section": "ansys",
        "text": "ansys"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_X",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_X.html#thermal_strain_x",
        "title": "thermal_strain_X",
        "section": "thermal_strain_X",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.points_from_coordinates",
        "href": "api/ansys.dpf.core.operators.mesh.points_from_coordinates.html#points_from_coordinates",
        "title": "points_from_coordinates",
        "section": "points_from_coordinates",
        "text": "Autogenerated DPF operator classes.\npoints_from_coordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_Y",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_Y.html#compute_stress_y",
        "title": "compute_stress_Y",
        "section": "compute_stress_Y",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.kronecker_prod",
        "href": "api/ansys.dpf.core.operators.math.kronecker_prod.html#kronecker_prod",
        "title": "kronecker_prod",
        "section": "kronecker_prod",
        "text": "Autogenerated DPF operator classes.\nkronecker_prod"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.heat_flux_Y",
        "href": "api/ansys.dpf.core.operators.result.heat_flux_Y.html#heat_flux_y",
        "title": "heat_flux_Y",
        "section": "heat_flux_Y",
        "text": "Autogenerated DPF operator classes.\nheat_flux_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.outer_product",
        "href": "api/ansys.dpf.core.operators.math.outer_product.html#outer_product",
        "title": "outer_product",
        "section": "outer_product",
        "text": "Autogenerated DPF operator classes.\nouter_product"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.displacement_Z",
        "href": "api/ansys.dpf.core.operators.result.displacement_Z.html#displacement_z",
        "title": "displacement_Z",
        "section": "displacement_Z",
        "text": "Autogenerated DPF operator classes.\ndisplacement_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.modulus",
        "href": "api/ansys.dpf.core.operators.math.modulus.html#modulus",
        "title": "modulus",
        "section": "modulus",
        "text": "Autogenerated DPF operator classes.\nmodulus"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure",
        "href": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure.html#gasket_inelastic_closure",
        "title": "gasket_inelastic_closure",
        "section": "gasket_inelastic_closure",
        "text": "Autogenerated DPF operator classes.\ngasket_inelastic_closure"
    },
    {
        "objectID": "examples/08-python-operators/01-package_python_operators",
        "href": "examples/08-python-operators/01-package_python_operators.html#create-a-plug-in-package-with-multiple-operators",
        "title": "Create a plug-in package with multiple operators",
        "section": "Create a plug-in package with multiple operators",
        "text": "This example shows how to create a plug-in package with multiple operators.\nThe benefits of writing a package rather than simple scripts are:\nComponentization: You can split the code into several Python modules or files.\nDistribution: You can use standard Python tools to upload and download packages.\nDocumentation: You can add README files, documentation, tests, and examples to the package.\nFor this example, the plug-in package contains two different operators:\nOne that returns all scoping IDs having data higher than the average\nOne that returns all scoping IDs having data lower than the average\nThis example requires DPF 4.0 (Ansys 2022R2) or above.\nFor more information, see ref_compatibility.\nCreate a plug-in package with multiple operators"
    },
    {
        "objectID": "examples/08-python-operators/01-package_python_operators",
        "href": "examples/08-python-operators/01-package_python_operators.html#create-the-plug-in-package",
        "title": "Create a plug-in package with multiple operators > Create the plug-in package",
        "section": "Create the plug-in package",
        "text": "Each operator implementation derives from the\nansys.dpf.core.custom_operator.CustomOperatorBase class\nand a call to the ansys.dpf.core.custom_operator.record_operator()\nmethod, which records the operators of the plug-in package.\nDownload the average_filter_plugin plug-in package that has already been\ncreated for you.\nCreate the plug-in package\nansys.dpf.core.custom_operator.CustomOperatorBase\nansys.dpf.core.custom_operator.record_operator()\naverage_filter_plugin"
    },
    {
        "objectID": "examples/08-python-operators/01-package_python_operators",
        "href": "examples/08-python-operators/01-package_python_operators.html#load-the-plug-in-package",
        "title": "Create a plug-in package with multiple operators > Load the plug-in package",
        "section": "Load the plug-in package",
        "text": "You use the function ansys.dpf.core.core.load_library() to load the\nplug-in package.\nThe first argument is the path to the directory where the plug-in package\nis located.\nThe second argument is py_<package>, where <package> is the name\nidentifying the plug-in package.\nThe third argument is the name of the function exposed in the __init__ file\nfor the plug-in package that is used to record operators.\nInstantiate the operator.\nLoad the plug-in package\nansys.dpf.core.core.load_library()\npy_<package>\n<package>\n__init__"
    },
    {
        "objectID": "examples/08-python-operators/01-package_python_operators",
        "href": "examples/08-python-operators/01-package_python_operators.html#connect-a-workflow",
        "title": "Create a plug-in package with multiple operators > Connect a workflow",
        "section": "Connect a workflow",
        "text": "Connect a workflow that computes the norm of the displacement\nto the ids_with_data_lower_than_average operator.\nMethods of the ids_with_data_lower_than_average class are dynamically\nadded because specifications for the operator are defined in the plug-in\npackage.\nConnect a workflow\nids_with_data_lower_than_average\nids_with_data_lower_than_average"
    },
    {
        "objectID": "examples/08-python-operators/01-package_python_operators",
        "href": "examples/08-python-operators/01-package_python_operators.html#use-the-operator",
        "title": "Create a plug-in package with multiple operators > Use the operator",
        "section": "Use the operator",
        "text": "Total running time of the script: (0 minutes 4.939 seconds)\nDownload Jupyter notebook: 01-package_python_operators.ipynb\nDownload Python source code: 01-package_python_operators.py\nDownload zipped: 01-package_python_operators.zip\nGallery generated by Sphinx-Gallery\nUse the operator\nDownload Jupyter notebook: 01-package_python_operators.ipynb\nDownload Python source code: 01-package_python_operators.py\nDownload zipped: 01-package_python_operators.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_to_graphics_edges",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_to_graphics_edges.html#mesh_to_graphics_edges",
        "title": "mesh_to_graphics_edges",
        "section": "mesh_to_graphics_edges",
        "text": "Autogenerated DPF operator classes.\nmesh_to_graphics_edges"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_hanning_fc",
        "href": "api/ansys.dpf.core.operators.math.window_hanning_fc.html#window_hanning_fc",
        "title": "window_hanning_fc",
        "section": "window_hanning_fc",
        "text": "Autogenerated DPF operator classes.\nwindow_hanning_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.iso_surfaces",
        "href": "api/ansys.dpf.core.operators.mesh.iso_surfaces.html#iso_surfaces",
        "title": "iso_surfaces",
        "section": "iso_surfaces",
        "text": "Autogenerated DPF operator classes.\niso_surfaces"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_to_elemental_nodal_fc",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_to_elemental_nodal_fc.html#elemental_to_elemental_nodal_fc",
        "title": "elemental_to_elemental_nodal_fc",
        "section": "elemental_to_elemental_nodal_fc",
        "text": "Autogenerated DPF operator classes.\nelemental_to_elemental_nodal_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress",
        "href": "api/ansys.dpf.core.operators.result.stress.html#stress",
        "title": "stress",
        "section": "stress",
        "text": "Autogenerated DPF operator classes.\nstress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.time_freq_interpolation",
        "href": "api/ansys.dpf.core.operators.math.time_freq_interpolation.html#time_freq_interpolation",
        "title": "time_freq_interpolation",
        "section": "time_freq_interpolation",
        "text": "Autogenerated DPF operator classes.\ntime_freq_interpolation"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.identical_property_fields",
        "href": "api/ansys.dpf.core.operators.logic.identical_property_fields.html#identical_property_fields",
        "title": "identical_property_fields",
        "section": "identical_property_fields",
        "text": "Autogenerated DPF operator classes.\nidentical_property_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_kinetic_energy",
        "href": "api/ansys.dpf.core.operators.result.cyclic_kinetic_energy.html#cyclic_kinetic_energy",
        "title": "cyclic_kinetic_energy",
        "section": "cyclic_kinetic_energy",
        "text": "Autogenerated DPF operator classes.\ncyclic_kinetic_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_Y",
        "href": "api/ansys.dpf.core.operators.result.stress_Y.html#stress_y",
        "title": "stress_Y",
        "section": "stress_Y",
        "text": "Autogenerated DPF operator classes.\nstress_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.mesh_scoping_factory",
        "href": "api/ansys.dpf.core.mesh_scoping_factory.html#mesh_scoping_factory",
        "title": "mesh_scoping_factory",
        "section": "mesh_scoping_factory",
        "text": "Contains functions to simplify creating mesh scopings.\nmesh_scoping_factory"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.time_of_min_by_entity",
        "href": "api/ansys.dpf.core.operators.min_max.time_of_min_by_entity.html#time_of_min_by_entity",
        "title": "time_of_min_by_entity",
        "section": "time_of_min_by_entity",
        "text": "Autogenerated DPF operator classes.\ntime_of_min_by_entity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mass_fraction",
        "href": "api/ansys.dpf.core.operators.result.mass_fraction.html#mass_fraction",
        "title": "mass_fraction",
        "section": "mass_fraction",
        "text": "Autogenerated DPF operator classes.\nmass_fraction"
    },
    {
        "objectID": "examples/03-harmonic_analyses/00-multi_harmonic",
        "href": "examples/03-harmonic_analyses/00-multi_harmonic.html#multi-harmonic-response-example",
        "title": "Multi-harmonic response example",
        "section": "Multi-harmonic response example",
        "text": "This example shows how to compute a multi-harmonic response\nusing fft transformations.\nBegin by downloading the example harmonic result. This result is\nnot included in the core module by default to speed up the install.\nDownload should only take a few seconds.\nNext, create the model and display the state of the result.\nThis harmonic result file contains several RPMs, and\neach RPM has several frequencies.\nRead the analysis domain support\nMulti-harmonic response example\nfft"
    },
    {
        "objectID": "examples/03-harmonic_analyses/00-multi_harmonic",
        "href": "examples/03-harmonic_analyses/00-multi_harmonic.html#compute-multi-harmonic-response",
        "title": "Multi-harmonic response example > Compute multi-harmonic response",
        "section": "Compute multi-harmonic response",
        "text": "This example computes the Rz multi-harmonic responses based on\nselected nodes and a set of EOs (engine orders).\nPlot the maximum displacements over time for Node ID 2 and 18\nTotal running time of the script: (0 minutes 8.193 seconds)\nDownload Jupyter notebook: 00-multi_harmonic.ipynb\nDownload Python source code: 00-multi_harmonic.py\nDownload zipped: 00-multi_harmonic.zip\nGallery generated by Sphinx-Gallery\nCompute multi-harmonic response\nDownload Jupyter notebook: 00-multi_harmonic.ipynb\nDownload Python source code: 00-multi_harmonic.py\nDownload zipped: 00-multi_harmonic.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.nodal_force",
        "href": "api/ansys.dpf.core.operators.result.nodal_force.html#nodal_force",
        "title": "nodal_force",
        "section": "nodal_force",
        "text": "Autogenerated DPF operator classes.\nnodal_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.component_wise_divide",
        "href": "api/ansys.dpf.core.operators.math.component_wise_divide.html#component_wise_divide",
        "title": "component_wise_divide",
        "section": "component_wise_divide",
        "text": "Autogenerated DPF operator classes.\ncomponent_wise_divide"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mapdl_material_properties",
        "href": "api/ansys.dpf.core.operators.result.mapdl_material_properties.html#mapdl_material_properties",
        "title": "mapdl_material_properties",
        "section": "mapdl_material_properties",
        "text": "Autogenerated DPF operator classes.\nmapdl_material_properties"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_principal_2",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_principal_2.html#plastic_strain_principal_2",
        "title": "plastic_strain_principal_2",
        "section": "plastic_strain_principal_2",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_principal_2"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.nodal_from_mesh",
        "href": "api/ansys.dpf.core.operators.scoping.nodal_from_mesh.html#nodal_from_mesh",
        "title": "nodal_from_mesh",
        "section": "nodal_from_mesh",
        "text": "Autogenerated DPF operator classes.\nnodal_from_mesh"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_time_step",
        "href": "api/ansys.dpf.core.operators.result.global_time_step.html#global_time_step",
        "title": "global_time_step",
        "section": "global_time_step",
        "text": "Autogenerated DPF operator classes.\nglobal_time_step"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.add_rigid_body_motion_fc",
        "href": "api/ansys.dpf.core.operators.result.add_rigid_body_motion_fc.html#add_rigid_body_motion_fc",
        "title": "add_rigid_body_motion_fc",
        "section": "add_rigid_body_motion_fc",
        "text": "Autogenerated DPF operator classes.\nadd_rigid_body_motion_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sqrt",
        "href": "api/ansys.dpf.core.operators.math.sqrt.html#sqrt",
        "title": "sqrt",
        "section": "sqrt",
        "text": "Autogenerated DPF operator classes.\nsqrt"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_rotation_by_euler_nodes",
        "href": "api/ansys.dpf.core.operators.result.stress_rotation_by_euler_nodes.html#stress_rotation_by_euler_nodes",
        "title": "stress_rotation_by_euler_nodes",
        "section": "stress_rotation_by_euler_nodes",
        "text": "Autogenerated DPF operator classes.\nstress_rotation_by_euler_nodes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.datasources_provider",
        "href": "api/ansys.dpf.core.operators.metadata.datasources_provider.html#datasources_provider",
        "title": "datasources_provider",
        "section": "datasources_provider",
        "text": "Autogenerated DPF operator classes.\ndatasources_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.field",
        "href": "api/ansys.dpf.core.operators.utility.field.html#field",
        "title": "field",
        "section": "field",
        "text": "Autogenerated DPF operator classes.\nfield"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_time_freq_supports",
        "href": "api/ansys.dpf.core.operators.utility.merge_time_freq_supports.html#merge_time_freq_supports",
        "title": "merge_time_freq_supports",
        "section": "merge_time_freq_supports",
        "text": "Autogenerated DPF operator classes.\nmerge_time_freq_supports"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain.html#compute_total_strain",
        "title": "compute_total_strain",
        "section": "compute_total_strain",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timefreq_signed_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.timefreq_signed_high_pass.html#timefreq_signed_high_pass",
        "title": "timefreq_signed_high_pass",
        "section": "timefreq_signed_high_pass",
        "text": "Autogenerated DPF operator classes.\ntimefreq_signed_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max_inc",
        "href": "api/ansys.dpf.core.operators.min_max.min_max_inc.html#min_max_inc",
        "title": "min_max_inc",
        "section": "min_max_inc",
        "text": "Autogenerated DPF operator classes.\nmin_max_inc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.integrate_over_time_freq",
        "href": "api/ansys.dpf.core.operators.metadata.integrate_over_time_freq.html#integrate_over_time_freq",
        "title": "integrate_over_time_freq",
        "section": "integrate_over_time_freq",
        "text": "Autogenerated DPF operator classes.\nintegrate_over_time_freq"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.to_nodal",
        "href": "api/ansys.dpf.core.operators.averaging.to_nodal.html#to_nodal",
        "title": "to_nodal",
        "section": "to_nodal",
        "text": "Autogenerated DPF operator classes.\nto_nodal"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_supports",
        "href": "api/ansys.dpf.core.operators.utility.merge_supports.html#merge_supports",
        "title": "merge_supports",
        "section": "merge_supports",
        "text": "Autogenerated DPF operator classes.\nmerge_supports"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.rotate_in_cylindrical_cs",
        "href": "api/ansys.dpf.core.operators.geo.rotate_in_cylindrical_cs.html#rotate_in_cylindrical_cs",
        "title": "rotate_in_cylindrical_cs",
        "section": "rotate_in_cylindrical_cs",
        "text": "Autogenerated DPF operator classes.\nrotate_in_cylindrical_cs"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.fields_container_matrices_label",
        "href": "api/ansys.dpf.core.operators.utility.fields_container_matrices_label.html#fields_container_matrices_label",
        "title": "fields_container_matrices_label",
        "section": "fields_container_matrices_label",
        "text": "Autogenerated DPF operator classes.\nfields_container_matrices_label"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.scoping_on_coordinates",
        "href": "api/ansys.dpf.core.operators.mapping.scoping_on_coordinates.html#scoping_on_coordinates",
        "title": "scoping_on_coordinates",
        "section": "scoping_on_coordinates",
        "text": "Autogenerated DPF operator classes.\nscoping_on_coordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.max_over_time_by_entity",
        "href": "api/ansys.dpf.core.operators.min_max.max_over_time_by_entity.html#max_over_time_by_entity",
        "title": "max_over_time_by_entity",
        "section": "max_over_time_by_entity",
        "text": "Autogenerated DPF operator classes.\nmax_over_time_by_entity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sweeping_phase",
        "href": "api/ansys.dpf.core.operators.math.sweeping_phase.html#sweeping_phase",
        "title": "sweeping_phase",
        "section": "sweeping_phase",
        "text": "Autogenerated DPF operator classes.\nsweeping_phase"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.boundary_condition_provider",
        "href": "api/ansys.dpf.core.operators.metadata.boundary_condition_provider.html#boundary_condition_provider",
        "title": "boundary_condition_provider",
        "section": "boundary_condition_provider",
        "text": "Autogenerated DPF operator classes.\nboundary_condition_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_relative_angular_acceleration",
        "href": "api/ansys.dpf.core.operators.result.joint_relative_angular_acceleration.html#joint_relative_angular_acceleration",
        "title": "joint_relative_angular_acceleration",
        "section": "joint_relative_angular_acceleration",
        "text": "Autogenerated DPF operator classes.\njoint_relative_angular_acceleration"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.ints_to_scoping",
        "href": "api/ansys.dpf.core.operators.utility.ints_to_scoping.html#ints_to_scoping",
        "title": "ints_to_scoping",
        "section": "ints_to_scoping",
        "text": "Autogenerated DPF operator classes.\nints_to_scoping"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.euler_load_buckling",
        "href": "api/ansys.dpf.core.operators.result.euler_load_buckling.html#euler_load_buckling",
        "title": "euler_load_buckling",
        "section": "euler_load_buckling",
        "text": "Autogenerated DPF operator classes.\neuler_load_buckling"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_temperature",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_temperature.html#cyclic_expanded_temperature",
        "title": "cyclic_expanded_temperature",
        "section": "cyclic_expanded_temperature",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_temperature"
    },
    {
        "objectID": "examples/10-mesh_operations/13-nodes_in_local_coordinate_system",
        "href": "examples/10-mesh_operations/13-nodes_in_local_coordinate_system.html#convert-nodal-coordinates-field-to-local-coordinate-system",
        "title": "Convert nodal coordinates field to local coordinate system",
        "section": "Convert nodal coordinates field to local coordinate system",
        "text": "Currently, there is no native operator to get nodal coordinates in an Local\nCoordinate System (LCS). The operator rotate\nrotates the input field in Global Coordinate System (GCS) as per the input rotation matrix.\nSo, if the LCS is at the same origin as the GCS, only one operation using the\nrotate operator give the desired output.\nHowever, if the aim is to obtain the LCS in a case where the LCS origin does not coincide with\nthe GCS, a transformation is required after the rotation to get the correct coordinates in LCS.\nThe script below demonstrates the methodology using PyDPF.\nCreate a model object to establish a connection with an example result file:\nGet the property coordinates_field from nodes:\nGet the rotation matrix of the LCS ID 12.\nThe first 9 values in the cs output is the rotation matrix.\nCreate a 3x3 rotation matrix field rot_mat_f:\nCreate a 3D vector field for the position vector of the LCS’s origin and\nrotate the origin as per the rotation matrix of the LCS.\nThe last 3 entries of cs output is the LCS’s origin in GCS.\nGet rotated nodal coordinates field:\nTransform rotated nodal coordinates field along rotated position vector\npos_vec_rot:\nGet the nodal coordinates field ncoord_lcs_f in LCS:\nCoordinates of NID 1 in GCS\nCoordinates of NID 1 in LCS\nTotal running time of the script: (0 minutes 7.827 seconds)\nDownload Jupyter notebook: 13-nodes_in_local_coordinate_system.ipynb\nDownload Python source code: 13-nodes_in_local_coordinate_system.py\nDownload zipped: 13-nodes_in_local_coordinate_system.zip\nGallery generated by Sphinx-Gallery\nConvert nodal coordinates field to local coordinate system\nrotate\nrotate\ncoordinates_field\nnodes\ncs\nrot_mat_f\ncs\npos_vec_rot\nncoord_lcs_f\nDownload Jupyter notebook: 13-nodes_in_local_coordinate_system.ipynb\nDownload Python source code: 13-nodes_in_local_coordinate_system.py\nDownload zipped: 13-nodes_in_local_coordinate_system.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.compression.apply_svd",
        "href": "api/ansys.dpf.core.operators.compression.apply_svd.html#apply_svd",
        "title": "apply_svd",
        "section": "apply_svd",
        "text": "Autogenerated DPF operator classes.\napply_svd"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.gauss_to_node_fc",
        "href": "api/ansys.dpf.core.operators.averaging.gauss_to_node_fc.html#gauss_to_node_fc",
        "title": "gauss_to_node_fc",
        "section": "gauss_to_node_fc",
        "text": "Autogenerated DPF operator classes.\ngauss_to_node_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.total_contact_force",
        "href": "api/ansys.dpf.core.operators.result.total_contact_force.html#total_contact_force",
        "title": "total_contact_force",
        "section": "total_contact_force",
        "text": "Autogenerated DPF operator classes.\ntotal_contact_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.prns_to_field",
        "href": "api/ansys.dpf.core.operators.result.prns_to_field.html#prns_to_field",
        "title": "prns_to_field",
        "section": "prns_to_field",
        "text": "Autogenerated DPF operator classes.\nprns_to_field"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/index",
        "href": "examples/11-cyclic-symmetry/index.html#cyclic-symmetry-examples",
        "title": "Cyclic symmetry examples",
        "section": "Cyclic symmetry examples",
        "text": "These examples show how to post-process cyclic symmetry models.\nsphx_glr_examples_11-cyclic-symmetry_01-modal_cyclic.py\nsphx_glr_examples_11-cyclic-symmetry_02-modal_cyclic_no_expansion.py\nsphx_glr_examples_11-cyclic-symmetry_03-cyclic_multi_stage.py\nCyclic symmetry examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.mesh_selection_manager_provider",
        "href": "api/ansys.dpf.core.operators.metadata.mesh_selection_manager_provider.html#mesh_selection_manager_provider",
        "title": "mesh_selection_manager_provider",
        "section": "mesh_selection_manager_provider",
        "text": "Autogenerated DPF operator classes.\nmesh_selection_manager_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_principal_2",
        "href": "api/ansys.dpf.core.operators.result.stress_principal_2.html#stress_principal_2",
        "title": "stress_principal_2",
        "section": "stress_principal_2",
        "text": "Autogenerated DPF operator classes.\nstress_principal_2"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_state_variable",
        "href": "api/ansys.dpf.core.operators.result.plastic_state_variable.html#plastic_state_variable",
        "title": "plastic_state_variable",
        "section": "plastic_state_variable",
        "text": "Autogenerated DPF operator classes.\nplastic_state_variable"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain.html#elastic_strain",
        "title": "elastic_strain",
        "section": "elastic_strain",
        "text": "Autogenerated DPF operator classes.\nelastic_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.reaction_force_X",
        "href": "api/ansys.dpf.core.operators.result.reaction_force_X.html#reaction_force_x",
        "title": "reaction_force_X",
        "section": "reaction_force_X",
        "text": "Autogenerated DPF operator classes.\nreaction_force_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_1",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_1.html#compute_stress_1",
        "title": "compute_stress_1",
        "section": "compute_stress_1",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_1"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.current_density",
        "href": "api/ansys.dpf.core.operators.result.current_density.html#current_density",
        "title": "current_density",
        "section": "current_density",
        "text": "Autogenerated DPF operator classes.\ncurrent_density"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "PyDPF-Core is a Python client API for accessing DPF postprocessing\ncapabilities. The ansys.dpf.core package makes highly efficient\ncomputation, customization, and remote postprocessing accessible in Python.\nThe goals of this section are to:\nDescribe the most-used DPF entities and how they can help you to access and modify solver data.\nProvide simple how-tos for tackling the most common use cases.\nUser guide\nansys.dpf.core"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#concepts",
        "title": "User guide > Concepts",
        "section": "Concepts",
        "text": "This section provides in-depth descriptions and explanations of DPF concepts, including terminology.\nConcepts"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#dpf-most-used-entities",
        "title": "User guide > DPF most-used entities",
        "section": "DPF most-used entities",
        "text": "DPF most-used entities"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#how-tos",
        "title": "User guide > How-tos",
        "section": "How-tos",
        "text": "How-tos"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#troubleshooting",
        "title": "User guide > Troubleshooting",
        "section": "Troubleshooting",
        "text": "Troubleshooting"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.filtering_max_over_time",
        "href": "api/ansys.dpf.core.operators.filter.filtering_max_over_time.html#filtering_max_over_time",
        "title": "filtering_max_over_time",
        "section": "filtering_max_over_time",
        "text": "Autogenerated DPF operator classes.\nfiltering_max_over_time"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_deformation_XY",
        "href": "api/ansys.dpf.core.operators.result.gasket_deformation_XY.html#gasket_deformation_xy",
        "title": "gasket_deformation_XY",
        "section": "gasket_deformation_XY",
        "text": "Autogenerated DPF operator classes.\ngasket_deformation_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_thermal_closure",
        "href": "api/ansys.dpf.core.operators.result.gasket_thermal_closure.html#gasket_thermal_closure",
        "title": "gasket_thermal_closure",
        "section": "gasket_thermal_closure",
        "text": "Autogenerated DPF operator classes.\ngasket_thermal_closure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping",
        "href": "api/ansys.dpf.core.operators.mapping.html#ansysdpfcoreoperatorsmapping-package",
        "title": "ansys.dpf.core.operators.mapping package",
        "section": "ansys.dpf.core.operators.mapping package",
        "text": "ansys.dpf.core.operators.mapping package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping",
        "href": "api/ansys.dpf.core.operators.mapping.html#submodules",
        "title": "ansys.dpf.core.operators.mapping package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping",
        "href": "api/ansys.dpf.core.operators.mapping.html#module-contents",
        "title": "ansys.dpf.core.operators.mapping package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "examples/08-python-operators/sg_execution_times",
        "href": "examples/08-python-operators/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:56.593 total execution time for 3 files from examples08-python-operators:\nExample\nTime\nMem (MB)\nsphx_glr_examples_08-python-operators_02-python_operators_with_dependencies.py (02-python_operators_with_dependencies.py)\n00:47.371\n0.0\nsphx_glr_examples_08-python-operators_01-package_python_operators.py (01-package_python_operators.py)\n00:04.939\n0.0\nsphx_glr_examples_08-python-operators_00-wrapping_numpy_capabilities.py (00-wrapping_numpy_capabilities.py)\n00:04.283\n0.0\nComputation times\n02-python_operators_with_dependencies.py\n01-package_python_operators.py\n00-wrapping_numpy_capabilities.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.raw_displacement",
        "href": "api/ansys.dpf.core.operators.result.raw_displacement.html#raw_displacement",
        "title": "raw_displacement",
        "section": "raw_displacement",
        "text": "Autogenerated DPF operator classes.\nraw_displacement"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.field_get_attribute",
        "href": "api/ansys.dpf.core.operators.utility.field_get_attribute.html#field_get_attribute",
        "title": "field_get_attribute",
        "section": "field_get_attribute",
        "text": "Autogenerated DPF operator classes.\nfield_get_attribute"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_fc",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_fc.html#elemental_nodal_to_nodal_fc",
        "title": "elemental_nodal_to_nodal_fc",
        "section": "elemental_nodal_to_nodal_fc",
        "text": "Autogenerated DPF operator classes.\nelemental_nodal_to_nodal_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cgns_result_provider",
        "href": "api/ansys.dpf.core.operators.result.cgns_result_provider.html#cgns_result_provider",
        "title": "cgns_result_provider",
        "section": "cgns_result_provider",
        "text": "Autogenerated DPF operator classes.\ncgns_result_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.split_on_property_type",
        "href": "api/ansys.dpf.core.operators.scoping.split_on_property_type.html#split_on_property_type",
        "title": "split_on_property_type",
        "section": "split_on_property_type",
        "text": "Autogenerated DPF operator classes.\nsplit_on_property_type"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_fields",
        "href": "api/ansys.dpf.core.operators.utility.merge_fields.html#merge_fields",
        "title": "merge_fields",
        "section": "merge_fields",
        "text": "Autogenerated DPF operator classes.\nmerge_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_YZ",
        "href": "api/ansys.dpf.core.operators.result.stress_YZ.html#stress_yz",
        "title": "stress_YZ",
        "section": "stress_YZ",
        "text": "Autogenerated DPF operator classes.\nstress_YZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_spring_damper_energy",
        "href": "api/ansys.dpf.core.operators.result.global_spring_damper_energy.html#global_spring_damper_energy",
        "title": "global_spring_damper_energy",
        "section": "global_spring_damper_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_spring_damper_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.python_generator",
        "href": "api/ansys.dpf.core.operators.utility.python_generator.html#python_generator",
        "title": "python_generator",
        "section": "python_generator",
        "text": "Autogenerated DPF operator classes.\npython_generator"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.poynting_vector_surface",
        "href": "api/ansys.dpf.core.operators.result.poynting_vector_surface.html#poynting_vector_surface",
        "title": "poynting_vector_surface",
        "section": "poynting_vector_surface",
        "text": "Autogenerated DPF operator classes.\npoynting_vector_surface"
    },
    {
        "objectID": "examples/15-cfx/00-cfx_res_files",
        "href": "examples/15-cfx/00-cfx_res_files.html#read-cfx-res-files",
        "title": "Read CFX .res files",
        "section": "Read CFX .res files",
        "text": "This example demonstrates how to read Ansys CFX .res files.\nThis example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nRead CFX .res files"
    },
    {
        "objectID": "examples/15-cfx/00-cfx_res_files",
        "href": "examples/15-cfx/00-cfx_res_files.html#exploring-an-ansys-cfx-res-file",
        "title": "Read CFX .res files > Exploring an Ansys CFX .res file",
        "section": "Exploring an Ansys CFX .res file",
        "text": "The first part of the example demonstrates how you can load an\nAnsys CFX .res file in a model.\nExploring an Ansys CFX .res file"
    },
    {
        "objectID": "examples/15-cfx/00-cfx_res_files",
        "href": "examples/15-cfx/00-cfx_res_files.html#exploring-the-mesh",
        "title": "Read CFX .res files > Exploring the mesh",
        "section": "Exploring the mesh",
        "text": "Explore the mesh through the MeshInfo. The MeshInfo provides metadata\ninformation about the mesh. For fluid models, it is useful to know the bodies and\nface zones, as well as the topological relationships between them. First get all\nthe available information in the MeshInfo.\nThe MeshInfo exposes several helpers, such as a dictionary of available bodies:\nOr the dictionary of available face zones:\nExploring the mesh\nMeshInfo\nMeshInfo\nMeshInfo\nMeshInfo"
    },
    {
        "objectID": "examples/15-cfx/00-cfx_res_files",
        "href": "examples/15-cfx/00-cfx_res_files.html#exploring-the-results",
        "title": "Read CFX .res files > Exploring the results",
        "section": "Exploring the results",
        "text": "Explore the available results through the ResultInfo.\nThe ResultInfo provides metadata information about the results stored in the files.\nFirst get all the available information in the ResultInfo.\nAs you can see above, the ResultInfo information is also listed when printing the Model.\nThe ResultInfo class exposes the list of AvailableResults.\nExploring the results\nResultInfo\nResultInfo\nResultInfo\nResultInfo\nModel\nResultInfo\nAvailableResults"
    },
    {
        "objectID": "examples/15-cfx/00-cfx_res_files",
        "href": "examples/15-cfx/00-cfx_res_files.html#extracting-data",
        "title": "Read CFX .res files > Extracting data",
        "section": "Extracting data",
        "text": "Extracting the mesh or results is then the same as for any other file type.\nTotal running time of the script: (0 minutes 1.075 seconds)\nDownload Jupyter notebook: 00-cfx_res_files.ipynb\nDownload Python source code: 00-cfx_res_files.py\nDownload zipped: 00-cfx_res_files.zip\nGallery generated by Sphinx-Gallery\nExtracting data\nDownload Jupyter notebook: 00-cfx_res_files.ipynb\nDownload Python source code: 00-cfx_res_files.py\nDownload zipped: 00-cfx_res_files.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.accumulate_level_over_label_fc",
        "href": "api/ansys.dpf.core.operators.math.accumulate_level_over_label_fc.html#accumulate_level_over_label_fc",
        "title": "accumulate_level_over_label_fc",
        "section": "accumulate_level_over_label_fc",
        "text": "Autogenerated DPF operator classes.\naccumulate_level_over_label_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.incremental",
        "href": "api/ansys.dpf.core.incremental.html#incremental",
        "title": "Incremental",
        "section": "Incremental",
        "text": "Incremental"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_to_tetra",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_to_tetra.html#mesh_to_tetra",
        "title": "mesh_to_tetra",
        "section": "mesh_to_tetra",
        "text": "Autogenerated DPF operator classes.\nmesh_to_tetra"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.cartesian_to_spherical_fc",
        "href": "api/ansys.dpf.core.operators.geo.cartesian_to_spherical_fc.html#cartesian_to_spherical_fc",
        "title": "cartesian_to_spherical_fc",
        "section": "cartesian_to_spherical_fc",
        "text": "Autogenerated DPF operator classes.\ncartesian_to_spherical_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.make_plane_levelset",
        "href": "api/ansys.dpf.core.operators.mesh.make_plane_levelset.html#make_plane_levelset",
        "title": "make_plane_levelset",
        "section": "make_plane_levelset",
        "text": "Autogenerated DPF operator classes.\nmake_plane_levelset"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_eroded_internal_energy",
        "href": "api/ansys.dpf.core.operators.result.global_eroded_internal_energy.html#global_eroded_internal_energy",
        "title": "global_eroded_internal_energy",
        "section": "global_eroded_internal_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_eroded_internal_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.accumulation_per_scoping",
        "href": "api/ansys.dpf.core.operators.math.accumulation_per_scoping.html#accumulation_per_scoping",
        "title": "accumulation_per_scoping",
        "section": "accumulation_per_scoping",
        "text": "Autogenerated DPF operator classes.\naccumulation_per_scoping"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.change_cs",
        "href": "api/ansys.dpf.core.operators.mesh.change_cs.html#change_cs",
        "title": "change_cs",
        "section": "change_cs",
        "text": "Autogenerated DPF operator classes.\nchange_cs"
    },
    {
        "objectID": "examples/07-distributed-post/index",
        "href": "examples/07-distributed-post/index.html#examples-for-postprocessing-on-distributed-processes",
        "title": "Examples for postprocessing on distributed processes",
        "section": "Examples for postprocessing on distributed processes",
        "text": "These examples show how to create workflows on different processes (possibly on\ndifferent machines) and connect them.\nsphx_glr_examples_07-distributed-post_00-distributed_total_disp.py\nsphx_glr_examples_07-distributed-post_01-distributed_workflows_on_remote.py\nsphx_glr_examples_07-distributed-post_02-distributed-msup_expansion.py\nsphx_glr_examples_07-distributed-post_03-distributed-msup_expansion_steps.py\nExamples for postprocessing on distributed processes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.property_field_provider_by_name",
        "href": "api/ansys.dpf.core.operators.metadata.property_field_provider_by_name.html#property_field_provider_by_name",
        "title": "property_field_provider_by_name",
        "section": "property_field_provider_by_name",
        "text": "Autogenerated DPF operator classes.\nproperty_field_provider_by_name"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max_fc",
        "href": "api/ansys.dpf.core.operators.min_max.min_max_fc.html#min_max_fc",
        "title": "min_max_fc",
        "section": "min_max_fc",
        "text": "Autogenerated DPF operator classes.\nmin_max_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_stress_XZ",
        "href": "api/ansys.dpf.core.operators.result.gasket_stress_XZ.html#gasket_stress_xz",
        "title": "gasket_stress_XZ",
        "section": "gasket_stress_XZ",
        "text": "Autogenerated DPF operator classes.\ngasket_stress_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_mean_fc",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_mean_fc.html#elemental_mean_fc",
        "title": "elemental_mean_fc",
        "section": "elemental_mean_fc",
        "text": "Autogenerated DPF operator classes.\nelemental_mean_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.vtk_export",
        "href": "api/ansys.dpf.core.operators.serialization.vtk_export.html#vtk_export",
        "title": "vtk_export",
        "section": "vtk_export",
        "text": "Autogenerated DPF operator classes.\nvtk_export"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_clip",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_clip.html#mesh_clip",
        "title": "mesh_clip",
        "section": "mesh_clip",
        "text": "Autogenerated DPF operator classes.\nmesh_clip"
    },
    {
        "objectID": "api/ansys.dpf.core.faces",
        "href": "api/ansys.dpf.core.faces.html#faces",
        "title": "Faces",
        "section": "Faces",
        "text": "Faces"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.elemental_from_mesh",
        "href": "api/ansys.dpf.core.operators.scoping.elemental_from_mesh.html#elemental_from_mesh",
        "title": "elemental_from_mesh",
        "section": "elemental_from_mesh",
        "text": "Autogenerated DPF operator classes.\nelemental_from_mesh"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#common",
        "title": "Common",
        "section": "Common",
        "text": "Contains strings for scoping and field locations.\ndata is one per element\none per node per element\none per node\none per time set\napplies everywhere\none per time step\none per face\none per zone\ndata available in elements and faces of the model\nCommon"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#ansys.dpf.core.common.locations",
        "title": "Common > Common > locations",
        "section": "Common > locations",
        "text": "class ansys.dpf.core.common.locations\n\nContains strings for scoping and field locations.\n\n\n\nnone = \"none\"\n\n\n\n\n\nelemental = \"Elemental\"\n\ndata is one per element\n\n\n\nelemental_nodal = \"ElementalNodal\"\n\none per node per element\n\n\n\nnodal = \"Nodal\"\n\none per node\n\n\n\ntime_freq = \"TimeFreq_sets\"\n\none per time set\n\n\n\noverall = \"overall\"\n\napplies everywhere\n\n\n\ntime_freq_step = \"TimeFreq_steps\"\n\none per time step\n\n\n\nfaces = \"Faces\"\n\none per face\n\n\n\nzone = \"zone\"\n\none per zone\n\n\n\nelemental_and_faces = \"ElementalAndFaces\"\n\ndata available in elements and faces of the model"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "none = \"none\"\n\n"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "elemental = \"Elemental\"\n\ndata is one per element"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "elemental_nodal = \"ElementalNodal\"\n\none per node per element"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "nodal = \"Nodal\"\n\none per node"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "time_freq = \"TimeFreq_sets\"\n\none per time set"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "overall = \"overall\"\n\napplies everywhere"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "time_freq_step = \"TimeFreq_steps\"\n\none per time step"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "faces = \"Faces\"\n\none per face"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "zone = \"zone\"\n\none per zone"
    },
    {
        "objectID": "api/ansys.dpf.core.common",
        "href": "api/ansys.dpf.core.common.html#[]",
        "title": "Common",
        "section": "Common",
        "text": "elemental_and_faces = \"ElementalAndFaces\"\n\ndata available in elements and faces of the model"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.unitary_field",
        "href": "api/ansys.dpf.core.operators.utility.unitary_field.html#unitary_field",
        "title": "unitary_field",
        "section": "unitary_field",
        "text": "Autogenerated DPF operator classes.\nunitary_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.cyclic_support_provider",
        "href": "api/ansys.dpf.core.operators.metadata.cyclic_support_provider.html#cyclic_support_provider",
        "title": "cyclic_support_provider",
        "section": "cyclic_support_provider",
        "text": "Autogenerated DPF operator classes.\ncyclic_support_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_stress",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_stress.html#cyclic_expanded_stress",
        "title": "cyclic_expanded_stress",
        "section": "cyclic_expanded_stress",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_stress"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#compute-and-plot-3d-streamlines",
        "title": "Compute and plot 3D streamlines",
        "section": "Compute and plot 3D streamlines",
        "text": "This example shows you how to compute and\nplot streamlines of fluid simulation results,\nfor 3D models.\nThis example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nCompute and plot 3D streamlines"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#compute-and-plot-streamlines-from-single-source",
        "title": "Compute and plot 3D streamlines > Compute and plot streamlines from single source",
        "section": "Compute and plot streamlines from single source",
        "text": "Compute and plot streamlines from single source"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#import-modules-create-the-data-sources-and-the-model",
        "title": "Compute and plot 3D streamlines > Import modules, create the data sources and the model",
        "section": "Import modules, create the data sources and the model",
        "text": "Import modules:\nCreate data sources for fluids simulation result:\nCreate model from fluid simulation result data sources:\nImport modules, create the data sources and the model"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#get-meshed-region-and-velocity-data",
        "title": "Compute and plot 3D streamlines > Get meshed region and velocity data",
        "section": "Get meshed region and velocity data",
        "text": "Meshed region is used as geometric base to compute the streamlines.\nVelocity data is used to compute the streamlines. The velocity data must be nodal.\nGet the meshed region:\nGet the velocity result at nodes:\nGet meshed region and velocity data"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#compute-and-plot-the-streamlines-adjusting-the-request",
        "title": "Compute and plot 3D streamlines > Compute and plot the streamlines adjusting the request",
        "section": "Compute and plot the streamlines adjusting the request",
        "text": "The following steps show you how to create streamlines using DpfPlotter, with several sets\nof parameters. It demonstrates the issues that can happen and the adjustments that you can make.\nFirst, Streamlines and StreamlinesSource objects are created. The\nStreamlinesSource is available using the ‘return_source’ argument.\nThen, you can correctly set the source coordinates using the\n“source_center” argument that moves the source center, and\n“permissive” option that allows you to display the source even, if the computed\nstreamline size is zero. Default value for “permissive” argument is True. If permissive\nis set to False, the “add_streamlines” method throws.\nAfter the adjustment, the correct values for the “source_center” argument are set.\nYou can remove the “permissive” option.\nYou can display velocity data with a small opacity value to avoid hiding the streamlines.\nMore settings are added to adapt the streamlines creation to the geometry and\nthe data of the model:\n- radius: streamlines radius\n- n_points: source number of points\n- source_radius\n- max_time: maximum integration time of the streamline. It controls\nthe streamline length.\nCompute and plot the streamlines adjusting the request"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#compute-and-plot-streamlines-from-several-sources",
        "title": "Compute and plot 3D streamlines > Compute and plot streamlines from several sources",
        "section": "Compute and plot streamlines from several sources",
        "text": "Compute and plot streamlines from several sources"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#get-data-to-plot",
        "title": "Compute and plot 3D streamlines > Get data to plot",
        "section": "Get data to plot",
        "text": "Create data sources for fluid simulation result:\nCreate model from fluid simulation result data sources:\nGet meshed region and velocity data\nGet data to plot"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#compute-streamlines-from-different-sources",
        "title": "Compute and plot 3D streamlines > Compute streamlines from different sources",
        "section": "Compute streamlines from different sources",
        "text": "Compute streamlines from different sources:\nCompute streamlines from different sources"
    },
    {
        "objectID": "examples/13-streamlines/00_plot_3d_streamlines",
        "href": "examples/13-streamlines/00_plot_3d_streamlines.html#plot-streamlines-from-different-sources",
        "title": "Compute and plot 3D streamlines > Plot streamlines from different sources",
        "section": "Plot streamlines from different sources",
        "text": "Total running time of the script: (0 minutes 15.604 seconds)\nDownload Jupyter notebook: 00_plot_3d_streamlines.ipynb\nDownload Python source code: 00_plot_3d_streamlines.py\nDownload zipped: 00_plot_3d_streamlines.zip\nGallery generated by Sphinx-Gallery\nPlot streamlines from different sources\nDownload Jupyter notebook: 00_plot_3d_streamlines.ipynb\nDownload Python source code: 00_plot_3d_streamlines.py\nDownload zipped: 00_plot_3d_streamlines.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.scale_by_field_fc",
        "href": "api/ansys.dpf.core.operators.math.scale_by_field_fc.html#scale_by_field_fc",
        "title": "scale_by_field_fc",
        "section": "scale_by_field_fc",
        "text": "Autogenerated DPF operator classes.\nscale_by_field_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.fields_factory",
        "href": "api/ansys.dpf.core.fields_factory.html#fields_factory",
        "title": "fields_factory",
        "section": "fields_factory",
        "text": "Contains functions to simplify creating fields.\nfields_factory"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.displacement_Y",
        "href": "api/ansys.dpf.core.operators.result.displacement_Y.html#displacement_y",
        "title": "displacement_Y",
        "section": "displacement_Y",
        "text": "Autogenerated DPF operator classes.\ndisplacement_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.electric_flux_density",
        "href": "api/ansys.dpf.core.operators.result.electric_flux_density.html#electric_flux_density",
        "title": "electric_flux_density",
        "section": "electric_flux_density",
        "text": "Autogenerated DPF operator classes.\nelectric_flux_density"
    },
    {
        "objectID": "examples/03-harmonic_analyses/sg_execution_times",
        "href": "examples/03-harmonic_analyses/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:27.389 total execution time for 2 files from examples03-harmonic_analyses:\nExample\nTime\nMem (MB)\nsphx_glr_examples_03-harmonic_analyses_01-modal_superposition.py (01-modal_superposition.py)\n00:19.196\n0.0\nsphx_glr_examples_03-harmonic_analyses_00-multi_harmonic.py (00-multi_harmonic.py)\n00:08.193\n0.0\nComputation times\n01-modal_superposition.py\n00-multi_harmonic.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.volume_fraction",
        "href": "api/ansys.dpf.core.operators.result.volume_fraction.html#volume_fraction",
        "title": "volume_fraction",
        "section": "volume_fraction",
        "text": "Autogenerated DPF operator classes.\nvolume_fraction"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure_X",
        "href": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure_X.html#gasket_inelastic_closure_x",
        "title": "gasket_inelastic_closure_X",
        "section": "gasket_inelastic_closure_X",
        "text": "Autogenerated DPF operator classes.\ngasket_inelastic_closure_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thickness",
        "href": "api/ansys.dpf.core.operators.result.thickness.html#thickness",
        "title": "thickness",
        "section": "thickness",
        "text": "Autogenerated DPF operator classes.\nthickness"
    },
    {
        "objectID": "api/ansys.dpf.core.workflow",
        "href": "api/ansys.dpf.core.workflow.html#workflow",
        "title": "Workflow",
        "section": "Workflow",
        "text": "Workflow"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cos",
        "href": "api/ansys.dpf.core.operators.math.cos.html#cos",
        "title": "cos",
        "section": "cos",
        "text": "Autogenerated DPF operator classes.\ncos"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.real_part",
        "href": "api/ansys.dpf.core.operators.math.real_part.html#real_part",
        "title": "real_part",
        "section": "real_part",
        "text": "Autogenerated DPF operator classes.\nreal_part"
    },
    {
        "objectID": "api/ansys.dpf.core.core",
        "href": "api/ansys.dpf.core.core.html#core",
        "title": "Core",
        "section": "Core",
        "text": "Core"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.to_elemental_fc",
        "href": "api/ansys.dpf.core.operators.averaging.to_elemental_fc.html#to_elemental_fc",
        "title": "to_elemental_fc",
        "section": "to_elemental_fc",
        "text": "Autogenerated DPF operator classes.\nto_elemental_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.dot_tensor",
        "href": "api/ansys.dpf.core.operators.math.dot_tensor.html#dot_tensor",
        "title": "dot_tensor",
        "section": "dot_tensor",
        "text": "Autogenerated DPF operator classes.\ndot_tensor"
    },
    {
        "objectID": "examples/00-basic/00-basic_example",
        "href": "examples/00-basic/00-basic_example.html#basic-dpf-core-usage",
        "title": "Basic DPF-Core usage",
        "section": "Basic DPF-Core usage",
        "text": "This example shows how to open a result file and do some\nbasic postprocessing.\nIf you have Ansys 2021 R1 or higher installed, starting DPF is quite easy\nas DPF-Core takes care of launching all the services that\nare required for postprocessing Ansys files.\nNext, open an example and print out the model object. The\nModel class helps to organize access methods\nfor the result by keeping track of the operators and data sources used by the result\nfile.\nPrinting the model displays:\nAnalysis type\nAvailable results\nSize of the mesh\nNumber of results\nAlso, note that the first time you create a DPF object, Python\nautomatically attempts to start the server in the background. If you\nwant to connect to an existing server (either local or remote), use\nansys.dpf.core.connect_to_server().\nBasic DPF-Core usage\nmodel\nModel\nansys.dpf.core.connect_to_server()"
    },
    {
        "objectID": "examples/00-basic/00-basic_example",
        "href": "examples/00-basic/00-basic_example.html#model-metadata",
        "title": "Basic DPF-Core usage > Model metadata",
        "section": "Model metadata",
        "text": "Specific metadata can be extracted from the model by referencing the\nmodel’s metadata property. For example, to print only the\nresult_info:\nPrint the mesh region:\nPrint the time or frequency of the results:\nModel metadata\nmetadata\nresult_info"
    },
    {
        "objectID": "examples/00-basic/00-basic_example",
        "href": "examples/00-basic/00-basic_example.html#extract-displacement-results",
        "title": "Basic DPF-Core usage > Extract displacement results",
        "section": "Extract displacement results",
        "text": "All results of the model can be accessed through the results\nproperty, which returns the ansys.dpf.core.results.Results\nclass. This class contains the DPF result operators available to a\nspecific result file, which are listed when printing the object with\nprint(results).\nHere, the 'U' operator is connected with data_sources, which\ntakes place automatically when running results.displacement().\nBy default, the 'U' operator is connected to the first result set,\nwhich for this static result is the only result.\nTotal running time of the script: (0 minutes 9.707 seconds)\nDownload Jupyter notebook: 00-basic_example.ipynb\nDownload Python source code: 00-basic_example.py\nDownload zipped: 00-basic_example.zip\nGallery generated by Sphinx-Gallery\nExtract displacement results\nresults\nansys.dpf.core.results.Results\nprint(results)\n'U'\ndata_sources\nresults.displacement()\n'U'\nDownload Jupyter notebook: 00-basic_example.ipynb\nDownload Python source code: 00-basic_example.py\nDownload zipped: 00-basic_example.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_principal_2",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_principal_2.html#elastic_strain_principal_2",
        "title": "elastic_strain_principal_2",
        "section": "elastic_strain_principal_2",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_principal_2"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.matrix_inverse",
        "href": "api/ansys.dpf.core.operators.math.matrix_inverse.html#matrix_inverse",
        "title": "matrix_inverse",
        "section": "matrix_inverse",
        "text": "Autogenerated DPF operator classes.\nmatrix_inverse"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timefreq_band_pass",
        "href": "api/ansys.dpf.core.operators.filter.timefreq_band_pass.html#timefreq_band_pass",
        "title": "timefreq_band_pass",
        "section": "timefreq_band_pass",
        "text": "Autogenerated DPF operator classes.\ntimefreq_band_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.accumulate",
        "href": "api/ansys.dpf.core.operators.math.accumulate.html#accumulate",
        "title": "accumulate",
        "section": "accumulate",
        "text": "Autogenerated DPF operator classes.\naccumulate"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_stress",
        "href": "api/ansys.dpf.core.operators.result.gasket_stress.html#gasket_stress",
        "title": "gasket_stress",
        "section": "gasket_stress",
        "text": "Autogenerated DPF operator classes.\ngasket_stress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.stl_export",
        "href": "api/ansys.dpf.core.operators.mesh.stl_export.html#stl_export",
        "title": "stl_export",
        "section": "stl_export",
        "text": "Autogenerated DPF operator classes.\nstl_export"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mean_velocity",
        "href": "api/ansys.dpf.core.operators.result.mean_velocity.html#mean_velocity",
        "title": "mean_velocity",
        "section": "mean_velocity",
        "text": "Autogenerated DPF operator classes.\nmean_velocity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_band_pass_fc",
        "href": "api/ansys.dpf.core.operators.filter.field_band_pass_fc.html#field_band_pass_fc",
        "title": "field_band_pass_fc",
        "section": "field_band_pass_fc",
        "text": "Autogenerated DPF operator classes.\nfield_band_pass_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.convertnum_bcs_to_nod",
        "href": "api/ansys.dpf.core.operators.invariant.convertnum_bcs_to_nod.html#convertnum_bcs_to_nod",
        "title": "convertnum_bcs_to_nod",
        "section": "convertnum_bcs_to_nod",
        "text": "Autogenerated DPF operator classes.\nconvertnum_bcs_to_nod"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.beam_properties",
        "href": "api/ansys.dpf.core.operators.mesh.beam_properties.html#beam_properties",
        "title": "beam_properties",
        "section": "beam_properties",
        "text": "Autogenerated DPF operator classes.\nbeam_properties"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.solid_to_skin_fc",
        "href": "api/ansys.dpf.core.operators.mapping.solid_to_skin_fc.html#solid_to_skin_fc",
        "title": "solid_to_skin_fc",
        "section": "solid_to_skin_fc",
        "text": "Autogenerated DPF operator classes.\nsolid_to_skin_fc"
    },
    {
        "objectID": "examples/06-plotting/03-labels",
        "href": "examples/06-plotting/03-labels.html#add-nodal-labels-on-plots",
        "title": "Add nodal labels on plots",
        "section": "Add nodal labels on plots",
        "text": "You can add use label properties to add custom labels to specific nodes.\nIf the label for a node is not defined or None, the nodal scalar value\nof the currently active field at that node is shown. If no field is active,\nthe node ID is shown.\nImport the dpf_core module, included examples files, and the DpfPlotter\nmodule.\nOpen an example and print the Model object. The\nModel class helps to organize access\nmethods for the result by keeping track of the operators and data sources\nused by the result file.\nPrinting the model displays this metadata:\nAnalysis type\nAvailable results\nSize of the mesh\nNumber of results\nGet the meshed region.\nGet the stress tensor and connect time scoping.\nMake sure that you define dpf.locations.nodal as the scoping location because\nlabels are supported only for nodal results.\nPlot the results on the mesh and show the minimum and maximum.\nTotal running time of the script: (0 minutes 2.907 seconds)\nDownload Jupyter notebook: 03-labels.ipynb\nDownload Python source code: 03-labels.py\nDownload zipped: 03-labels.zip\nGallery generated by Sphinx-Gallery\nAdd nodal labels on plots\ndpf_core\nDpfPlotter\nModel\nModel\nconnect\ndpf.locations.nodal\nDownload Jupyter notebook: 03-labels.ipynb\nDownload Python source code: 03-labels.py\nDownload zipped: 03-labels.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.convertnum_op",
        "href": "api/ansys.dpf.core.operators.invariant.convertnum_op.html#convertnum_op",
        "title": "convertnum_op",
        "section": "convertnum_op",
        "text": "Autogenerated DPF operator classes.\nconvertnum_op"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.remove_rigid_body_motion_fc",
        "href": "api/ansys.dpf.core.operators.result.remove_rigid_body_motion_fc.html#remove_rigid_body_motion_fc",
        "title": "remove_rigid_body_motion_fc",
        "section": "remove_rigid_body_motion_fc",
        "text": "Autogenerated DPF operator classes.\nremove_rigid_body_motion_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.make_sphere_levelset",
        "href": "api/ansys.dpf.core.operators.mesh.make_sphere_levelset.html#make_sphere_levelset",
        "title": "make_sphere_levelset",
        "section": "make_sphere_levelset",
        "text": "Autogenerated DPF operator classes.\nmake_sphere_levelset"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.invert_fc",
        "href": "api/ansys.dpf.core.operators.math.invert_fc.html#invert_fc",
        "title": "invert_fc",
        "section": "invert_fc",
        "text": "Autogenerated DPF operator classes.\ninvert_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.principal_invariants",
        "href": "api/ansys.dpf.core.operators.invariant.principal_invariants.html#principal_invariants",
        "title": "principal_invariants",
        "section": "principal_invariants",
        "text": "Autogenerated DPF operator classes.\nprincipal_invariants"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mapdl_split_to_acmo_facet_indices",
        "href": "api/ansys.dpf.core.operators.result.mapdl_split_to_acmo_facet_indices.html#mapdl_split_to_acmo_facet_indices",
        "title": "mapdl_split_to_acmo_facet_indices",
        "section": "mapdl_split_to_acmo_facet_indices",
        "text": "Autogenerated DPF operator classes.\nmapdl_split_to_acmo_facet_indices"
    },
    {
        "objectID": "examples/04-advanced/11-cycles_to_failure",
        "href": "examples/04-advanced/11-cycles_to_failure.html#calculate-the-number-of-cycles-to-fatigue-failure",
        "title": "Calculate the number of cycles to fatigue failure",
        "section": "Calculate the number of cycles to fatigue failure",
        "text": "This example shows how to generate and use a result file to calculate the\ncycles to failure result for a simple model.\nMaterial data is manually imported, Structural Steel from Ansys Mechanical:\nYoungs Modulus (youngsSteel)\nPoisson’s Ratio (prxySteel)\nSN curve (sn_data)\nThe first step is to generate a simple model with high stress and save the\nresults .rst file locally to myDir (default is “C:\\temp”).\nFor this, we provide a short pyMAPDL script.\nThe cycles to failure result is the (interpolated) negative of the stress result.\nThe higher the stress result, the lower the number of cycles to failure.\nThe first step is to generate a simple model with high stress\nThe .rst file used is already available, but can be obtained using the short pyMAPDL code below:\nPyDPF-Core is then used to post-process the .rst file to estimate the cycles to failure.\nGet the von mises equivalent stress, requires an operator.\nUse NumPy to interpolate the results.\nGenerate a cycles_to_failure DPF Field\nTotal running time of the script: (0 minutes 3.330 seconds)\nDownload Jupyter notebook: 11-cycles_to_failure.ipynb\nDownload Python source code: 11-cycles_to_failure.py\nDownload zipped: 11-cycles_to_failure.zip\nGallery generated by Sphinx-Gallery\nCalculate the number of cycles to fatigue failure\nDownload Jupyter notebook: 11-cycles_to_failure.ipynb\nDownload Python source code: 11-cycles_to_failure.py\nDownload zipped: 11-cycles_to_failure.zip"
    },
    {
        "objectID": "examples/04-advanced/06-stress_gradient_path",
        "href": "examples/04-advanced/06-stress_gradient_path.html#stress-gradient-normal-to-a-defined-node",
        "title": "Stress gradient normal to a defined node",
        "section": "Stress gradient normal to a defined node",
        "text": "This example shows how to plot a stress gradient normal to a selected node.\nBecause the example is based on creating a path along the normal, the selected node\nmust be on the surface of the geometry.\nA path is created of a defined length.\nImport the DPF-Core module as dpf and import the\nincluded examples file and DpfPlotter.\nOpen an example and print out the Model object. The\nModel class helps to organize access\nmethods for the result by keeping track of the operators and data sources\nused by the result file.\nPrinting the model displays:\nAnalysis type\nAvailable results\nSize of the mesh\nNumber of results\nUnit\nDefine the node ID normal to plot the a stress gradient\nPrint the mesh unit\ndepth defines the length/depth that the path penetrates to.\nWhile defining depth make sure you use the correct mesh unit.\ndelta defines distance between consecutive points on the path.\nGet the meshed region\nGet Equivalent stress fields container.\nDefine Nodal scoping.\nMake sure to define \"Nodal\" as the requested location, important for the\nnormals operator.\nGet Skin Mesh because normals\noperator requires Shells as input.\nGet normal at a node using normals\noperator.\nThe normal vector is along the surface normal. You need to invert the vector\nusing scale operator\ninwards in the geometry, to get the path direction.\nGet nodal coordinates, they serve as the first point on the line.\nCreate 3D line equation.\nCreate coordinates using 3D line equation.\nCreate field for coordinates of the path.\nMap results on the path.\nRequest the mapped field data and its mesh.\nCreate stress vs length chart.\nCreate a plot to add both meshes, mesh_m (the mapped mesh) and mesh\n(the original mesh)\nTotal running time of the script: (0 minutes 5.770 seconds)\nDownload Jupyter notebook: 06-stress_gradient_path.ipynb\nDownload Python source code: 06-stress_gradient_path.py\nDownload zipped: 06-stress_gradient_path.zip\nGallery generated by Sphinx-Gallery\nStress gradient normal to a defined node\ndpf\nDpfPlotter\nModel\nModel\ndepth\ndepth\ndelta\n\"Nodal\"\nnormals\nnormals\nnormals\nscale\nmesh_m\nmesh\nDownload Jupyter notebook: 06-stress_gradient_path.ipynb\nDownload Python source code: 06-stress_gradient_path.py\nDownload zipped: 06-stress_gradient_path.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_generic_data_container",
        "href": "api/ansys.dpf.core.operators.utility.merge_generic_data_container.html#merge_generic_data_container",
        "title": "merge_generic_data_container",
        "section": "merge_generic_data_container",
        "text": "Autogenerated DPF operator classes.\nmerge_generic_data_container"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_blackman_fc",
        "href": "api/ansys.dpf.core.operators.math.window_blackman_fc.html#window_blackman_fc",
        "title": "window_blackman_fc",
        "section": "window_blackman_fc",
        "text": "Autogenerated DPF operator classes.\nwindow_blackman_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.div_lighthill_tensor",
        "href": "api/ansys.dpf.core.operators.result.div_lighthill_tensor.html#div_lighthill_tensor",
        "title": "div_lighthill_tensor",
        "section": "div_lighthill_tensor",
        "text": "Autogenerated DPF operator classes.\ndiv_lighthill_tensor"
    },
    {
        "objectID": "api/ansys.dpf.core.data_sources",
        "href": "api/ansys.dpf.core.data_sources.html#data-sources",
        "title": "Data Sources",
        "section": "Data Sources",
        "text": "Data Sources"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.mesh",
        "href": "api/ansys.dpf.core.operators.utility.mesh.html#mesh",
        "title": "mesh",
        "section": "mesh",
        "text": "Autogenerated DPF operator classes.\nmesh"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.exponential",
        "href": "api/ansys.dpf.core.operators.math.exponential.html#exponential",
        "title": "exponential",
        "section": "exponential",
        "text": "Autogenerated DPF operator classes.\nexponential"
    },
    {
        "objectID": "examples/12-fluids/sg_execution_times",
        "href": "examples/12-fluids/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:37.387 total execution time for 4 files from examples12-fluids:\nExample\nTime\nMem (MB)\nsphx_glr_examples_12-fluids_02-fluids_results.py (02-fluids_results.py)\n00:15.493\n0.0\nsphx_glr_examples_12-fluids_01-fluids_mesh.py (01-fluids_mesh.py)\n00:09.116\n0.0\nsphx_glr_examples_12-fluids_03-fluids_isosurface.py (03-fluids_isosurface.py)\n00:06.709\n0.0\nsphx_glr_examples_12-fluids_00-fluids_model.py (00-fluids_model.py)\n00:06.069\n0.0\nComputation times\n02-fluids_results.py\n01-fluids_mesh.py\n03-fluids_isosurface.py\n00-fluids_model.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_result_infos",
        "href": "api/ansys.dpf.core.operators.utility.merge_result_infos.html#merge_result_infos",
        "title": "merge_result_infos",
        "section": "merge_result_infos",
        "text": "Autogenerated DPF operator classes.\nmerge_result_infos"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.extract_sub_mc",
        "href": "api/ansys.dpf.core.operators.utility.extract_sub_mc.html#extract_sub_mc",
        "title": "extract_sub_mc",
        "section": "extract_sub_mc",
        "text": "Autogenerated DPF operator classes.\nextract_sub_mc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.change_fc",
        "href": "api/ansys.dpf.core.operators.scoping.change_fc.html#change_fc",
        "title": "change_fc",
        "section": "change_fc",
        "text": "Autogenerated DPF operator classes.\nchange_fc"
    },
    {
        "objectID": "getting_started/compatibility",
        "href": "getting_started/compatibility.html#compatibility",
        "title": "Compatibility",
        "section": "Compatibility",
        "text": "Compatibility"
    },
    {
        "objectID": "getting_started/compatibility",
        "href": "getting_started/compatibility.html#operating-system",
        "title": "Compatibility > Operating system",
        "section": "Operating system",
        "text": "DPF supports Windows 10 and Rocky Linux 8 and later.\nTo run DPF on CentOS 7, use DPF for 2024R2 (8.2) or older.\nFor more information, see Ansys Platform Support.\nOperating system"
    },
    {
        "objectID": "getting_started/compatibility",
        "href": "getting_started/compatibility.html#client-server",
        "title": "Compatibility > Client-server",
        "section": "Client-server",
        "text": "The DPF server version depends on your installed Ansys version or your installed standalone DPF Server pre-release version.\nThe following table shows client-server compatibility for supported\nAnsys versions. With Ansys 2022 R2 and later, you can use PyDPF-Core 0.10 and later.\nWith Ansys 2021 R2 and 2022 R1, you can use PyDPF-Core\nversion 0.3 up to 0.9. With Ansys 2021 R1, you must use a PyDPF-Core 0.2\nversion.\nAs new features are developed, every attempt is made to ensure backward\ncompatibility from the client to the server. Backward compatibility is generally ensured for\nthe 4 latest Ansys versions. For example, ansys-dpf-core module with 0.8.0 version has been\ndeveloped for Ansys 2023 R2 pre1 release, for 2023 R2 Ansys version. It is compatible with\n2023 R2, 2023 R1, 2022 R2 and 2022 R1 Ansys versions.\nStarting with version 0.10 of ansys-dpf-core, the packages ansys-dpf-gate,\nansys-dpf-gatebin and ansys-grpc-dpf are no longer dependencies and are directly integrated\nwithin ansys-dpf-core as modules. This introduced a breaking change to simplify installation\nand prevent synchronization issues between the PyDPF libraries, requiring to drop support for Ansys\nprevious to 2022 R2.\nAnsys strongly encourages you to use the latest packages available, as far they are compatible\nwith the Server version you want to run. Considering Ansys 2023 R1 for example, if ansys-dpf-core\nmodule with 0.10.0 version is the latest available compatible package, it should be used.\nFor ansys-dpf-core<0.10, the ansys.grpc.dpf\npackage should also be synchronized with the server version.\nServer version\nansys.dpf.core Python module version\nansys.grpc.dpf Python module version\nansys.dpf.gatebin binaries Python module version\nansys.dpf.gate Python module version\n9.0 (Ansys 2025 R1 pre0)\n0.13.0 and later\nNone\nNone\nNone\n8.2 (Ansys 2024 R2)\n0.12.1 and later\nNone\nNone\nNone\n8.1 (Ansys 2024 R2 pre1)\n0.12.0 and later\nNone\nNone\nNone\n8.0 (Ansys 2024 R2 pre0)\n0.11.0 and later\nNone\nNone\nNone\n7.1 (Ansys 2024 R1)\n0.10.1 and later\nNone\nNone\nNone\n7.0 (Ansys 2024 R1 pre0)\n6.2 (Ansys 2023 R2)\n6.1 (Ansys 2023 R2 pre1)\n6.0 (Ansys 2023 R2 pre0)\n5.0 (Ansys 2023 R1)\n4.0 (Ansys 2022 R2)\n3.0 (Ansys 2022 R1)\n0.4.0 to 0.9.0\n0.4.0\nNone\nNone\n2.0 (Ansys 2021 R2)\n0.3.0 to 0.9.0**\n0.3.0\nNone\nNone\n1.0 (Ansys 2021 R1)\n0.2.*\n0.2.2\nNone\nNone\n(** Compatibility of DPF 2.0 with ansys-dpf-core 0.5.0 to 0.9.0 is assumed but not certified.)\nClient-server\nClient-server compatibility\n0.10\n0.3\n0.9\n0.2\nansys-dpf-core\n0.10\nansys-dpf-core\nansys-dpf-gate\nansys-dpf-gatebin\nansys-grpc-dpf\nansys-dpf-core\nansys-dpf-core\nansys-dpf-core<0.10\nansys.dpf.core\nansys.grpc.dpf\nansys.dpf.gatebin\nansys.dpf.gate\nansys-dpf-core"
    },
    {
        "objectID": "getting_started/compatibility",
        "href": "getting_started/compatibility.html#update-python-environment",
        "title": "Compatibility > Update Python environment",
        "section": "Update Python environment",
        "text": "When moving from one Ansys release to another, you must update the ansys-dpf-core package.\nTo get the latest version of the ansys-dpf-core package, use this command:\nTo get a specific version of the ansys-dpf-core package, such as 0.7.0, use this command:\nUpdate Python environment\nansys-dpf-core\nansys-dpf-core\nansys-dpf-core"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max_by_entity",
        "href": "api/ansys.dpf.core.operators.min_max.min_max_by_entity.html#min_max_by_entity",
        "title": "min_max_by_entity",
        "section": "min_max_by_entity",
        "text": "Autogenerated DPF operator classes.\nmin_max_by_entity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sqr_fc",
        "href": "api/ansys.dpf.core.operators.math.sqr_fc.html#sqr_fc",
        "title": "sqr_fc",
        "section": "sqr_fc",
        "text": "Autogenerated DPF operator classes.\nsqr_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.skin",
        "href": "api/ansys.dpf.core.operators.mesh.skin.html#skin",
        "title": "skin",
        "section": "skin",
        "text": "Autogenerated DPF operator classes.\nskin"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.exclude_levelset",
        "href": "api/ansys.dpf.core.operators.mesh.exclude_levelset.html#exclude_levelset",
        "title": "exclude_levelset",
        "section": "exclude_levelset",
        "text": "Autogenerated DPF operator classes.\nexclude_levelset"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_intensity",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_intensity.html#plastic_strain_intensity",
        "title": "plastic_strain_intensity",
        "section": "plastic_strain_intensity",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_intensity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.transient_rayleigh_integration",
        "href": "api/ansys.dpf.core.operators.result.transient_rayleigh_integration.html#transient_rayleigh_integration",
        "title": "transient_rayleigh_integration",
        "section": "transient_rayleigh_integration",
        "text": "Autogenerated DPF operator classes.\ntransient_rayleigh_integration"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.total_contact_moment",
        "href": "api/ansys.dpf.core.operators.result.total_contact_moment.html#total_contact_moment",
        "title": "total_contact_moment",
        "section": "total_contact_moment",
        "text": "Autogenerated DPF operator classes.\ntotal_contact_moment"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.from_scoping",
        "href": "api/ansys.dpf.core.operators.mesh.from_scoping.html#from_scoping",
        "title": "from_scoping",
        "section": "from_scoping",
        "text": "Autogenerated DPF operator classes.\nfrom_scoping"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.fields_container",
        "href": "api/ansys.dpf.core.operators.utility.fields_container.html#fields_container",
        "title": "fields_container",
        "section": "fields_container",
        "text": "Autogenerated DPF operator classes.\nfields_container"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.invariants",
        "href": "api/ansys.dpf.core.operators.invariant.invariants.html#invariants",
        "title": "invariants",
        "section": "invariants",
        "text": "Autogenerated DPF operator classes.\ninvariants"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.total_strain",
        "href": "api/ansys.dpf.core.operators.result.total_strain.html#total_strain",
        "title": "total_strain",
        "section": "total_strain",
        "text": "Autogenerated DPF operator classes.\ntotal_strain"
    },
    {
        "objectID": "examples/13-streamlines/index",
        "href": "examples/13-streamlines/index.html#streamlines-examples",
        "title": "Streamlines examples",
        "section": "Streamlines examples",
        "text": "These examples show how to compute and plot streamlines.\nsphx_glr_examples_13-streamlines_00_plot_3d_streamlines.py\nsphx_glr_examples_13-streamlines_01_plot_surface_streamlines.py\nStreamlines examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.prep_sampling_fft",
        "href": "api/ansys.dpf.core.operators.mapping.prep_sampling_fft.html#prep_sampling_fft",
        "title": "prep_sampling_fft",
        "section": "prep_sampling_fft",
        "text": "Autogenerated DPF operator classes.\nprep_sampling_fft"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_Y",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_Y.html#compute_total_strain_y",
        "title": "compute_total_strain_Y",
        "section": "compute_total_strain_Y",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.extract_sub_fc",
        "href": "api/ansys.dpf.core.operators.utility.extract_sub_fc.html#extract_sub_fc",
        "title": "extract_sub_fc",
        "section": "extract_sub_fc",
        "text": "Autogenerated DPF operator classes.\nextract_sub_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.settings",
        "href": "api/ansys.dpf.core.settings.html#settings",
        "title": "settings",
        "section": "settings",
        "text": "Customize the behavior of the module.\nsettings"
    },
    {
        "objectID": "api/ansys.dpf.core.operators",
        "href": "api/ansys.dpf.core.operators.html#ansysdpfcoreoperators-package",
        "title": "ansys.dpf.core.operators package",
        "section": "ansys.dpf.core.operators package",
        "text": "ansys.dpf.core.operators package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators",
        "href": "api/ansys.dpf.core.operators.html#subpackages",
        "title": "ansys.dpf.core.operators package > Subpackages",
        "section": "Subpackages",
        "text": "Subpackages"
    },
    {
        "objectID": "api/ansys.dpf.core.operators",
        "href": "api/ansys.dpf.core.operators.html#module-contents",
        "title": "ansys.dpf.core.operators package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strains_eqv",
        "href": "api/ansys.dpf.core.operators.result.thermal_strains_eqv.html#thermal_strains_eqv",
        "title": "thermal_strains_eqv",
        "section": "thermal_strains_eqv",
        "text": "Autogenerated DPF operator classes.\nthermal_strains_eqv"
    },
    {
        "objectID": "examples/02-modal_analyses/sg_execution_times",
        "href": "examples/02-modal_analyses/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:52.275 total execution time for 2 files from examples02-modal_analyses:\nExample\nTime\nMem (MB)\nsphx_glr_examples_02-modal_analyses_01-plot_and_animate_modes.py (01-plot_and_animate_modes.py)\n00:38.342\n0.0\nsphx_glr_examples_02-modal_analyses_00-compare_modes.py (00-compare_modes.py)\n00:13.933\n0.0\nComputation times\n01-plot_and_animate_modes.py\n00-compare_modes.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.euler_nodes",
        "href": "api/ansys.dpf.core.operators.result.euler_nodes.html#euler_nodes",
        "title": "euler_nodes",
        "section": "euler_nodes",
        "text": "Autogenerated DPF operator classes.\neuler_nodes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_enf",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_enf.html#cyclic_expanded_enf",
        "title": "cyclic_expanded_enf",
        "section": "cyclic_expanded_enf",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_enf"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_triangular_fc",
        "href": "api/ansys.dpf.core.operators.math.window_triangular_fc.html#window_triangular_fc",
        "title": "window_triangular_fc",
        "section": "window_triangular_fc",
        "text": "Autogenerated DPF operator classes.\nwindow_triangular_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.custom_type_field",
        "href": "api/ansys.dpf.core.custom_type_field.html#customtypefield",
        "title": "CustomTypeField",
        "section": "CustomTypeField",
        "text": "CustomTypeField"
    },
    {
        "objectID": "operator_reference",
        "href": "operator_reference.html#operators",
        "title": "Operators",
        "section": "Operators",
        "text": "DPF operators provide for manipulating and transforming simulation data.\nFrom DPF Server for Ansys 2023 R2 and later, the licensing logic for operators in DPF depend on the active\nServerContext.\nThe available contexts are Premium and Entry.\nLicensed operators are marked as in the documentation using the license property.\nOperators with the license property as None do not require a license check-out.\nFor more information about using these two contexts, see user_guide_server_context.\nClick below to access the operators documentation.\nClick here to get started with operators available in DPF.\nOPEN\nFor Ansys 2023 R1 and earlier, the context is equivalent to Premium, with all operators loaded.\nFor DPF Server 2023.2.pre0 specifically, the server context defines which operators are loaded and\naccessible. Use the PyDPF-Core 0.7 operator documentation to learn more.\nSome operators in the documentation might not be available for a particular server version.\nOperators\nlicense\nlicense"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.on_mesh_property",
        "href": "api/ansys.dpf.core.operators.scoping.on_mesh_property.html#on_mesh_property",
        "title": "on_mesh_property",
        "section": "on_mesh_property",
        "text": "Autogenerated DPF operator classes.\non_mesh_property"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.component_wise_product",
        "href": "api/ansys.dpf.core.operators.math.component_wise_product.html#component_wise_product",
        "title": "component_wise_product",
        "section": "component_wise_product",
        "text": "Autogenerated DPF operator classes.\ncomponent_wise_product"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expansion",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expansion.html#cyclic_expansion",
        "title": "cyclic_expansion",
        "section": "cyclic_expansion",
        "text": "Autogenerated DPF operator classes.\ncyclic_expansion"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.dot",
        "href": "api/ansys.dpf.core.operators.math.dot.html#dot",
        "title": "dot",
        "section": "dot",
        "text": "Autogenerated DPF operator classes.\ndot"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure_XY",
        "href": "api/ansys.dpf.core.operators.result.gasket_inelastic_closure_XY.html#gasket_inelastic_closure_xy",
        "title": "gasket_inelastic_closure_XY",
        "section": "gasket_inelastic_closure_XY",
        "text": "Autogenerated DPF operator classes.\ngasket_inelastic_closure_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.examples",
        "href": "api/ansys.dpf.core.examples.html#ansysdpfcoreexamples-package",
        "title": "ansys.dpf.core.examples package",
        "section": "ansys.dpf.core.examples package",
        "text": "ansys.dpf.core.examples package"
    },
    {
        "objectID": "api/ansys.dpf.core.examples",
        "href": "api/ansys.dpf.core.examples.html#submodules",
        "title": "ansys.dpf.core.examples package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.examples",
        "href": "api/ansys.dpf.core.examples.html#module-contents",
        "title": "ansys.dpf.core.examples package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_3",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_3.html#compute_stress_3",
        "title": "compute_stress_3",
        "section": "compute_stress_3",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_3"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.normals_provider_nl",
        "href": "api/ansys.dpf.core.operators.geo.normals_provider_nl.html#normals_provider_nl",
        "title": "normals_provider_nl",
        "section": "normals_provider_nl",
        "text": "Autogenerated DPF operator classes.\nnormals_provider_nl"
    },
    {
        "objectID": "examples/04-advanced/05-extrapolation_strain_2d",
        "href": "examples/04-advanced/05-extrapolation_strain_2d.html#extrapolation-method-for-strain-result-of-a-2d-element",
        "title": "Extrapolation method for strain result of a 2D element",
        "section": "Extrapolation method for strain result of a 2D element",
        "text": "This example shows how to compute the stress nodal components from\nGaussian points (integration points) for a 2D element using\nextrapolation.\nExtrapolate results available at Gaussian or quadrature points to nodal\npoints for a field or fields container. The available elements are:\nLinear quadrangle\nParabolic quadrangle\nLinear hexagonal\nQuadratic hexagonal\nLinear tetrahedral\nQuadratic tetrahedral\nHere are the steps for extrapolation:\nGet the data source’s solution from the integration points. (This\nresult file was generated with the Ansys Mechanical APDL (MAPDL)\noption ERESX, NO).\nUse the extrapolation operator to compute the nodal elastic strain.\nGet the result for nodal elastic strain from the data source.\nThe analysis was computed by MAPDL.\nCompare the result for nodal elastic strain from the data source\nand the nodal elastic strain computed by the extrapolation method.\nGet the data source’s analyse of integration points and data source’s analyse reference\nExtrapolation method for strain result of a 2D element\nERESX, NO"
    },
    {
        "objectID": "examples/04-advanced/05-extrapolation_strain_2d",
        "href": "examples/04-advanced/05-extrapolation_strain_2d.html#extrapolate-from-integration-points-for-elastic-strain-result",
        "title": "Extrapolation method for strain result of a 2D element > Extrapolate from integration points for elastic strain result",
        "section": "Extrapolate from integration points for elastic strain result",
        "text": "This example uses the gauss_to_node_fc operator to compute nodal component\nelastic strain results from the elastic strain at the integration points.\nExtrapolate from integration points for elastic strain result\ngauss_to_node_fc"
    },
    {
        "objectID": "examples/04-advanced/05-extrapolation_strain_2d",
        "href": "examples/04-advanced/05-extrapolation_strain_2d.html#nodal-elastic-strain-result-of-integration-points",
        "title": "Extrapolation method for strain result of a 2D element > Nodal elastic strain result of integration points:",
        "section": "Nodal elastic strain result of integration points:",
        "text": "The command ERESX,NO in MAPDL is used to copy directly the\nGaussian (integration) points results to the nodes, instead of the results\nat nodes or elements (which are an interpolation of results at a few\nGaussian points).\nThe following plot shows the nodal values that are the averaged values\nof elastic strain at each node. The value shown at the node is the\naverage of the elastic strains from the Gaussian points of each element\nthat it belongs to.\nCreate the gauss_to_node_fc operator and compute nodal component\nelastic strain by applying the extrapolation method.\nNodal elastic strain result of integration points:\nERESX,NO\ngauss_to_node_fc"
    },
    {
        "objectID": "examples/04-advanced/05-extrapolation_strain_2d",
        "href": "examples/04-advanced/05-extrapolation_strain_2d.html#elastic-strain-result-of-reference-ansys-workbench",
        "title": "Extrapolation method for strain result of a 2D element > Elastic strain result of reference Ansys Workbench",
        "section": "Elastic strain result of reference Ansys Workbench",
        "text": "Elastic strain result of reference Ansys Workbench"
    },
    {
        "objectID": "examples/04-advanced/05-extrapolation_strain_2d",
        "href": "examples/04-advanced/05-extrapolation_strain_2d.html#plot",
        "title": "Extrapolation method for strain result of a 2D element > Plot",
        "section": "Plot",
        "text": "Show plots of extrapolation’s elastic strain result and reference’s elastic strain result\nPlot"
    },
    {
        "objectID": "examples/04-advanced/05-extrapolation_strain_2d",
        "href": "examples/04-advanced/05-extrapolation_strain_2d.html#comparison",
        "title": "Extrapolation method for strain result of a 2D element > Comparison",
        "section": "Comparison",
        "text": "Compare the elastic strain result computed by extrapolation and reference’s result.\nCheck if the two fields containers are identical.\nThe relative tolerance is set to 1e-14.\nThe smallest value that is to be considered during the comparison\nstep : all the abs(values) in the field less than 1e-2 are considered null.\nCompute absolute and relative errors\nPlot absolute and relative errors.\nThe absolute value is the order of 1e-13, which is very small when compared to the\nmagnitude of 1e-5 of the displacements. This is reflected in the relative error\nplot, where the errors are found to be below 1.1e-5%. The result of these plots\ncan be used to set the tolerances for the\nidentical_fc operator.\nTotal running time of the script: (0 minutes 11.990 seconds)\nDownload Jupyter notebook: 05-extrapolation_strain_2d.ipynb\nDownload Python source code: 05-extrapolation_strain_2d.py\nDownload zipped: 05-extrapolation_strain_2d.zip\nGallery generated by Sphinx-Gallery\nComparison\nabs(values)\nidentical_fc\nDownload Jupyter notebook: 05-extrapolation_strain_2d.ipynb\nDownload Python source code: 05-extrapolation_strain_2d.py\nDownload zipped: 05-extrapolation_strain_2d.zip"
    },
    {
        "objectID": "examples/00-basic/09-results_over_space_subset",
        "href": "examples/00-basic/09-results_over_space_subset.html#scope-results-over-custom-space-domains",
        "title": "Scope results over custom space domains",
        "section": "Scope results over custom space domains",
        "text": "The Result class, which are instances\ncreated by the Model, give\naccess to helpers for requesting results on specific mesh and time scopings.\nWith these helpers, working on a spatial subset of the model is straightforward.\nIn this example, different ways to choose the spatial subset to\nevaluate a result are exposed\nImport necessary modules:\nCreate a model object to establish a connection with an example result file:\nScope results over custom space domains\nResult\nModel"
    },
    {
        "objectID": "examples/00-basic/09-results_over_space_subset",
        "href": "examples/00-basic/09-results_over_space_subset.html#choose-specific-nodes",
        "title": "Scope results over custom space domains > Choose specific nodes",
        "section": "Choose specific nodes",
        "text": "If some nodes or elements are specifically of interest, a nodal mesh_scoping\ncan be connected.\nor\nEquivalent to:\nEquivalent to:\nChoose specific nodes\nmesh_scoping"
    },
    {
        "objectID": "examples/00-basic/09-results_over_space_subset",
        "href": "examples/00-basic/09-results_over_space_subset.html#choose-specific-elements",
        "title": "Scope results over custom space domains > Choose specific elements",
        "section": "Choose specific elements",
        "text": "If some elements are specifically of interest, an elemental mesh_scoping\ncan be connected.\nEquivalent to:\nEquivalent to:\nChoose specific elements\nmesh_scoping"
    },
    {
        "objectID": "examples/00-basic/09-results_over_space_subset",
        "href": "examples/00-basic/09-results_over_space_subset.html#choose-specific-named-selections",
        "title": "Scope results over custom space domains > Choose specific named selections",
        "section": "Choose specific named selections",
        "text": "Named selections (also known as components) can be selected to create\na spatial domain for a result. A mesh_scoping can be created with a\nnamed selection.\nTo know the available named selections in the result file, use:\nGet the mesh_scoping of a named selection:\nConnect this mesh_scoping to the result provider\nEquivalent to:\nEquivalent to:\nChoose specific named selections\nmesh_scoping\nmesh_scoping\nmesh_scoping"
    },
    {
        "objectID": "examples/00-basic/09-results_over_space_subset",
        "href": "examples/00-basic/09-results_over_space_subset.html#split-results-depending-on-spatial-properties",
        "title": "Scope results over custom space domains > Split results depending on spatial properties",
        "section": "Split results depending on spatial properties",
        "text": "For many applications, it can be useful to request results on different subsets\nof the model. The ScopingsContainer entity contains different Scopings\nand can be connected to any result provider to get results split with the\nsame partition as the input ScopingsContainer.\nFor example, some application require to get results split by body, by material,\nby element types. It might also be necessary to get results by element shape\ntypes, such as shell, solid, or beam, to average data properly.\nCustomers might also require split by entirely custom spatial domains.\nSplit results by element shapes\nSplit results by bodies\nCreate a custom spatial split\nTotal running time of the script: (0 minutes 17.091 seconds)\nDownload Jupyter notebook: 09-results_over_space_subset.ipynb\nDownload Python source code: 09-results_over_space_subset.py\nDownload zipped: 09-results_over_space_subset.zip\nGallery generated by Sphinx-Gallery\nSplit results depending on spatial properties\nScopingsContainer\nScopings\nScopingsContainer\nDownload Jupyter notebook: 09-results_over_space_subset.ipynb\nDownload Python source code: 09-results_over_space_subset.py\nDownload zipped: 09-results_over_space_subset.zip"
    },
    {
        "objectID": "examples/14-lsdyna/index",
        "href": "examples/14-lsdyna/index.html#ls-dyna-examples",
        "title": "LS-Dyna examples",
        "section": "LS-Dyna examples",
        "text": "These examples show how to post-process LS-Dyna models.\nsphx_glr_examples_14-lsdyna_00-lsdyna_operators.py\nLS-Dyna examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_acceleration",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_acceleration.html#cyclic_expanded_acceleration",
        "title": "cyclic_expanded_acceleration",
        "section": "cyclic_expanded_acceleration",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_acceleration"
    },
    {
        "objectID": "api/ansys.dpf.core.collection",
        "href": "api/ansys.dpf.core.collection.html#collection",
        "title": "Collection",
        "section": "Collection",
        "text": "Collection"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_deformation_X",
        "href": "api/ansys.dpf.core.operators.result.gasket_deformation_X.html#gasket_deformation_x",
        "title": "gasket_deformation_X",
        "section": "gasket_deformation_X",
        "text": "Autogenerated DPF operator classes.\ngasket_deformation_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.normal_contact_moment",
        "href": "api/ansys.dpf.core.operators.result.normal_contact_moment.html#normal_contact_moment",
        "title": "normal_contact_moment",
        "section": "normal_contact_moment",
        "text": "Autogenerated DPF operator classes.\nnormal_contact_moment"
    },
    {
        "objectID": "examples/12-fluids/03-fluids_isosurface",
        "href": "examples/12-fluids/03-fluids_isosurface.html#compute-iso-surfaces-on-fluid-models",
        "title": "Compute iso-surfaces on fluid models",
        "section": "Compute iso-surfaces on fluid models",
        "text": "This example demonstrates how to compute iso-surfaces on fluid models.\nThis example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nCompute iso-surfaces on fluid models"
    },
    {
        "objectID": "examples/12-fluids/03-fluids_isosurface",
        "href": "examples/12-fluids/03-fluids_isosurface.html#import-the-dpf-core-module-and-its-examples-files",
        "title": "Compute iso-surfaces on fluid models > Import the dpf-core module and its examples files.",
        "section": "Import the dpf-core module and its examples files.",
        "text": "Import the dpf-core module and its examples files.\ndpf-core"
    },
    {
        "objectID": "examples/12-fluids/03-fluids_isosurface",
        "href": "examples/12-fluids/03-fluids_isosurface.html#specify-the-file-path",
        "title": "Compute iso-surfaces on fluid models > Specify the file path.",
        "section": "Specify the file path.",
        "text": "We work on a cas/dat.h5 file with only nodal variables.\nSpecify the file path."
    },
    {
        "objectID": "examples/12-fluids/03-fluids_isosurface",
        "href": "examples/12-fluids/03-fluids_isosurface.html#whole-mesh-scoping",
        "title": "Compute iso-surfaces on fluid models > Whole mesh scoping.",
        "section": "Whole mesh scoping.",
        "text": "We evaluate the mesh with the mesh_provider operator to scope the mesh_cut operator\nwith the whole mesh.\nWhole mesh scoping."
    },
    {
        "objectID": "examples/12-fluids/03-fluids_isosurface",
        "href": "examples/12-fluids/03-fluids_isosurface.html#extract-the-physics-variable",
        "title": "Compute iso-surfaces on fluid models > Extract the physics variable",
        "section": "Extract the physics variable",
        "text": "Here we choose to work with the static pressure by default which is a scalar and\nnodal variable without multi-species/phases. With a multi-species case,\nselect one using qualifier ellipsis pins and connecting a LabelSpace “species”/”phase”.\nExtract the physics variable"
    },
    {
        "objectID": "examples/12-fluids/03-fluids_isosurface",
        "href": "examples/12-fluids/03-fluids_isosurface.html#evaluate-iso-surfaces",
        "title": "Compute iso-surfaces on fluid models > Evaluate iso-surfaces",
        "section": "Evaluate iso-surfaces",
        "text": "We can finally use the iso_surfaces operator on this specific variable.\nWe choose to cut the whole mesh with 9 iso-surface manually selected between\nthe min and max of the static_pressure variable.\nEvaluate iso-surfaces"
    },
    {
        "objectID": "examples/12-fluids/03-fluids_isosurface",
        "href": "examples/12-fluids/03-fluids_isosurface.html#important-note",
        "title": "Compute iso-surfaces on fluid models > Important note",
        "section": "Important note",
        "text": "Iso-surfaces computation through the mesh_cut operator are only supported for Nodal Fields.\nFor Elemental variables, you must perform an averaging operation on the Nodes before\nrunning the mesh_cut operator. This can be done by chaining the elemental_to_nodal operator\noutput with the mesh_cut operator input.\nTotal running time of the script: (0 minutes 6.709 seconds)\nDownload Jupyter notebook: 03-fluids_isosurface.ipynb\nDownload Python source code: 03-fluids_isosurface.py\nDownload zipped: 03-fluids_isosurface.zip\nGallery generated by Sphinx-Gallery\nImportant note\nDownload Jupyter notebook: 03-fluids_isosurface.ipynb\nDownload Python source code: 03-fluids_isosurface.py\nDownload zipped: 03-fluids_isosurface.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sin_fc",
        "href": "api/ansys.dpf.core.operators.math.sin_fc.html#sin_fc",
        "title": "sin_fc",
        "section": "sin_fc",
        "text": "Autogenerated DPF operator classes.\nsin_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cms_subfile_info_provider",
        "href": "api/ansys.dpf.core.operators.result.cms_subfile_info_provider.html#cms_subfile_info_provider",
        "title": "cms_subfile_info_provider",
        "section": "cms_subfile_info_provider",
        "text": "Autogenerated DPF operator classes.\ncms_subfile_info_provider"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "The Data Processing Framework (DPF) provides numerical simulation users and engineers with a toolbox\nfor accessing and transforming simulation data. DPF can access data from Ansys solver\nresult files as well as from several neutral (see ref_main_index).\nThis workflow-based framework allows you to perform complex preprocessing and\npostprocessing operations on large amounts of simulation data.\nPyDPF-Core is a Python client API communicating with a DPF Server, either\nthrough the network using gRPC or directly in the same process.\nGetting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#install-dpf-server",
        "title": "Getting started > Install DPF Server",
        "section": "Install DPF Server",
        "text": "To use PyDPF-Core, you need access to a DPF Server.\nDPF Server is packaged within the Ansys installer in Ansys 2021 R1 and later.\nTo use it, download the standard installation using your preferred distribution channel,\nand install Ansys following the installer instructions.\nFor information on getting a licensed copy of Ansys, visit the Ansys website.\nDPF Server pre-releases are also available as standalone packages (independent of the Ansys installer) on the\nDPF Pre-Release page of the Ansys Customer Portal.\nAs explained in ref_licensing, the standalone DPF Server is still protected by an Ansys license mechanism\nand requires accepting the DPF Preview License Agreement.\nOnce you have access to an Ansys license, follow the guidelines to install a standalone DPF Server.\nFor more information regarding installing, managing, and running DPF servers, see ref_dpf_server.\nInstall DPF Server"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#install-pydpf-core",
        "title": "Getting started > Install PyDPF-Core",
        "section": "Install PyDPF-Core",
        "text": "To install PyDPF-Core, in a Python environment, run this command:\nBe sure to check the compatibility guidelines to know if your\nDPF Server version is compatible with the latest version of PyDPF-Core.\nFor more installation options, see Installation section.\nInstall PyDPF-Core"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#use-pydpf-core",
        "title": "Getting started > Use PyDPF-Core",
        "section": "Use PyDPF-Core",
        "text": "To use PyDPF-Core, in the same Python environment, run this command:\nUse PyDPF-Core"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.generalized_inner_product_fc",
        "href": "api/ansys.dpf.core.operators.math.generalized_inner_product_fc.html#generalized_inner_product_fc",
        "title": "generalized_inner_product_fc",
        "section": "generalized_inner_product_fc",
        "text": "Autogenerated DPF operator classes.\ngeneralized_inner_product_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_hamming",
        "href": "api/ansys.dpf.core.operators.math.window_hamming.html#window_hamming",
        "title": "window_hamming",
        "section": "window_hamming",
        "text": "Autogenerated DPF operator classes.\nwindow_hamming"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.eigen_values",
        "href": "api/ansys.dpf.core.operators.invariant.eigen_values.html#eigen_values",
        "title": "eigen_values",
        "section": "eigen_values",
        "text": "Autogenerated DPF operator classes.\neigen_values"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.hdf5dpf_generate_result_file",
        "href": "api/ansys.dpf.core.operators.serialization.hdf5dpf_generate_result_file.html#hdf5dpf_generate_result_file",
        "title": "hdf5dpf_generate_result_file",
        "section": "hdf5dpf_generate_result_file",
        "text": "Autogenerated DPF operator classes.\nhdf5dpf_generate_result_file"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion",
        "href": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion.html#get-base-and-duplicate-sectors-real-and-imaginary-results-for-modal-cyclic-symmetry",
        "title": "Get base and duplicate sectors (real and imaginary) results for modal cyclic symmetry",
        "section": "Get base and duplicate sectors (real and imaginary) results for modal cyclic symmetry",
        "text": "This example shows how to extract results from a modal cyclic symmetry model.\nCreate the model and display the state of the result.\nGet base and duplicate sectors (real and imaginary) results for modal cyclic symmetry"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion",
        "href": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion.html#get-base-and-duplicate-sectors-displacement-results",
        "title": "Get base and duplicate sectors (real and imaginary) results for modal cyclic symmetry > Get base and duplicate sectors displacement results",
        "section": "Get base and duplicate sectors displacement results",
        "text": "By default, the result providers (stress, displacement, and so on) will return results for\nbase and duplicate sectors for a cyclic symmetry model.\nThe output fields container print displays the organization of the different\nfields in the container. The label “base_sector” gives access to base sectors\nresults with base_sector=1 and duplicate sector with base_sector=0 for all\nmodes.\nThe print also displays that there is no duplicate sectors for the first 6 modes.\nIndeed, modes with harmonic index 0 have 0.0 displacement, stresses… on\nduplicate sectors.\nGet base and duplicate sectors displacement results"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion",
        "href": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion.html#get-displacement-results-on-the-first-sector-with-a-cyclic-phase",
        "title": "Get base and duplicate sectors (real and imaginary) results for modal cyclic symmetry > Get displacement results on the first sector with a cyclic phase",
        "section": "Get displacement results on the first sector with a cyclic phase",
        "text": "ansys.dpf.result.cyclic_expanded_displacement gives access\nto all cyclic expansion configuration. By default all sectors will be expanded.\nThe cyclic phase (in degree) can be changed with the phi argument.\nGet displacement results on the first sector with a cyclic phase\nansys.dpf.result.cyclic_expanded_displacement"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion",
        "href": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion.html#get-nodal-stress-results-on-the-first-sector-with-a-cyclic-phase",
        "title": "Get base and duplicate sectors (real and imaginary) results for modal cyclic symmetry > Get nodal stress results on the first sector with a cyclic phase",
        "section": "Get nodal stress results on the first sector with a cyclic phase",
        "text": "Get nodal stress results on the first sector with a cyclic phase"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion",
        "href": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion.html#get-elemental_nodal-stress-results-on-the-first-sector-with-a-cyclic-phase",
        "title": "Get base and duplicate sectors (real and imaginary) results for modal cyclic symmetry > Get elemental_nodal stress results on the first sector with a cyclic phase",
        "section": "Get elemental_nodal stress results on the first sector with a cyclic phase",
        "text": "Elemental nodal is the default result location for stress and strain.\nGet elemental_nodal stress results on the first sector with a cyclic phase"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion",
        "href": "examples/11-cyclic-symmetry/02-modal_cyclic_no_expansion.html#get-nodal-stress-results-expanded",
        "title": "Get base and duplicate sectors (real and imaginary) results for modal cyclic symmetry > Get nodal stress results expanded",
        "section": "Get nodal stress results expanded",
        "text": "Total running time of the script: (0 minutes 11.290 seconds)\nDownload Jupyter notebook: 02-modal_cyclic_no_expansion.ipynb\nDownload Python source code: 02-modal_cyclic_no_expansion.py\nDownload zipped: 02-modal_cyclic_no_expansion.zip\nGallery generated by Sphinx-Gallery\nGet nodal stress results expanded\nDownload Jupyter notebook: 02-modal_cyclic_no_expansion.ipynb\nDownload Python source code: 02-modal_cyclic_no_expansion.py\nDownload zipped: 02-modal_cyclic_no_expansion.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_band_pass",
        "href": "api/ansys.dpf.core.operators.filter.field_band_pass.html#field_band_pass",
        "title": "field_band_pass",
        "section": "field_band_pass",
        "text": "Autogenerated DPF operator classes.\nfield_band_pass"
    },
    {
        "objectID": "examples/06-plotting/04-plot_on_path",
        "href": "examples/06-plotting/04-plot_on_path.html#plot-results-on-a-specific-path",
        "title": "Plot results on a specific path",
        "section": "Plot results on a specific path",
        "text": "This example shows how to get a result mapped over a specific path\nand how to plot it.\nPlot results on a specific path"
    },
    {
        "objectID": "examples/06-plotting/04-plot_on_path",
        "href": "examples/06-plotting/04-plot_on_path.html#plot-path",
        "title": "Plot results on a specific path > Plot path",
        "section": "Plot path",
        "text": "Use the ansys.dpf.core.plotter.DpfPlotter class to plot a mapped\nresult over a defined path of coordinates.\nCreate a coordinates field to map on.\nCompute the mapped data using the mapping operator.\nRequest the mapped field data and its mesh.\nCreate the plotter and add fields and meshes.\nPlot the solution along the specified line. Note that since the line is only\nmoving along the y-axis, the stresses are plotted with respect to the y coordinate.\nTotal running time of the script: (0 minutes 1.751 seconds)\nDownload Jupyter notebook: 04-plot_on_path.ipynb\nDownload Python source code: 04-plot_on_path.py\nDownload zipped: 04-plot_on_path.zip\nGallery generated by Sphinx-Gallery\nPlot path\nansys.dpf.core.plotter.DpfPlotter\nDownload Jupyter notebook: 04-plot_on_path.ipynb\nDownload Python source code: 04-plot_on_path.py\nDownload zipped: 04-plot_on_path.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_XZ",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_XZ.html#elastic_strain_xz",
        "title": "elastic_strain_XZ",
        "section": "elastic_strain_XZ",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.total_pressure",
        "href": "api/ansys.dpf.core.operators.result.total_pressure.html#total_pressure",
        "title": "total_pressure",
        "section": "total_pressure",
        "text": "Autogenerated DPF operator classes.\ntotal_pressure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_principal_2",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_principal_2.html#thermal_strain_principal_2",
        "title": "thermal_strain_principal_2",
        "section": "thermal_strain_principal_2",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_principal_2"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_eqv_as_mechanical",
        "href": "api/ansys.dpf.core.operators.result.stress_eqv_as_mechanical.html#stress_eqv_as_mechanical",
        "title": "stress_eqv_as_mechanical",
        "section": "stress_eqv_as_mechanical",
        "text": "Autogenerated DPF operator classes.\nstress_eqv_as_mechanical"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.accumulate_over_label_fc",
        "href": "api/ansys.dpf.core.operators.math.accumulate_over_label_fc.html#accumulate_over_label_fc",
        "title": "accumulate_over_label_fc",
        "section": "accumulate_over_label_fc",
        "text": "Autogenerated DPF operator classes.\naccumulate_over_label_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_hamming_fc",
        "href": "api/ansys.dpf.core.operators.math.window_hamming_fc.html#window_hamming_fc",
        "title": "window_hamming_fc",
        "section": "window_hamming_fc",
        "text": "Autogenerated DPF operator classes.\nwindow_hamming_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_system_damping_energy",
        "href": "api/ansys.dpf.core.operators.result.global_system_damping_energy.html#global_system_damping_energy",
        "title": "global_system_damping_energy",
        "section": "global_system_damping_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_system_damping_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.interface_resultant_contact_force",
        "href": "api/ansys.dpf.core.operators.result.interface_resultant_contact_force.html#interface_resultant_contact_force",
        "title": "interface_resultant_contact_force",
        "section": "interface_resultant_contact_force",
        "text": "Autogenerated DPF operator classes.\ninterface_resultant_contact_force"
    },
    {
        "objectID": "examples/05-file-IO/00-hdf5_double_float_comparison",
        "href": "examples/05-file-IO/00-hdf5_double_float_comparison.html#hdf5-export-and-compare-precision",
        "title": "HDF5 export and compare precision",
        "section": "HDF5 export and compare precision",
        "text": "This example shows how to use HDF5 format to export and\ncompare simple precision versus double precision.\nImport the dpf-core module and its examples files, and then create a\ntemporary directory.\nCreate the model and get the stresses, displacements, and mesh.\nCreate the HDF5 export operator. The HDF5 module should already be loaded.\nConnect the correct time scoping to the results operators (stress\nand displacement).\nConnect inputs of the HDF5 export operator.\nDefine a temporary folder for outputs\nExport with simple precision.\nExport with double precision.\nDownload the resulting .h5 files if necessary\nCompare simple precision versus double precision.\nTotal running time of the script: (0 minutes 0.188 seconds)\nDownload Jupyter notebook: 00-hdf5_double_float_comparison.ipynb\nDownload Python source code: 00-hdf5_double_float_comparison.py\nDownload zipped: 00-hdf5_double_float_comparison.zip\nGallery generated by Sphinx-Gallery\nHDF5 export and compare precision\ndpf-core\nDownload Jupyter notebook: 00-hdf5_double_float_comparison.ipynb\nDownload Python source code: 00-hdf5_double_float_comparison.py\nDownload zipped: 00-hdf5_double_float_comparison.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_to_nodal",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_to_nodal.html#elemental_to_nodal",
        "title": "elemental_to_nodal",
        "section": "elemental_to_nodal",
        "text": "Autogenerated DPF operator classes.\nelemental_to_nodal"
    },
    {
        "objectID": "examples/05-file-IO/01-reduced_matrices_export",
        "href": "examples/05-file-IO/01-reduced_matrices_export.html#get-reduced-matrices-and-make-export",
        "title": "Get reduced matrices and make export",
        "section": "Get reduced matrices and make export",
        "text": "This example shows how to get reduced matrices and\nexport them to HDF5 and CSV files.\nImport the dpf-core module and its examples files, and then create a\ntemporary directory.\nCreate the operator and connect data sources.\nGet result fields container that contains the reduced matrices.\nDefine a temporary folder for outputs\nExport the result fields container to an HDF5 file.\nExport the result fields container to a CSV file.\nTotal running time of the script: (0 minutes 4.064 seconds)\nDownload Jupyter notebook: 01-reduced_matrices_export.ipynb\nDownload Python source code: 01-reduced_matrices_export.py\nDownload zipped: 01-reduced_matrices_export.zip\nGallery generated by Sphinx-Gallery\nGet reduced matrices and make export\ndpf-core\nDownload Jupyter notebook: 01-reduced_matrices_export.ipynb\nDownload Python source code: 01-reduced_matrices_export.py\nDownload zipped: 01-reduced_matrices_export.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_low_pass",
        "href": "api/ansys.dpf.core.operators.filter.field_low_pass.html#field_low_pass",
        "title": "field_low_pass",
        "section": "field_low_pass",
        "text": "Autogenerated DPF operator classes.\nfield_low_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.pressure",
        "href": "api/ansys.dpf.core.operators.result.pressure.html#pressure",
        "title": "pressure",
        "section": "pressure",
        "text": "Autogenerated DPF operator classes.\npressure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cplx_multiply",
        "href": "api/ansys.dpf.core.operators.math.cplx_multiply.html#cplx_multiply",
        "title": "cplx_multiply",
        "section": "cplx_multiply",
        "text": "Autogenerated DPF operator classes.\ncplx_multiply"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.members_in_compression_not_certified",
        "href": "api/ansys.dpf.core.operators.result.members_in_compression_not_certified.html#members_in_compression_not_certified",
        "title": "members_in_compression_not_certified",
        "section": "members_in_compression_not_certified",
        "text": "Autogenerated DPF operator classes.\nmembers_in_compression_not_certified"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.strain_from_voigt_fc",
        "href": "api/ansys.dpf.core.operators.utility.strain_from_voigt_fc.html#strain_from_voigt_fc",
        "title": "strain_from_voigt_fc",
        "section": "strain_from_voigt_fc",
        "text": "Autogenerated DPF operator classes.\nstrain_from_voigt_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.ascending_sort",
        "href": "api/ansys.dpf.core.operators.logic.ascending_sort.html#ascending_sort",
        "title": "ascending_sort",
        "section": "ascending_sort",
        "text": "Autogenerated DPF operator classes.\nascending_sort"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_max_shear",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_max_shear.html#plastic_strain_max_shear",
        "title": "plastic_strain_max_shear",
        "section": "plastic_strain_max_shear",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_max_shear"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.von_mises_eqv_fc",
        "href": "api/ansys.dpf.core.operators.invariant.von_mises_eqv_fc.html#von_mises_eqv_fc",
        "title": "von_mises_eqv_fc",
        "section": "von_mises_eqv_fc",
        "text": "Autogenerated DPF operator classes.\nvon_mises_eqv_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.fc_get_attribute",
        "href": "api/ansys.dpf.core.operators.utility.fc_get_attribute.html#fc_get_attribute",
        "title": "fc_get_attribute",
        "section": "fc_get_attribute",
        "text": "Autogenerated DPF operator classes.\nfc_get_attribute"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_signed_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.field_signed_high_pass.html#field_signed_high_pass",
        "title": "field_signed_high_pass",
        "section": "field_signed_high_pass",
        "text": "Autogenerated DPF operator classes.\nfield_signed_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.eigen_values_fc",
        "href": "api/ansys.dpf.core.operators.invariant.eigen_values_fc.html#eigen_values_fc",
        "title": "eigen_values_fc",
        "section": "eigen_values_fc",
        "text": "Autogenerated DPF operator classes.\neigen_values_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.entity_extractor",
        "href": "api/ansys.dpf.core.operators.math.entity_extractor.html#entity_extractor",
        "title": "entity_extractor",
        "section": "entity_extractor",
        "text": "Autogenerated DPF operator classes.\nentity_extractor"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.element_orientations_X",
        "href": "api/ansys.dpf.core.operators.result.element_orientations_X.html#element_orientations_x",
        "title": "element_orientations_X",
        "section": "element_orientations_X",
        "text": "Autogenerated DPF operator classes.\nelement_orientations_X"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#contributing",
        "title": "Contributing",
        "section": "Contributing",
        "text": "Overall guidance on contributing to a PyAnsys repository appears in\nContribute\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyDPF-Core.\nThe following contribution information is specific to PyDPF-Core.\nContributing"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#clone-the-repository",
        "title": "Contributing > Clone the repository",
        "section": "Clone the repository",
        "text": "Clone and install the latest version of PyDPF-Core in\ndevelopment mode by running this code:\nClone the repository"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#post-issues",
        "title": "Contributing > Post issues",
        "section": "Post issues",
        "text": "Use the PyDPF-Core Issues\npage to submit questions, report bugs, and request new features.\nTo reach the project support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#view-documentation",
        "title": "Contributing > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release of PyDPF-Core is hosted at\nPyDPF-Core Documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView documentation"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.ln",
        "href": "api/ansys.dpf.core.operators.math.ln.html#ln",
        "title": "ln",
        "section": "ln",
        "text": "Autogenerated DPF operator classes.\nln"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cplx_derive",
        "href": "api/ansys.dpf.core.operators.math.cplx_derive.html#cplx_derive",
        "title": "cplx_derive",
        "section": "cplx_derive",
        "text": "Autogenerated DPF operator classes.\ncplx_derive"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.scoping_low_pass",
        "href": "api/ansys.dpf.core.operators.filter.scoping_low_pass.html#scoping_low_pass",
        "title": "scoping_low_pass",
        "section": "scoping_low_pass",
        "text": "Autogenerated DPF operator classes.\nscoping_low_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_volume",
        "href": "api/ansys.dpf.core.operators.result.cyclic_volume.html#cyclic_volume",
        "title": "cyclic_volume",
        "section": "cyclic_volume",
        "text": "Autogenerated DPF operator classes.\ncyclic_volume"
    },
    {
        "objectID": "api/ansys.dpf.core.mesh_info",
        "href": "api/ansys.dpf.core.mesh_info.html#meshinfo",
        "title": "MeshInfo",
        "section": "MeshInfo",
        "text": "MeshInfo"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.segalman_von_mises_eqv",
        "href": "api/ansys.dpf.core.operators.invariant.segalman_von_mises_eqv.html#segalman_von_mises_eqv",
        "title": "segalman_von_mises_eqv",
        "section": "segalman_von_mises_eqv",
        "text": "Autogenerated DPF operator classes.\nsegalman_von_mises_eqv"
    },
    {
        "objectID": "examples/04-advanced/13-manage_licensing",
        "href": "examples/04-advanced/13-manage_licensing.html#manage-the-dpf-licensing-logic-using-the-server-context",
        "title": "Manage the DPF licensing logic using the server context",
        "section": "Manage the DPF licensing logic using the server context",
        "text": "This example shows how to manage the licensing logic of a DPF server using a ServerContext.\nYou can prevent DPF from checking licenses out and blocking increments by using the\nEntry context.\nYou cannot start a new InProcess server, as starting an InProcess server means linking\nthe DPF binaries to your current Python process. If your local InProcess server is already\nset to Premium, you cannot set it back to Entry.\nSince InProcess is the default server type, put the commands to set the Entry server\ncontext at the start of your script.\nThis example requires DPF 6.1 (Ansys 2023R2) or above.\nFor more information, see ref_compatibility.\nStart a server as Entry to prevent using licensed operators\nCreate a dummy Field\nOperators with the Entry context\nOperators with the Premium context\nWhen Premium, using a LicenseContextManaged allows you to control your interaction with a license\nIt gives direct control over when the license check-out and check-in occur, as well as which\nlicense increment is used, and for what maximum duration.\nTotal running time of the script: (0 minutes 11.929 seconds)\nDownload Jupyter notebook: 13-manage_licensing.ipynb\nDownload Python source code: 13-manage_licensing.py\nDownload zipped: 13-manage_licensing.zip\nGallery generated by Sphinx-Gallery\nManage the DPF licensing logic using the server context\nInProcess\nInProcess\nInProcess\nInProcess\nDownload Jupyter notebook: 13-manage_licensing.ipynb\nDownload Python source code: 13-manage_licensing.py\nDownload zipped: 13-manage_licensing.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.rms_static_pressure",
        "href": "api/ansys.dpf.core.operators.result.rms_static_pressure.html#rms_static_pressure",
        "title": "rms_static_pressure",
        "section": "rms_static_pressure",
        "text": "Autogenerated DPF operator classes.\nrms_static_pressure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.solid_shell_fields",
        "href": "api/ansys.dpf.core.operators.logic.solid_shell_fields.html#solid_shell_fields",
        "title": "solid_shell_fields",
        "section": "solid_shell_fields",
        "text": "Autogenerated DPF operator classes.\nsolid_shell_fields"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#working-with-a-result-file",
        "title": "Working with a result file",
        "section": "Working with a result file",
        "text": "This example shows how to write and upload files on the server machine and then\ndownload them back on the client side. The resulting fields container is then\nexported to a CSV file.\nLoad a model from the DPF-Core examples:\nansys.dpf.core module.\nWorking with a result file\nansys.dpf.core"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#get-and-plot-the-fields-container-for-the-result",
        "title": "Working with a result file > Get and plot the fields container for the result",
        "section": "Get and plot the fields container for the result",
        "text": "Get the fields container for the result and plot it so you can compare it later:\nGet and plot the fields container for the result"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#export-result",
        "title": "Working with a result file > Export result",
        "section": "Export result",
        "text": "Export the fields container in the CSV format:\nExport result"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#download-csv-result-file",
        "title": "Working with a result file > Download CSV result file",
        "section": "Download CSV result file",
        "text": "Download the file simple_bar_fc.csv:\nDownload CSV result file\nsimple_bar_fc.csv"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#load-csv-result-file-as-operator-input",
        "title": "Working with a result file > Load CSV result file as operator input",
        "section": "Load CSV result file as operator input",
        "text": "Load the fields container contained in the CSV file as an operator input:\nLoad CSV result file as operator input"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#make-operations-over-the-fields-container",
        "title": "Working with a result file > Make operations over the fields container",
        "section": "Make operations over the fields container",
        "text": "Use this fields container to get the minimum displacement:\nMake operations over the fields container"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#compare-the-original-and-the-new-fields-container",
        "title": "Working with a result file > Compare the original and the new fields container",
        "section": "Compare the original and the new fields container",
        "text": "Subtract the two fields and plot an error map:\nCompare the original and the new fields container"
    },
    {
        "objectID": "examples/05-file-IO/04-basic-load-file",
        "href": "examples/05-file-IO/04-basic-load-file.html#plot-both-absolute-and-relative-error-fields",
        "title": "Working with a result file > Plot both absolute and relative error fields",
        "section": "Plot both absolute and relative error fields",
        "text": "Note that the absolute error is bigger where the displacements are\nbigger, at the tip of the geometry.\nInstead, the relative error is similar across the geometry since we\nare dividing by the displacements fc_out.\nBoth plots show errors that can be understood as zero due to machine precision\n(1e-12 mm for the absolute error and 1e-5% for the relative error).\nTotal running time of the script: (0 minutes 12.975 seconds)\nDownload Jupyter notebook: 04-basic-load-file.ipynb\nDownload Python source code: 04-basic-load-file.py\nDownload zipped: 04-basic-load-file.zip\nGallery generated by Sphinx-Gallery\nPlot both absolute and relative error fields\nfc_out\nDownload Jupyter notebook: 04-basic-load-file.ipynb\nDownload Python source code: 04-basic-load-file.py\nDownload zipped: 04-basic-load-file.zip"
    },
    {
        "objectID": "user_guide/concepts/index",
        "href": "user_guide/concepts/index.html#concepts",
        "title": "Concepts",
        "section": "Concepts",
        "text": "This section provides in-depth descriptions and explanations of DPF concepts, including terminology.\nConcepts"
    },
    {
        "objectID": "examples/06-plotting/sg_execution_times",
        "href": "examples/06-plotting/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "01:09.848 total execution time for 8 files from examples06-plotting:\nExample\nTime\nMem (MB)\nsphx_glr_examples_06-plotting_00-basic_plotting.py (00-basic_plotting.py)\n00:21.997\n0.0\nsphx_glr_examples_06-plotting_06-animate_results.py (06-animate_results.py)\n00:16.451\n0.0\nsphx_glr_examples_06-plotting_05-plot_on_warped_mesh.py (05-plot_on_warped_mesh.py)\n00:14.641\n0.0\nsphx_glr_examples_06-plotting_07-plot_on_geometries.py (07-plot_on_geometries.py)\n00:09.239\n0.0\nsphx_glr_examples_06-plotting_03-labels.py (03-labels.py)\n00:02.907\n0.0\nsphx_glr_examples_06-plotting_04-plot_on_path.py (04-plot_on_path.py)\n00:01.751\n0.0\nsphx_glr_examples_06-plotting_01-compare_results.py (01-compare_results.py)\n00:01.438\n0.0\nsphx_glr_examples_06-plotting_02-solution_combination.py (02-solution_combination.py)\n00:01.423\n0.0\nComputation times\n00-basic_plotting.py\n06-animate_results.py\n05-plot_on_warped_mesh.py\n07-plot_on_geometries.py\n03-labels.py\n04-plot_on_path.py\n01-compare_results.py\n02-solution_combination.py"
    },
    {
        "objectID": "api/ansys.dpf.core.runtime_config",
        "href": "api/ansys.dpf.core.runtime_config.html#runtimeconfig",
        "title": "RuntimeConfig",
        "section": "RuntimeConfig",
        "text": "RuntimeConfig"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_signed_high_pass_fc",
        "href": "api/ansys.dpf.core.operators.filter.field_signed_high_pass_fc.html#field_signed_high_pass_fc",
        "title": "field_signed_high_pass_fc",
        "section": "field_signed_high_pass_fc",
        "text": "Autogenerated DPF operator classes.\nfield_signed_high_pass_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.set_attribute",
        "href": "api/ansys.dpf.core.operators.utility.set_attribute.html#set_attribute",
        "title": "set_attribute",
        "section": "set_attribute",
        "text": "Autogenerated DPF operator classes.\nset_attribute"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.min_max_over_time",
        "href": "api/ansys.dpf.core.operators.math.min_max_over_time.html#min_max_over_time",
        "title": "min_max_over_time",
        "section": "min_max_over_time",
        "text": "Autogenerated DPF operator classes.\nmin_max_over_time"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.elements_facets_surfaces_over_time",
        "href": "api/ansys.dpf.core.operators.geo.elements_facets_surfaces_over_time.html#elements_facets_surfaces_over_time",
        "title": "elements_facets_surfaces_over_time",
        "section": "elements_facets_surfaces_over_time",
        "text": "Autogenerated DPF operator classes.\nelements_facets_surfaces_over_time"
    },
    {
        "objectID": "examples/12-fluids/02-fluids_results",
        "href": "examples/12-fluids/02-fluids_results.html#explore-fluids-results",
        "title": "Explore Fluids results",
        "section": "Explore Fluids results",
        "text": "This example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nExplore Fluids results"
    },
    {
        "objectID": "examples/12-fluids/02-fluids_results",
        "href": "examples/12-fluids/02-fluids_results.html#exploring-ansys-fluent-results",
        "title": "Explore Fluids results > Exploring Ansys Fluent results",
        "section": "Exploring Ansys Fluent results",
        "text": "This example demonstrates how you can explore Ansys Fluent results. Import\nthe result file and explore the available results with the ResultInfo .\nExploring Ansys Fluent results\nResultInfo"
    },
    {
        "objectID": "examples/12-fluids/02-fluids_results",
        "href": "examples/12-fluids/02-fluids_results.html#explore-elemental-cell-results",
        "title": "Explore Fluids results > Explore elemental (cell) results",
        "section": "Explore elemental (cell) results",
        "text": "Dynamic viscosity is a result naturally exported to the centroids of the\nelements in this Fluent model. In addition, it is available for zone 1\nbut for all phases. If no region_scoping is connected to the results extraction\noperator, the result is extracted for all cell zones and exported to an\nElemental Field. Elemental results do not bring their MeshSupport by\ndefault, and thus the mesh input can be employed to connect the MeshedRegion\nand display the result.\nThe result extraction can be tailored to a specific subset of cells employing\nthe mesh_scoping pin and connecting an Elemental Scoping. Similarly, a nodal\nScoping can be connected to reconstruct the results to the nodes. The nodal\nreconstruction algorithm is based on Frink’s Laplacian method, and is outlined\nin the Technical Report AIAA-94-0061, “Recent Progress Toward a Three-Dimensional\nUnstructured Navier-Stokes Flow Solver”. In this sense, Elemental and Nodal\nresults can be compared.\nThe result extraction can also be tailored to a specific set of phases, zones and\nspecies employing the qualifiers ellipsis pins and connecting a LabelSpace. Each\npin in the qualifiers ellipsis (1000, 1001, …) allows you to connect a LabelSpace\nwith the desired IDs in “zone”, “phase” and/or “species”. In this particular\nexample, only “phase” is applicable.\nExplore elemental (cell) results\nField\nMeshSupport"
    },
    {
        "objectID": "examples/12-fluids/02-fluids_results",
        "href": "examples/12-fluids/02-fluids_results.html#explore-face-results",
        "title": "Explore Fluids results > Explore face results",
        "section": "Explore face results",
        "text": "Mass Flow rate is a result naturally exported to the centroids of the\nfaces in this Fluent model. It is available for several face zones. If no\nregion_scoping is connected to the results extraction operator, the result is\nextracted for all face zones (excluding interior zones), and exported to a\nFaces Field. Face results defined on all face zones bring their\nMeshSupport by default.\nAs this result is defined for several zones, the region_scoping pin can be used\nto extract a subset of them. We can get for example the mass flow rate for all\ninlets and outlets of the model. Face results defined on individual zones need\nthe connection of the mesh pin to retrieve their right mesh_support. In particular,\nthe connected entity should be a MeshesContainer labelled on zone. This is the\noutput from the meshes_provider operator, as seen in ref_fluids_mesh .\nTo filter a particular phase for a certain selection of zones, the qualifiers\npin can be used.\nExplore face results\nField\nMeshSupport\nMeshesContainer"
    },
    {
        "objectID": "examples/12-fluids/02-fluids_results",
        "href": "examples/12-fluids/02-fluids_results.html#explore-elementalandfaces-results",
        "title": "Explore Fluids results > Explore ElementalAndFaces results",
        "section": "Explore ElementalAndFaces results",
        "text": "ElementalAndFaces results are the ones that are exported to both the centroids\nof the elements and the faces. The same extraction possibilities discussed in\nthe previous sections are applicable to these results. For example, Velocity\nis available for several cell and face zones. If no region_scoping is connected\nto the results extraction operator, the result is extracted for all cell zones,\nand exported to an Elemental Field (thus, the behavior for Elemental results\nis replicated). ElementalAndFaces results do not bring their MeshSupport by\ndefault, and thus the mesh input can be employed to connect the MeshedRegion\nand display the result.\nBuilding upon the concepts from the previous sections, the several velocity\nFields will be extracted and compared.\nAs observed, the reconstructed velocities at the nodes are different when cell\ncentroidal and face centroidal values were used to average them.\nTotal running time of the script: (0 minutes 15.493 seconds)\nDownload Jupyter notebook: 02-fluids_results.ipynb\nDownload Python source code: 02-fluids_results.py\nDownload zipped: 02-fluids_results.zip\nGallery generated by Sphinx-Gallery\nExplore ElementalAndFaces results\nField\nMeshSupport\nDownload Jupyter notebook: 02-fluids_results.ipynb\nDownload Python source code: 02-fluids_results.py\nDownload zipped: 02-fluids_results.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.csv_to_field",
        "href": "api/ansys.dpf.core.operators.serialization.csv_to_field.html#csv_to_field",
        "title": "csv_to_field",
        "section": "csv_to_field",
        "text": "Autogenerated DPF operator classes.\ncsv_to_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.to_nodal_fc",
        "href": "api/ansys.dpf.core.operators.averaging.to_nodal_fc.html#to_nodal_fc",
        "title": "to_nodal_fc",
        "section": "to_nodal_fc",
        "text": "Autogenerated DPF operator classes.\nto_nodal_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.mesh_property_provider",
        "href": "api/ansys.dpf.core.operators.metadata.mesh_property_provider.html#mesh_property_provider",
        "title": "mesh_property_provider",
        "section": "mesh_property_provider",
        "text": "Autogenerated DPF operator classes.\nmesh_property_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.meshed_region",
        "href": "api/ansys.dpf.core.meshed_region.html#meshedregion",
        "title": "MeshedRegion",
        "section": "MeshedRegion",
        "text": "MeshedRegion"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant",
        "href": "api/ansys.dpf.core.operators.invariant.html#ansysdpfcoreoperatorsinvariant-package",
        "title": "ansys.dpf.core.operators.invariant package",
        "section": "ansys.dpf.core.operators.invariant package",
        "text": "ansys.dpf.core.operators.invariant package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant",
        "href": "api/ansys.dpf.core.operators.invariant.html#submodules",
        "title": "ansys.dpf.core.operators.invariant package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant",
        "href": "api/ansys.dpf.core.operators.invariant.html#module-contents",
        "title": "ansys.dpf.core.operators.invariant package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization",
        "href": "api/ansys.dpf.core.operators.serialization.html#ansysdpfcoreoperatorsserialization-package",
        "title": "ansys.dpf.core.operators.serialization package",
        "section": "ansys.dpf.core.operators.serialization package",
        "text": "ansys.dpf.core.operators.serialization package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization",
        "href": "api/ansys.dpf.core.operators.serialization.html#submodules",
        "title": "ansys.dpf.core.operators.serialization package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization",
        "href": "api/ansys.dpf.core.operators.serialization.html#module-contents",
        "title": "ansys.dpf.core.operators.serialization package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.accumulate_fc",
        "href": "api/ansys.dpf.core.operators.math.accumulate_fc.html#accumulate_fc",
        "title": "accumulate_fc",
        "section": "accumulate_fc",
        "text": "Autogenerated DPF operator classes.\naccumulate_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.tangential_contact_force",
        "href": "api/ansys.dpf.core.operators.result.tangential_contact_force.html#tangential_contact_force",
        "title": "tangential_contact_force",
        "section": "tangential_contact_force",
        "text": "Autogenerated DPF operator classes.\ntangential_contact_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.superficial_velocity",
        "href": "api/ansys.dpf.core.operators.result.superficial_velocity.html#superficial_velocity",
        "title": "superficial_velocity",
        "section": "superficial_velocity",
        "text": "Autogenerated DPF operator classes.\nsuperficial_velocity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_triangular",
        "href": "api/ansys.dpf.core.operators.math.window_triangular.html#window_triangular",
        "title": "window_triangular",
        "section": "window_triangular",
        "text": "Autogenerated DPF operator classes.\nwindow_triangular"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.mac",
        "href": "api/ansys.dpf.core.operators.math.mac.html#mac",
        "title": "mac",
        "section": "mac",
        "text": "Autogenerated DPF operator classes.\nmac"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.on_property",
        "href": "api/ansys.dpf.core.operators.scoping.on_property.html#on_property",
        "title": "on_property",
        "section": "on_property",
        "text": "Autogenerated DPF operator classes.\non_property"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_deformation_XZ",
        "href": "api/ansys.dpf.core.operators.result.gasket_deformation_XZ.html#gasket_deformation_xz",
        "title": "gasket_deformation_XZ",
        "section": "gasket_deformation_XZ",
        "text": "Autogenerated DPF operator classes.\ngasket_deformation_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.add",
        "href": "api/ansys.dpf.core.operators.math.add.html#add",
        "title": "add",
        "section": "add",
        "text": "Autogenerated DPF operator classes.\nadd"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_eqv",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_eqv.html#plastic_strain_eqv",
        "title": "plastic_strain_eqv",
        "section": "plastic_strain_eqv",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_eqv"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_principal_3",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_principal_3.html#plastic_strain_principal_3",
        "title": "plastic_strain_principal_3",
        "section": "plastic_strain_principal_3",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_principal_3"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timefreq_low_pass",
        "href": "api/ansys.dpf.core.operators.filter.timefreq_low_pass.html#timefreq_low_pass",
        "title": "timefreq_low_pass",
        "section": "timefreq_low_pass",
        "text": "Autogenerated DPF operator classes.\ntimefreq_low_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.spectrum_data",
        "href": "api/ansys.dpf.core.operators.result.spectrum_data.html#spectrum_data",
        "title": "spectrum_data",
        "section": "spectrum_data",
        "text": "Autogenerated DPF operator classes.\nspectrum_data"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.serializer",
        "href": "api/ansys.dpf.core.operators.serialization.serializer.html#serializer",
        "title": "serializer",
        "section": "serializer",
        "text": "Autogenerated DPF operator classes.\nserializer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_3",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_3.html#compute_total_strain_3",
        "title": "compute_total_strain_3",
        "section": "compute_total_strain_3",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_3"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_relative_rotation",
        "href": "api/ansys.dpf.core.operators.result.joint_relative_rotation.html#joint_relative_rotation",
        "title": "joint_relative_rotation",
        "section": "joint_relative_rotation",
        "text": "Autogenerated DPF operator classes.\njoint_relative_rotation"
    },
    {
        "objectID": "user_guide/how_to",
        "href": "user_guide/how_to.html#how-tos",
        "title": "How-tos",
        "section": "How-tos",
        "text": "How-tos"
    },
    {
        "objectID": "index",
        "href": "index.html#pydpf-core",
        "title": "PyDPF-Core",
        "section": "PyDPF-Core",
        "text": "Ansys Data Processing Framework (DPF) provides numerical simulation\nusers and engineers with a toolbox for accessing and transforming simulation\ndata. With DPF, you can perform complex preprocessing or postprocessing of\nlarge amounts of simulation data within a simulation workflow.\nDPF is an independent, physics-agnostic tool that you can plug into many\napps for both data input and data output, including visualization and\nresult plots. The following table shows an exhaustive list of supported\napps by DPF and their related formats:\nSolver\nFile format\nServer version\nDPF examples\nMAPDL\nref_basic_example\nLS DYNA\n.d3plot, .binout\nexamples_lsdyna\nFluent\nref_fluids_model\nref_fluids_mesh\nref_fluids_results\nCFX\nexamples_cfx\nref_fluids_model\nref_fluids_mesh\nref_fluids_results\nVisualisation is ensured by VTK and leverages PyVista tools.\nUsing the many DPF operators that are available, you can manipulate and\ntransform this data. You can also chain operators together to create simple\nor complex data-processing workflows that you can reuse for repeated or\nfuture evaluations.\nThe data in DPF is defined based on physics-agnostic mathematical quantities\ndescribed in self-sufficient entities called fields. This allows DPF to be\na modular and easy-to-use tool with a large range of capabilities.\nThe ansys.dpf.core package provides a Python interface to DPF, enabling\nrapid postprocessing of a variety of Ansys file formats and physics solutions\nwithout ever leaving the Python environment.\nPyDPF-Core\nansys.dpf.core"
    },
    {
        "objectID": "index",
        "href": "index.html#brief-demo",
        "title": "PyDPF-Core > Brief demo",
        "section": "Brief demo",
        "text": "Here is how you open a result file generated by MAPDL (or another ANSYS solver)\nand extract results:\nHere is how you plot displacement results:\nFor comprehensive examples of how you use PyDPF-Core, see gallery.\nBrief demo"
    },
    {
        "objectID": "index",
        "href": "index.html#key-features",
        "title": "PyDPF-Core > Key features",
        "section": "Key features",
        "text": "Computational efficiency\nDPF is a modern framework based on new hardware architectures. Thanks\nto continued development, new capabilities are frequently added.\nGeneric interface\nDPF is physics-agnostic, which means that its use is not limited to a particular\nfield, physics solution, or file format.\nExtensibility and customization\nDPF is developed around two core entities:\nData represented as a field\nAn operator to act upon this data\nEach DPF capability is developed through operators that allow for componentization\nof the framework. Because DPF is plugin-based, new features or formats can be easily added.\nKey features"
    },
    {
        "objectID": "index",
        "href": "index.html#accessing-and-enriching-dpf-capabilities",
        "title": "PyDPF-Core > Accessing and enriching DPF capabilities",
        "section": "Accessing and enriching DPF capabilities",
        "text": "Most of the DPF capabilities can be accessed using the operators.\nFor more information, see ref_dpf_operators_reference.\nDPF also follows a licensing strategy detailed in ref_licensing.\nThe following sections are summaries. For more information, see user_guide_waysofusing.\nAccessing DPF Server files\nDPF capabilities are accessible when DPF Server files are available. These files can be accessed using\nthe Ansys installer and DPF Server.\nTo use the Ansys installer, download the standard Ansys installation using your preferred\ndistribution channel, and install Ansys following the installer instructions. For information\non getting a licensed copy of Ansys, visit the Ansys website.\nThe DPF Server package is independent of the Ansys installer. For more information, see\nref_dpf_server.\nAccessing capabilities with scripting\nC++ documentation:\nOn the Developer Documentation page of the Ansys Developer portal,\nsee Data Processing Framework (DPF).\nPyDPF documentation:\nPyDPF-Core documentation\nPyDPF-Post documentation\nMechanical scripting (IronPython):\nData Processing Framework\nin the Scripting in Mechanical Guide.\nPython Result\nin the Mechanical User’s Guide.\nEnriching DPF capabilities\nUser guide in the DPF C++ Client Library\nuser_guide_custom_operators in the PyDPF-Core documentation\nHow to write a new solver reader as a DPF plugin\nAccessing and enriching DPF capabilities"
    },
    {
        "objectID": "index",
        "href": "index.html#documentation-and-issues",
        "title": "PyDPF-Core > Documentation and issues",
        "section": "Documentation and issues",
        "text": "Documentation for the latest stable release of PyDPF-Core is hosted at PyDPF-Core documentation.\nIn the upper right corner of the documentation’s title bar, there is an option for switching from\nviewing the documentation for the latest stable release to viewing the documentation for the\ndevelopment version or previously released versions.\nYou can also view or\ndownload the\nPyDPF-Core cheat sheet. This one-page reference provides syntax rules and commands\nfor using PyDPF-Core.\nOn the PyDPF-Core Issues page,\nyou can create issues to report bugs and request new features. On the PyDPF-Core Discussions page or the Discussions\npage on the Ansys Developer portal, you can post questions, share ideas, and get community feedback.\nTo reach the project support team, email pyansys.core@ansys.com.\nDocumentation and issues"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.make_overall",
        "href": "api/ansys.dpf.core.operators.utility.make_overall.html#make_overall",
        "title": "make_overall",
        "section": "make_overall",
        "text": "Autogenerated DPF operator classes.\nmake_overall"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_XY",
        "href": "api/ansys.dpf.core.operators.result.stress_XY.html#stress_xy",
        "title": "stress_XY",
        "section": "stress_XY",
        "text": "Autogenerated DPF operator classes.\nstress_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.turbulent_kinetic_energy",
        "href": "api/ansys.dpf.core.operators.result.turbulent_kinetic_energy.html#turbulent_kinetic_energy",
        "title": "turbulent_kinetic_energy",
        "section": "turbulent_kinetic_energy",
        "text": "Autogenerated DPF operator classes.\nturbulent_kinetic_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.norm_fc",
        "href": "api/ansys.dpf.core.operators.math.norm_fc.html#norm_fc",
        "title": "norm_fc",
        "section": "norm_fc",
        "text": "Autogenerated DPF operator classes.\nnorm_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_penetration",
        "href": "api/ansys.dpf.core.operators.result.contact_penetration.html#contact_penetration",
        "title": "contact_penetration",
        "section": "contact_penetration",
        "text": "Autogenerated DPF operator classes.\ncontact_penetration"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mean_temperature",
        "href": "api/ansys.dpf.core.operators.result.mean_temperature.html#mean_temperature",
        "title": "mean_temperature",
        "section": "mean_temperature",
        "text": "Autogenerated DPF operator classes.\nmean_temperature"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_velocity",
        "href": "api/ansys.dpf.core.operators.result.global_velocity.html#global_velocity",
        "title": "global_velocity",
        "section": "global_velocity",
        "text": "Autogenerated DPF operator classes.\nglobal_velocity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_collections",
        "href": "api/ansys.dpf.core.operators.utility.merge_collections.html#merge_collections",
        "title": "merge_collections",
        "section": "merge_collections",
        "text": "Autogenerated DPF operator classes.\nmerge_collections"
    },
    {
        "objectID": "examples/02-modal_analyses/00-compare_modes",
        "href": "examples/02-modal_analyses/00-compare_modes.html#use-result-helpers-to-compare-mode-shapes-for-solids-and-then-shells",
        "title": "Use Result Helpers to compare mode shapes for solids and then shells",
        "section": "Use Result Helpers to compare mode shapes for solids and then shells",
        "text": "The Result class which instances\nare created by the Model gives access to\nhelpers to request results on specific mesh and time scopings.\nWith those helpers, working on a custom spatial and temporal subset of the\nmodel is straightforward.\nFirst, create a model object to establish a connection with an\nexample result file\nUse Result Helpers to compare mode shapes for solids and then shells\nResult\nModel"
    },
    {
        "objectID": "examples/02-modal_analyses/00-compare_modes",
        "href": "examples/02-modal_analyses/00-compare_modes.html#visualize-specific-mode-shapes",
        "title": "Use Result Helpers to compare mode shapes for solids and then shells > Visualize specific mode shapes",
        "section": "Visualize specific mode shapes",
        "text": "Choose the modes to visualize\nChoose to split the displacement on solid/shell/beam to only focus on shell\nelements\nChoose to split the displacement on solid/shell/beam to only focus on solid\nelements\nTotal running time of the script: (0 minutes 13.933 seconds)\nDownload Jupyter notebook: 00-compare_modes.ipynb\nDownload Python source code: 00-compare_modes.py\nDownload zipped: 00-compare_modes.zip\nGallery generated by Sphinx-Gallery\nVisualize specific mode shapes\nDownload Jupyter notebook: 00-compare_modes.ipynb\nDownload Python source code: 00-compare_modes.py\nDownload zipped: 00-compare_modes.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_eqv",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_eqv.html#elastic_strain_eqv",
        "title": "elastic_strain_eqv",
        "section": "elastic_strain_eqv",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_eqv"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math",
        "href": "api/ansys.dpf.core.operators.math.html#ansysdpfcoreoperatorsmath-package",
        "title": "ansys.dpf.core.operators.math package",
        "section": "ansys.dpf.core.operators.math package",
        "text": "ansys.dpf.core.operators.math package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math",
        "href": "api/ansys.dpf.core.operators.math.html#submodules",
        "title": "ansys.dpf.core.operators.math package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math",
        "href": "api/ansys.dpf.core.operators.math.html#module-contents",
        "title": "ansys.dpf.core.operators.math package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.elements",
        "href": "api/ansys.dpf.core.elements.html#elements",
        "title": "Elements",
        "section": "Elements",
        "text": "Elements"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.run",
        "href": "api/ansys.dpf.core.operators.result.run.html#run",
        "title": "run",
        "section": "run",
        "text": "Autogenerated DPF operator classes.\nrun"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_kinetic_energy",
        "href": "api/ansys.dpf.core.operators.result.part_kinetic_energy.html#part_kinetic_energy",
        "title": "part_kinetic_energy",
        "section": "part_kinetic_energy",
        "text": "Autogenerated DPF operator classes.\npart_kinetic_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.extract_sub_sc",
        "href": "api/ansys.dpf.core.operators.utility.extract_sub_sc.html#extract_sub_sc",
        "title": "extract_sub_sc",
        "section": "extract_sub_sc",
        "text": "Autogenerated DPF operator classes.\nextract_sub_sc"
    },
    {
        "objectID": "examples/07-distributed-post/00-distributed_total_disp",
        "href": "examples/07-distributed-post/00-distributed_total_disp.html#postprocessing-of-displacement-on-distributed-processes",
        "title": "Postprocessing of displacement on distributed processes",
        "section": "Postprocessing of displacement on distributed processes",
        "text": "This diagram helps you to understand this example. It shows\nthe operator chain that is used to compute the final result.\nImport the dpf-core module and its examples files.\nConfigure the servers.\nMake a list of IP addresses and port numbers that DPF servers start and\nlisten on. Operator instances are created on each of these servers so that\neach can address a different result file.\nThis example postprocesses an analysis distributed in two files.\nConsequently, it requires two remote processes.\nTo make it easier, this example starts local servers. However, you can\nconnect to any existing servers on your network.\nPrint the IP addresses and ports.\nSend files to the temporary directory if they are not in shared memory.\nPostprocessing of displacement on distributed processes\ndpf-core"
    },
    {
        "objectID": "examples/07-distributed-post/00-distributed_total_disp",
        "href": "examples/07-distributed-post/00-distributed_total_disp.html#create-operators-on-each-server",
        "title": "Postprocessing of displacement on distributed processes > Create operators on each server",
        "section": "Create operators on each server",
        "text": "On each server, create two operators, one for displacement computations\nand one for norm computations. Define their data sources:\nCreate operators on each server"
    },
    {
        "objectID": "examples/07-distributed-post/00-distributed_total_disp",
        "href": "examples/07-distributed-post/00-distributed_total_disp.html#create-an-operator-to-merge-results",
        "title": "Postprocessing of displacement on distributed processes > Create an operator to merge results",
        "section": "Create an operator to merge results",
        "text": "Create the merge_fields_containers operator to merge the results.\nCreate an operator to merge results\nmerge_fields_containers"
    },
    {
        "objectID": "examples/07-distributed-post/00-distributed_total_disp",
        "href": "examples/07-distributed-post/00-distributed_total_disp.html#connect-the-operators-together-and-get-the-output",
        "title": "Postprocessing of displacement on distributed processes > Connect the operators together and get the output",
        "section": "Connect the operators together and get the output",
        "text": "Total running time of the script: (0 minutes 5.425 seconds)\nDownload Jupyter notebook: 00-distributed_total_disp.ipynb\nDownload Python source code: 00-distributed_total_disp.py\nDownload zipped: 00-distributed_total_disp.zip\nGallery generated by Sphinx-Gallery\nConnect the operators together and get the output\nDownload Jupyter notebook: 00-distributed_total_disp.ipynb\nDownload Python source code: 00-distributed_total_disp.py\nDownload zipped: 00-distributed_total_disp.zip"
    },
    {
        "objectID": "examples/04-advanced/00-multistage_advanced_options",
        "href": "examples/04-advanced/00-multistage_advanced_options.html#multi-stage-cyclic-symmetry-using-advanced-customization",
        "title": "Multi-stage cyclic symmetry using advanced customization",
        "section": "Multi-stage cyclic symmetry using advanced customization",
        "text": "This example shows how to expand on selected sectors the mesh and results\nfrom a multi-stage cyclic analysis. It also shows how to use the cyclic support\nfor advanced postprocessing\nCreate the model and display the state of the result.\nCheck the result info to verify that it’s a multi-stage model\nGo over the cyclic support\nMulti-stage cyclic symmetry using advanced customization"
    },
    {
        "objectID": "examples/04-advanced/00-multistage_advanced_options",
        "href": "examples/04-advanced/00-multistage_advanced_options.html#expand-displacement-results",
        "title": "Multi-stage cyclic symmetry using advanced customization > Expand displacement results",
        "section": "Expand displacement results",
        "text": "This example expands displacement results on chosen sectors.\nExpand displacement results"
    },
    {
        "objectID": "examples/04-advanced/00-multistage_advanced_options",
        "href": "examples/04-advanced/00-multistage_advanced_options.html#plot-the-expanded-result-on-the-expanded-mesh",
        "title": "Multi-stage cyclic symmetry using advanced customization > Plot the expanded result on the expanded mesh",
        "section": "Plot the expanded result on the expanded mesh",
        "text": "Plot the expanded result on the expanded mesh"
    },
    {
        "objectID": "examples/04-advanced/00-multistage_advanced_options",
        "href": "examples/04-advanced/00-multistage_advanced_options.html#choose-to-expand-only-some-sectors-for-the-mesh",
        "title": "Multi-stage cyclic symmetry using advanced customization > Choose to expand only some sectors for the mesh",
        "section": "Choose to expand only some sectors for the mesh",
        "text": "Choose to expand only some sectors for the mesh"
    },
    {
        "objectID": "examples/04-advanced/00-multistage_advanced_options",
        "href": "examples/04-advanced/00-multistage_advanced_options.html#check-results-precisely",
        "title": "Multi-stage cyclic symmetry using advanced customization > Check results precisely",
        "section": "Check results precisely",
        "text": "Total running time of the script: (0 minutes 3.142 seconds)\nDownload Jupyter notebook: 00-multistage_advanced_options.ipynb\nDownload Python source code: 00-multistage_advanced_options.py\nDownload zipped: 00-multistage_advanced_options.zip\nGallery generated by Sphinx-Gallery\nCheck results precisely\nDownload Jupyter notebook: 00-multistage_advanced_options.ipynb\nDownload Python source code: 00-multistage_advanced_options.py\nDownload zipped: 00-multistage_advanced_options.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_total_energy",
        "href": "api/ansys.dpf.core.operators.result.global_total_energy.html#global_total_energy",
        "title": "global_total_energy",
        "section": "global_total_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_total_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.rms_temperature",
        "href": "api/ansys.dpf.core.operators.result.rms_temperature.html#rms_temperature",
        "title": "rms_temperature",
        "section": "rms_temperature",
        "text": "Autogenerated DPF operator classes.\nrms_temperature"
    },
    {
        "objectID": "examples/14-lsdyna/sg_execution_times",
        "href": "examples/14-lsdyna/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:13.760 total execution time for 1 file from examples14-lsdyna:\nExample\nTime\nMem (MB)\nsphx_glr_examples_14-lsdyna_00-lsdyna_operators.py (00-lsdyna_operators.py)\n00:13.760\n0.0\nComputation times\n00-lsdyna_operators.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_relative_velocity",
        "href": "api/ansys.dpf.core.operators.result.joint_relative_velocity.html#joint_relative_velocity",
        "title": "joint_relative_velocity",
        "section": "joint_relative_velocity",
        "text": "Autogenerated DPF operator classes.\njoint_relative_velocity"
    },
    {
        "objectID": "examples/04-advanced/index",
        "href": "examples/04-advanced/index.html#advanced-and-miscellaneous-examples",
        "title": "Advanced and miscellaneous examples",
        "section": "Advanced and miscellaneous examples",
        "text": "These examples show advanced use cases to demonstrate the high level of workflow customization.\nsphx_glr_examples_04-advanced_00-multistage_advanced_options.py\nsphx_glr_examples_04-advanced_01-solve_harmonic_problem.py\nsphx_glr_examples_04-advanced_02-volume_averaged_stress.py\nsphx_glr_examples_04-advanced_03-exchange_data_between_servers.py\nsphx_glr_examples_04-advanced_04-extrapolation_stress_3d.py\nsphx_glr_examples_04-advanced_05-extrapolation_strain_2d.py\nsphx_glr_examples_04-advanced_06-stress_gradient_path.py\nsphx_glr_examples_04-advanced_07-load_plugin.py\nsphx_glr_examples_04-advanced_10-asme_secviii_divtwo.py\nsphx_glr_examples_04-advanced_11-cycles_to_failure.py\nsphx_glr_examples_04-advanced_12-read_distributed_files.py\nsphx_glr_examples_04-advanced_13-manage_licensing.py\nsphx_glr_examples_04-advanced_14-incremental_evaluation.py\nAdvanced and miscellaneous examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elemental_volume",
        "href": "api/ansys.dpf.core.operators.result.elemental_volume.html#elemental_volume",
        "title": "elemental_volume",
        "section": "elemental_volume",
        "text": "Autogenerated DPF operator classes.\nelemental_volume"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_XY",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_XY.html#plastic_strain_xy",
        "title": "plastic_strain_XY",
        "section": "plastic_strain_XY",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_XY"
    },
    {
        "objectID": "examples/06-plotting/01-compare_results",
        "href": "examples/06-plotting/01-compare_results.html#compare-results-using-the-plotter",
        "title": "Compare results using the plotter",
        "section": "Compare results using the plotter",
        "text": "This example shows how to plot several mesh/result combinations on the\nsame plot so that you can compare results at different time steps.\nCompare results using the plotter"
    },
    {
        "objectID": "examples/06-plotting/01-compare_results",
        "href": "examples/06-plotting/01-compare_results.html#compare-two-results",
        "title": "Compare results using the plotter > Compare two results",
        "section": "Compare two results",
        "text": "Use the ansys.dpf.core.plotter.DpfPlotter class to plot two different\nresults over the same mesh and compare them.\nUse the ansys.dpf.core.plotter.DpfPlotter class to add plots for the\nfirst mesh and the first result.\nTotal running time of the script: (0 minutes 1.438 seconds)\nDownload Jupyter notebook: 01-compare_results.ipynb\nDownload Python source code: 01-compare_results.py\nDownload zipped: 01-compare_results.zip\nGallery generated by Sphinx-Gallery\nCompare two results\nansys.dpf.core.plotter.DpfPlotter\nansys.dpf.core.plotter.DpfPlotter\nDownload Jupyter notebook: 01-compare_results.ipynb\nDownload Python source code: 01-compare_results.py\nDownload zipped: 01-compare_results.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.property_field",
        "href": "api/ansys.dpf.core.operators.utility.property_field.html#property_field",
        "title": "property_field",
        "section": "property_field",
        "text": "Autogenerated DPF operator classes.\nproperty_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.centroid_fc",
        "href": "api/ansys.dpf.core.operators.math.centroid_fc.html#centroid_fc",
        "title": "centroid_fc",
        "section": "centroid_fc",
        "text": "Autogenerated DPF operator classes.\ncentroid_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_thermal_closure_XY",
        "href": "api/ansys.dpf.core.operators.result.gasket_thermal_closure_XY.html#gasket_thermal_closure_xy",
        "title": "gasket_thermal_closure_XY",
        "section": "gasket_thermal_closure_XY",
        "text": "Autogenerated DPF operator classes.\ngasket_thermal_closure_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_stress_X",
        "href": "api/ansys.dpf.core.operators.result.gasket_stress_X.html#gasket_stress_x",
        "title": "gasket_stress_X",
        "section": "gasket_stress_X",
        "text": "Autogenerated DPF operator classes.\ngasket_stress_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_sliding_interface_energy",
        "href": "api/ansys.dpf.core.operators.result.global_sliding_interface_energy.html#global_sliding_interface_energy",
        "title": "global_sliding_interface_energy",
        "section": "global_sliding_interface_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_sliding_interface_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.remove_unnecessary_labels",
        "href": "api/ansys.dpf.core.operators.utility.remove_unnecessary_labels.html#remove_unnecessary_labels",
        "title": "remove_unnecessary_labels",
        "section": "remove_unnecessary_labels",
        "text": "Autogenerated DPF operator classes.\nremove_unnecessary_labels"
    },
    {
        "objectID": "examples/07-distributed-post/02-distributed-msup_expansion",
        "href": "examples/07-distributed-post/02-distributed-msup_expansion.html#distributed-mode-superposition-msup",
        "title": "Distributed mode superposition (MSUP)",
        "section": "Distributed mode superposition (MSUP)",
        "text": "This example shows how to read and expand distributed files\non distributed processes. The modal basis (two distributed files) is read\non two remote servers. The modal response is then read and expanded on a\nthird server.\nThe following diagram helps you to understand this example. It shows the operator\nchain that is used to compute the final result.\nImport the dpf-core module and its examples files.\nDistributed mode superposition (MSUP)\ndpf-core"
    },
    {
        "objectID": "examples/07-distributed-post/02-distributed-msup_expansion",
        "href": "examples/07-distributed-post/02-distributed-msup_expansion.html#configure-the-servers",
        "title": "Distributed mode superposition (MSUP) > Configure the servers",
        "section": "Configure the servers",
        "text": "Make a list of IP addresses and port numbers that DPF servers start and\nlisten on. Operator instances are created on each of these servers so that\neach server can address a different result file.\nThis example postprocesses an analysis distributed in two files.\nConsequently, it requires two remote processes.\nTo make it easier, this example starts local servers. However, you can\nconnect to any existing servers on your network.\nPrint the IP addresses and ports.\nSpecify the file path.\nConfigure the servers"
    },
    {
        "objectID": "examples/07-distributed-post/02-distributed-msup_expansion",
        "href": "examples/07-distributed-post/02-distributed-msup_expansion.html#create-operators-on-each-server",
        "title": "Distributed mode superposition (MSUP) > Create operators on each server",
        "section": "Create operators on each server",
        "text": "On each server, create two operators, one for displacement computations\nand one for providing the mesh. Then, define their data sources. Both the\ndisplacement operator and mesh provider operator receive data from their\nrespective data files on each server.\nCreate operators on each server"
    },
    {
        "objectID": "examples/07-distributed-post/02-distributed-msup_expansion",
        "href": "examples/07-distributed-post/02-distributed-msup_expansion.html#create-a-local-operator-chain-for-expansion",
        "title": "Distributed mode superposition (MSUP) > Create a local operator chain for expansion",
        "section": "Create a local operator chain for expansion",
        "text": "The following series of operators merge the modal basis and the meshes, read\nthe modal response, and expand the modal response with the modal basis.\nCreate a local operator chain for expansion"
    },
    {
        "objectID": "examples/07-distributed-post/02-distributed-msup_expansion",
        "href": "examples/07-distributed-post/02-distributed-msup_expansion.html#connect-the-operator-chains-together-and-get-the-output",
        "title": "Distributed mode superposition (MSUP) > Connect the operator chains together and get the output",
        "section": "Connect the operator chains together and get the output",
        "text": "Total running time of the script: (0 minutes 11.944 seconds)\nDownload Jupyter notebook: 02-distributed-msup_expansion.ipynb\nDownload Python source code: 02-distributed-msup_expansion.py\nDownload zipped: 02-distributed-msup_expansion.zip\nGallery generated by Sphinx-Gallery\nConnect the operator chains together and get the output\nDownload Jupyter notebook: 02-distributed-msup_expansion.ipynb\nDownload Python source code: 02-distributed-msup_expansion.py\nDownload zipped: 02-distributed-msup_expansion.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_relative_displacement",
        "href": "api/ansys.dpf.core.operators.result.joint_relative_displacement.html#joint_relative_displacement",
        "title": "joint_relative_displacement",
        "section": "joint_relative_displacement",
        "text": "Autogenerated DPF operator classes.\njoint_relative_displacement"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo",
        "href": "api/ansys.dpf.core.operators.geo.html#ansysdpfcoreoperatorsgeo-package",
        "title": "ansys.dpf.core.operators.geo package",
        "section": "ansys.dpf.core.operators.geo package",
        "text": "ansys.dpf.core.operators.geo package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo",
        "href": "api/ansys.dpf.core.operators.geo.html#submodules",
        "title": "ansys.dpf.core.operators.geo package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo",
        "href": "api/ansys.dpf.core.operators.geo.html#module-contents",
        "title": "ansys.dpf.core.operators.geo package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.elements_volumes_over_time",
        "href": "api/ansys.dpf.core.operators.geo.elements_volumes_over_time.html#elements_volumes_over_time",
        "title": "elements_volumes_over_time",
        "section": "elements_volumes_over_time",
        "text": "Autogenerated DPF operator classes.\nelements_volumes_over_time"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.svd",
        "href": "api/ansys.dpf.core.operators.math.svd.html#svd",
        "title": "svd",
        "section": "svd",
        "text": "Autogenerated DPF operator classes.\nsvd"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.absolute_value_by_component",
        "href": "api/ansys.dpf.core.operators.math.absolute_value_by_component.html#absolute_value_by_component",
        "title": "absolute_value_by_component",
        "section": "absolute_value_by_component",
        "text": "Autogenerated DPF operator classes.\nabsolute_value_by_component"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.scale",
        "href": "api/ansys.dpf.core.operators.math.scale.html#scale",
        "title": "scale",
        "section": "scale",
        "text": "Autogenerated DPF operator classes.\nscale"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_to_graphics",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_to_graphics.html#mesh_to_graphics",
        "title": "mesh_to_graphics",
        "section": "mesh_to_graphics",
        "text": "Autogenerated DPF operator classes.\nmesh_to_graphics"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.phase_of_max",
        "href": "api/ansys.dpf.core.operators.min_max.phase_of_max.html#phase_of_max",
        "title": "phase_of_max",
        "section": "phase_of_max",
        "text": "Autogenerated DPF operator classes.\nphase_of_max"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.elements_volume",
        "href": "api/ansys.dpf.core.operators.geo.elements_volume.html#elements_volume",
        "title": "elements_volume",
        "section": "elements_volume",
        "text": "Autogenerated DPF operator classes.\nelements_volume"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cms_dst_table_provider",
        "href": "api/ansys.dpf.core.operators.result.cms_dst_table_provider.html#cms_dst_table_provider",
        "title": "cms_dst_table_provider",
        "section": "cms_dst_table_provider",
        "text": "Autogenerated DPF operator classes.\ncms_dst_table_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.pres_to_field",
        "href": "api/ansys.dpf.core.operators.result.pres_to_field.html#pres_to_field",
        "title": "pres_to_field",
        "section": "pres_to_field",
        "text": "Autogenerated DPF operator classes.\npres_to_field"
    },
    {
        "objectID": "api/ansys.dpf.core.streams_container",
        "href": "api/ansys.dpf.core.streams_container.html#streamscontainer",
        "title": "StreamsContainer",
        "section": "StreamsContainer",
        "text": "Contains classes associated with the DPF StreamsContainer.\nStreamsContainer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.workflow_energy_per_harmonic",
        "href": "api/ansys.dpf.core.operators.result.workflow_energy_per_harmonic.html#workflow_energy_per_harmonic",
        "title": "workflow_energy_per_harmonic",
        "section": "workflow_energy_per_harmonic",
        "text": "Autogenerated DPF operator classes.\nworkflow_energy_per_harmonic"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.intersect",
        "href": "api/ansys.dpf.core.operators.scoping.intersect.html#intersect",
        "title": "intersect",
        "section": "intersect",
        "text": "Autogenerated DPF operator classes.\nintersect"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.solid_to_skin",
        "href": "api/ansys.dpf.core.operators.mapping.solid_to_skin.html#solid_to_skin",
        "title": "solid_to_skin",
        "section": "solid_to_skin",
        "text": "Autogenerated DPF operator classes.\nsolid_to_skin"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result",
        "href": "api/ansys.dpf.core.operators.result.html#ansysdpfcoreoperatorsresult-package",
        "title": "ansys.dpf.core.operators.result package",
        "section": "ansys.dpf.core.operators.result package",
        "text": "ansys.dpf.core.operators.result package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result",
        "href": "api/ansys.dpf.core.operators.result.html#submodules",
        "title": "ansys.dpf.core.operators.result package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result",
        "href": "api/ansys.dpf.core.operators.result.html#module-contents",
        "title": "ansys.dpf.core.operators.result package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.generic_data_container",
        "href": "api/ansys.dpf.core.generic_data_container.html#genericdatacontainer",
        "title": "GenericDataContainer",
        "section": "GenericDataContainer",
        "text": "GenericDataContainer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_principal_3",
        "href": "api/ansys.dpf.core.operators.result.stress_principal_3.html#stress_principal_3",
        "title": "stress_principal_3",
        "section": "stress_principal_3",
        "text": "Autogenerated DPF operator classes.\nstress_principal_3"
    },
    {
        "objectID": "examples/12-fluids/01-fluids_mesh",
        "href": "examples/12-fluids/01-fluids_mesh.html#explore-fluids-mesh",
        "title": "Explore Fluids mesh",
        "section": "Explore Fluids mesh",
        "text": "This example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nExplore Fluids mesh"
    },
    {
        "objectID": "examples/12-fluids/01-fluids_mesh",
        "href": "examples/12-fluids/01-fluids_mesh.html#exploring-an-ansys-fluent-mesh",
        "title": "Explore Fluids mesh > Exploring an Ansys Fluent mesh",
        "section": "Exploring an Ansys Fluent mesh",
        "text": "This example demonstrates how you can explore an Ansys Fluent mesh. Import\nthe result file\nExploring an Ansys Fluent mesh"
    },
    {
        "objectID": "examples/12-fluids/01-fluids_mesh",
        "href": "examples/12-fluids/01-fluids_mesh.html#using-the-mesh_provider",
        "title": "Explore Fluids mesh > Using the mesh_provider",
        "section": "Using the mesh_provider",
        "text": "The mesh_provider operator can be used to retrieve the whole mesh of the\nmodel or the MeshedRegion restricted to a particular body or face zone. The\nbehavior will differ depending on the inputs to the region_scoping pin.\nIf no scoping is connected, the mesh for the whole model is obtained. This\nis the same mesh that is obtained if the Model.metadata.meshed_region\nAPI is employed.\nIf the region_scoping pin is connected, a Scoping with 1 zone ID is\nexpected, or an integer list with one item, or a single integer. The supported\nzone IDs are either face zone IDs or body IDs. The zones of this particular model\nare explored in ref_fluids_model. ID 4 (rotor-shroud) corresponds to a\nface zone, and thus its mesh is only comprised of faces and nodes. ID 13 (fluid-rotor)\nis a body, and thus its mesh has elements (cells), faces and nodes.\nUsing the mesh_provider\nmesh_provider\nmesh_provider\nregion_scoping\nModel.metadata.meshed_region\nregion_scoping\nScoping"
    },
    {
        "objectID": "examples/12-fluids/01-fluids_mesh",
        "href": "examples/12-fluids/01-fluids_mesh.html#using-the-meshes_provider",
        "title": "Explore Fluids mesh > Using the meshes_provider",
        "section": "Using the meshes_provider",
        "text": "The meshes_provider operator can be used to retrieve the mesh for several\nzones and time steps of the model. The behavior will differ depending on the\ninputs to the region_scoping pin. If no region_scoping is connected, the\nMeshedRegion for all body and face zones is retrieved in a MeshesContainer.\nIf no time_scoping is connected and the simulation is transient, only the meshes\nfor the first time step are extracted.\nIf the region_scoping pin is connected, the mesh extraction is restricted to\nthe zone IDs contained in the input Scoping/list (in this case, a face zone connected\nto body 18 and body 13).\nTotal running time of the script: (0 minutes 9.116 seconds)\nDownload Jupyter notebook: 01-fluids_mesh.ipynb\nDownload Python source code: 01-fluids_mesh.py\nDownload zipped: 01-fluids_mesh.zip\nGallery generated by Sphinx-Gallery\nUsing the meshes_provider\nmeshes_provider\nmeshes_provider\nregion_scoping\nMeshedRegion\nMeshesContainer\nregion_scoping\nDownload Jupyter notebook: 01-fluids_mesh.ipynb\nDownload Python source code: 01-fluids_mesh.py\nDownload zipped: 01-fluids_mesh.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.displacement_X",
        "href": "api/ansys.dpf.core.operators.result.displacement_X.html#displacement_x",
        "title": "displacement_X",
        "section": "displacement_X",
        "text": "Autogenerated DPF operator classes.\ndisplacement_X"
    },
    {
        "objectID": "examples/10-mesh_operations/sg_execution_times",
        "href": "examples/10-mesh_operations/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:16.005 total execution time for 3 files from examples10-mesh_operations:\nExample\nTime\nMem (MB)\nsphx_glr_examples_10-mesh_operations_13-nodes_in_local_coordinate_system.py (13-nodes_in_local_coordinate_system.py)\n00:07.827\n0.0\nsphx_glr_examples_10-mesh_operations_05-skin_extraction.py (05-skin_extraction.py)\n00:06.864\n0.0\nsphx_glr_examples_10-mesh_operations_00-create_polygons_and_polyhedrons.py (00-create_polygons_and_polyhedrons.py)\n00:01.314\n0.0\nComputation times\n13-nodes_in_local_coordinate_system.py\n05-skin_extraction.py\n00-create_polygons_and_polyhedrons.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.field_high_pass.html#field_high_pass",
        "title": "field_high_pass",
        "section": "field_high_pass",
        "text": "Autogenerated DPF operator classes.\nfield_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_heat_flux",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_heat_flux.html#cyclic_expanded_heat_flux",
        "title": "cyclic_expanded_heat_flux",
        "section": "cyclic_expanded_heat_flux",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_heat_flux"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_added_mass",
        "href": "api/ansys.dpf.core.operators.result.part_added_mass.html#part_added_mass",
        "title": "part_added_mass",
        "section": "part_added_mass",
        "text": "Autogenerated DPF operator classes.\npart_added_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_dissipation_energy",
        "href": "api/ansys.dpf.core.operators.result.thermal_dissipation_energy.html#thermal_dissipation_energy",
        "title": "thermal_dissipation_energy",
        "section": "thermal_dissipation_energy",
        "text": "Autogenerated DPF operator classes.\nthermal_dissipation_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.make_for_each_range",
        "href": "api/ansys.dpf.core.operators.utility.make_for_each_range.html#make_for_each_range",
        "title": "make_for_each_range",
        "section": "make_for_each_range",
        "text": "Autogenerated DPF operator classes.\nmake_for_each_range"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stiffness_matrix_energy",
        "href": "api/ansys.dpf.core.operators.result.stiffness_matrix_energy.html#stiffness_matrix_energy",
        "title": "stiffness_matrix_energy",
        "section": "stiffness_matrix_energy",
        "text": "Autogenerated DPF operator classes.\nstiffness_matrix_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.specific_heat",
        "href": "api/ansys.dpf.core.operators.result.specific_heat.html#specific_heat",
        "title": "specific_heat",
        "section": "specific_heat",
        "text": "Autogenerated DPF operator classes.\nspecific_heat"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.server",
        "href": "api/ansys.dpf.core.operators.server.html#ansysdpfcoreoperatorsserver-package",
        "title": "ansys.dpf.core.operators.server package",
        "section": "ansys.dpf.core.operators.server package",
        "text": "ansys.dpf.core.operators.server package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.server",
        "href": "api/ansys.dpf.core.operators.server.html#submodules",
        "title": "ansys.dpf.core.operators.server package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.server",
        "href": "api/ansys.dpf.core.operators.server.html#module-contents",
        "title": "ansys.dpf.core.operators.server package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.interface_contact_area",
        "href": "api/ansys.dpf.core.operators.result.interface_contact_area.html#interface_contact_area",
        "title": "interface_contact_area",
        "section": "interface_contact_area",
        "text": "Autogenerated DPF operator classes.\ninterface_contact_area"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.material_support_provider",
        "href": "api/ansys.dpf.core.operators.metadata.material_support_provider.html#material_support_provider",
        "title": "material_support_provider",
        "section": "material_support_provider",
        "text": "Autogenerated DPF operator classes.\nmaterial_support_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_total_mass",
        "href": "api/ansys.dpf.core.operators.result.global_total_mass.html#global_total_mass",
        "title": "global_total_mass",
        "section": "global_total_mass",
        "text": "Autogenerated DPF operator classes.\nglobal_total_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_fields_containers",
        "href": "api/ansys.dpf.core.operators.utility.merge_fields_containers.html#merge_fields_containers",
        "title": "merge_fields_containers",
        "section": "merge_fields_containers",
        "text": "Autogenerated DPF operator classes.\nmerge_fields_containers"
    },
    {
        "objectID": "examples/04-advanced/02-volume_averaged_stress",
        "href": "examples/04-advanced/02-volume_averaged_stress.html#average-elemental-stress-on-a-given-volume",
        "title": "Average elemental stress on a given volume",
        "section": "Average elemental stress on a given volume",
        "text": "This example shows how to find the minimum list of surrounding\nelements for a given node to get a minimum volume.\nFor each list of elements, the elemental stress equivalent is multiplied by the\nvolume of each element. This result is then accumulated to divide it by the\ntotal volume.\nAverage elemental stress on a given volume"
    },
    {
        "objectID": "examples/04-advanced/02-volume_averaged_stress",
        "href": "examples/04-advanced/02-volume_averaged_stress.html#create-a-model-targeting-a-given-result-file",
        "title": "Average elemental stress on a given volume > Create a model targeting a given result file",
        "section": "Create a model targeting a given result file",
        "text": "The model provides easy access to the mesh and time frequency support.\nCreate a model targeting a given result file"
    },
    {
        "objectID": "examples/04-advanced/02-volume_averaged_stress",
        "href": "examples/04-advanced/02-volume_averaged_stress.html#read-the-volume-by-element",
        "title": "Average elemental stress on a given volume > Read the volume by element",
        "section": "Read the volume by element",
        "text": "Read the volume by element"
    },
    {
        "objectID": "examples/04-advanced/02-volume_averaged_stress",
        "href": "examples/04-advanced/02-volume_averaged_stress.html#find-the-minimum-list-of-elements-by-node-to-get-the-volume-check",
        "title": "Average elemental stress on a given volume > Find the minimum list of elements by node to get the volume check",
        "section": "Find the minimum list of elements by node to get the volume check",
        "text": "Find the minimum list of elements by node to get the volume check"
    },
    {
        "objectID": "examples/04-advanced/02-volume_averaged_stress",
        "href": "examples/04-advanced/02-volume_averaged_stress.html#create-workflow",
        "title": "Average elemental stress on a given volume > Create workflow",
        "section": "Create workflow",
        "text": "For each list of elements surrounding nodes:\nCompute equivalent stress averaged on elements.\nApply dot product seqv.volume.\nSum up those on the list of elements.\nDivide this sum by the total volume on these elements.\nCreate workflow"
    },
    {
        "objectID": "examples/04-advanced/02-volume_averaged_stress",
        "href": "examples/04-advanced/02-volume_averaged_stress.html#plot-equivalent-elemental-stress-and-volume-averaged-elemental-equivalent-stress",
        "title": "Average elemental stress on a given volume > Plot equivalent elemental stress and volume averaged elemental equivalent stress",
        "section": "Plot equivalent elemental stress and volume averaged elemental equivalent stress",
        "text": "Plot equivalent elemental stress and volume averaged elemental equivalent stress"
    },
    {
        "objectID": "examples/04-advanced/02-volume_averaged_stress",
        "href": "examples/04-advanced/02-volume_averaged_stress.html#use-the-operator-instead",
        "title": "Average elemental stress on a given volume > Use the operator instead",
        "section": "Use the operator instead",
        "text": "An operator with the same algorithm has been implemented\nTotal running time of the script: (0 minutes 9.866 seconds)\nDownload Jupyter notebook: 02-volume_averaged_stress.ipynb\nDownload Python source code: 02-volume_averaged_stress.py\nDownload zipped: 02-volume_averaged_stress.zip\nGallery generated by Sphinx-Gallery\nUse the operator instead\nDownload Jupyter notebook: 02-volume_averaged_stress.ipynb\nDownload Python source code: 02-volume_averaged_stress.py\nDownload zipped: 02-volume_averaged_stress.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.reaction_force_Z",
        "href": "api/ansys.dpf.core.operators.result.reaction_force_Z.html#reaction_force_z",
        "title": "reaction_force_Z",
        "section": "reaction_force_Z",
        "text": "Autogenerated DPF operator classes.\nreaction_force_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.server.grpc_shutdown_server",
        "href": "api/ansys.dpf.core.operators.server.grpc_shutdown_server.html#grpc_shutdown_server",
        "title": "grpc_shutdown_server",
        "section": "grpc_shutdown_server",
        "text": "Autogenerated DPF operator classes.\ngrpc_shutdown_server"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.decimate_mesh",
        "href": "api/ansys.dpf.core.operators.mesh.decimate_mesh.html#decimate_mesh",
        "title": "decimate_mesh",
        "section": "decimate_mesh",
        "text": "Autogenerated DPF operator classes.\ndecimate_mesh"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.amplitude_fc",
        "href": "api/ansys.dpf.core.operators.math.amplitude_fc.html#amplitude_fc",
        "title": "amplitude_fc",
        "section": "amplitude_fc",
        "text": "Autogenerated DPF operator classes.\namplitude_fc"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "09:05.922 total execution time for 64 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_08-python-operators_02-python_operators_with_dependencies.py (..\\..\\examples\\08-python-operators\\02-python_operators_with_dependencies.py)\n00:47.371\n0.0\nsphx_glr_examples_02-modal_analyses_01-plot_and_animate_modes.py (..\\..\\examples\\02-modal_analyses\\01-plot_and_animate_modes.py)\n00:38.342\n0.0\nsphx_glr_examples_06-plotting_00-basic_plotting.py (..\\..\\examples\\06-plotting\\00-basic_plotting.py)\n00:21.997\n0.0\nsphx_glr_examples_03-harmonic_analyses_01-modal_superposition.py (..\\..\\examples\\03-harmonic_analyses\\01-modal_superposition.py)\n00:19.196\n0.0\nsphx_glr_examples_09-averaging_01-average_across_bodies.py (..\\..\\examples\\09-averaging\\01-average_across_bodies.py)\n00:17.987\n0.0\nsphx_glr_examples_04-advanced_12-read_distributed_files.py (..\\..\\examples\\04-advanced\\12-read_distributed_files.py)\n00:17.430\n0.0\nsphx_glr_examples_00-basic_09-results_over_space_subset.py (..\\..\\examples\\00-basic\\09-results_over_space_subset.py)\n00:17.091\n0.0\nsphx_glr_examples_06-plotting_06-animate_results.py (..\\..\\examples\\06-plotting\\06-animate_results.py)\n00:16.451\n0.0\nsphx_glr_examples_13-streamlines_00_plot_3d_streamlines.py (..\\..\\examples\\13-streamlines\\00_plot_3d_streamlines.py)\n00:15.604\n0.0\nsphx_glr_examples_12-fluids_02-fluids_results.py (..\\..\\examples\\12-fluids\\02-fluids_results.py)\n00:15.493\n0.0\nsphx_glr_examples_06-plotting_05-plot_on_warped_mesh.py (..\\..\\examples\\06-plotting\\05-plot_on_warped_mesh.py)\n00:14.641\n0.0\nsphx_glr_examples_02-modal_analyses_00-compare_modes.py (..\\..\\examples\\02-modal_analyses\\00-compare_modes.py)\n00:13.933\n0.0\nsphx_glr_examples_14-lsdyna_00-lsdyna_operators.py (..\\..\\examples\\14-lsdyna\\00-lsdyna_operators.py)\n00:13.760\n0.0\nsphx_glr_examples_05-file-IO_02-hdf5_serialize_and_read.py (..\\..\\examples\\05-file-IO\\02-hdf5_serialize_and_read.py)\n00:13.100\n0.0\nsphx_glr_examples_05-file-IO_04-basic-load-file.py (..\\..\\examples\\05-file-IO\\04-basic-load-file.py)\n00:12.975\n0.0\nsphx_glr_examples_04-advanced_03-exchange_data_between_servers.py (..\\..\\examples\\04-advanced\\03-exchange_data_between_servers.py)\n00:12.733\n0.0\nsphx_glr_examples_04-advanced_04-extrapolation_stress_3d.py (..\\..\\examples\\04-advanced\\04-extrapolation_stress_3d.py)\n00:12.271\n0.0\nsphx_glr_examples_04-advanced_05-extrapolation_strain_2d.py (..\\..\\examples\\04-advanced\\05-extrapolation_strain_2d.py)\n00:11.990\n0.0\nsphx_glr_examples_07-distributed-post_02-distributed-msup_expansion.py (..\\..\\examples\\07-distributed-post\\02-distributed-msup_expansion.py)\n00:11.944\n0.0\nsphx_glr_examples_04-advanced_13-manage_licensing.py (..\\..\\examples\\04-advanced\\13-manage_licensing.py)\n00:11.929\n0.0\nsphx_glr_examples_11-cyclic-symmetry_02-modal_cyclic_no_expansion.py (..\\..\\examples\\11-cyclic-symmetry\\02-modal_cyclic_no_expansion.py)\n00:11.290\n0.0\nsphx_glr_examples_07-distributed-post_03-distributed-msup_expansion_steps.py (..\\..\\examples\\07-distributed-post\\03-distributed-msup_expansion_steps.py)\n00:10.837\n0.0\nsphx_glr_examples_04-advanced_02-volume_averaged_stress.py (..\\..\\examples\\04-advanced\\02-volume_averaged_stress.py)\n00:09.866\n0.0\nsphx_glr_examples_00-basic_00-basic_example.py (..\\..\\examples\\00-basic\\00-basic_example.py)\n00:09.707\n0.0\nsphx_glr_examples_06-plotting_07-plot_on_geometries.py (..\\..\\examples\\06-plotting\\07-plot_on_geometries.py)\n00:09.239\n0.0\nsphx_glr_examples_00-basic_07-use_result_helpers.py (..\\..\\examples\\00-basic\\07-use_result_helpers.py)\n00:09.178\n0.0\nsphx_glr_examples_12-fluids_01-fluids_mesh.py (..\\..\\examples\\12-fluids\\01-fluids_mesh.py)\n00:09.116\n0.0\nsphx_glr_examples_03-harmonic_analyses_00-multi_harmonic.py (..\\..\\examples\\03-harmonic_analyses\\00-multi_harmonic.py)\n00:08.193\n0.0\nsphx_glr_examples_10-mesh_operations_13-nodes_in_local_coordinate_system.py (..\\..\\examples\\10-mesh_operations\\13-nodes_in_local_coordinate_system.py)\n00:07.827\n0.0\nsphx_glr_examples_00-basic_03-create_entities.py (..\\..\\examples\\00-basic\\03-create_entities.py)\n00:06.925\n0.0\nsphx_glr_examples_10-mesh_operations_05-skin_extraction.py (..\\..\\examples\\10-mesh_operations\\05-skin_extraction.py)\n00:06.864\n0.0\nsphx_glr_examples_07-distributed-post_01-distributed_workflows_on_remote.py (..\\..\\examples\\07-distributed-post\\01-distributed_workflows_on_remote.py)\n00:06.744\n0.0\nsphx_glr_examples_12-fluids_03-fluids_isosurface.py (..\\..\\examples\\12-fluids\\03-fluids_isosurface.py)\n00:06.709\n0.0\nsphx_glr_examples_00-basic_05-use_local_data.py (..\\..\\examples\\00-basic\\05-use_local_data.py)\n00:06.659\n0.0\nsphx_glr_examples_12-fluids_00-fluids_model.py (..\\..\\examples\\12-fluids\\00-fluids_model.py)\n00:06.069\n0.0\nsphx_glr_examples_04-advanced_06-stress_gradient_path.py (..\\..\\examples\\04-advanced\\06-stress_gradient_path.py)\n00:05.770\n0.0\nsphx_glr_examples_07-distributed-post_00-distributed_total_disp.py (..\\..\\examples\\07-distributed-post\\00-distributed_total_disp.py)\n00:05.425\n0.0\nsphx_glr_examples_08-python-operators_01-package_python_operators.py (..\\..\\examples\\08-python-operators\\01-package_python_operators.py)\n00:04.939\n0.0\nsphx_glr_examples_13-streamlines_01_plot_surface_streamlines.py (..\\..\\examples\\13-streamlines\\01_plot_surface_streamlines.py)\n00:04.502\n0.0\nsphx_glr_examples_08-python-operators_00-wrapping_numpy_capabilities.py (..\\..\\examples\\08-python-operators\\00-wrapping_numpy_capabilities.py)\n00:04.283\n0.0\nsphx_glr_examples_04-advanced_14-incremental_evaluation.py (..\\..\\examples\\04-advanced\\14-incremental_evaluation.py)\n00:04.189\n0.0\nsphx_glr_examples_05-file-IO_01-reduced_matrices_export.py (..\\..\\examples\\05-file-IO\\01-reduced_matrices_export.py)\n00:04.064\n0.0\nsphx_glr_examples_11-cyclic-symmetry_01-modal_cyclic.py (..\\..\\examples\\11-cyclic-symmetry\\01-modal_cyclic.py)\n00:03.393\n0.0\nsphx_glr_examples_04-advanced_11-cycles_to_failure.py (..\\..\\examples\\04-advanced\\11-cycles_to_failure.py)\n00:03.330\n0.0\nsphx_glr_examples_11-cyclic-symmetry_03-cyclic_multi_stage.py (..\\..\\examples\\11-cyclic-symmetry\\03-cyclic_multi_stage.py)\n00:03.266\n0.0\nsphx_glr_examples_04-advanced_00-multistage_advanced_options.py (..\\..\\examples\\04-advanced\\00-multistage_advanced_options.py)\n00:03.142\n0.0\nsphx_glr_examples_06-plotting_03-labels.py (..\\..\\examples\\06-plotting\\03-labels.py)\n00:02.907\n0.0\nsphx_glr_examples_04-advanced_10-asme_secviii_divtwo.py (..\\..\\examples\\04-advanced\\10-asme_secviii_divtwo.py)\n00:02.188\n0.0\nsphx_glr_examples_00-basic_01-basic_operators.py (..\\..\\examples\\00-basic\\01-basic_operators.py)\n00:01.829\n0.0\nsphx_glr_examples_06-plotting_04-plot_on_path.py (..\\..\\examples\\06-plotting\\04-plot_on_path.py)\n00:01.751\n0.0\nsphx_glr_examples_09-averaging_00-compute_and_average.py (..\\..\\examples\\09-averaging\\00-compute_and_average.py)\n00:01.658\n0.0\nsphx_glr_examples_06-plotting_01-compare_results.py (..\\..\\examples\\06-plotting\\01-compare_results.py)\n00:01.438\n0.0\nsphx_glr_examples_06-plotting_02-solution_combination.py (..\\..\\examples\\06-plotting\\02-solution_combination.py)\n00:01.423\n0.0\nsphx_glr_examples_10-mesh_operations_00-create_polygons_and_polyhedrons.py (..\\..\\examples\\10-mesh_operations\\00-create_polygons_and_polyhedrons.py)\n00:01.314\n0.0\nsphx_glr_examples_15-cfx_00-cfx_res_files.py (..\\..\\examples\\15-cfx\\00-cfx_res_files.py)\n00:01.075\n0.0\nsphx_glr_examples_01-transient_analyses_01-transient_easy_time_scoping.py (..\\..\\examples\\01-transient_analyses\\01-transient_easy_time_scoping.py)\n00:00.858\n0.0\nsphx_glr_examples_00-basic_08-results_over_time_subset.py (..\\..\\examples\\00-basic\\08-results_over_time_subset.py)\n00:00.688\n0.0\nsphx_glr_examples_01-transient_analyses_00-basic_transient.py (..\\..\\examples\\01-transient_analyses\\00-basic_transient.py)\n00:00.564\n0.0\nsphx_glr_examples_05-file-IO_00-hdf5_double_float_comparison.py (..\\..\\examples\\05-file-IO\\00-hdf5_double_float_comparison.py)\n00:00.188\n0.0\nsphx_glr_examples_04-advanced_01-solve_harmonic_problem.py (..\\..\\examples\\04-advanced\\01-solve_harmonic_problem.py)\n00:00.172\n0.0\nsphx_glr_examples_00-basic_02-basic_field_containers.py (..\\..\\examples\\00-basic\\02-basic_field_containers.py)\n00:00.047\n0.0\nsphx_glr_examples_00-basic_12-get_material_properties.py (..\\..\\examples\\00-basic\\12-get_material_properties.py)\n00:00.027\n0.0\nsphx_glr_examples_04-advanced_07-load_plugin.py (..\\..\\examples\\04-advanced\\07-load_plugin.py)\n00:00.016\n0.0\nsphx_glr_examples_00-basic_10-math_operations.py (..\\..\\examples\\00-basic\\10-math_operations.py)\n00:00.016\n0.0\nComputation times\n..\\..\\examples\\08-python-operators\\02-python_operators_with_dependencies.py\n..\\..\\examples\\02-modal_analyses\\01-plot_and_animate_modes.py\n..\\..\\examples\\06-plotting\\00-basic_plotting.py\n..\\..\\examples\\03-harmonic_analyses\\01-modal_superposition.py\n..\\..\\examples\\09-averaging\\01-average_across_bodies.py\n..\\..\\examples\\04-advanced\\12-read_distributed_files.py\n..\\..\\examples\\00-basic\\09-results_over_space_subset.py\n..\\..\\examples\\06-plotting\\06-animate_results.py\n..\\..\\examples\\13-streamlines\\00_plot_3d_streamlines.py\n..\\..\\examples\\12-fluids\\02-fluids_results.py\n..\\..\\examples\\06-plotting\\05-plot_on_warped_mesh.py\n..\\..\\examples\\02-modal_analyses\\00-compare_modes.py\n..\\..\\examples\\14-lsdyna\\00-lsdyna_operators.py\n..\\..\\examples\\05-file-IO\\02-hdf5_serialize_and_read.py\n..\\..\\examples\\05-file-IO\\04-basic-load-file.py\n..\\..\\examples\\04-advanced\\03-exchange_data_between_servers.py\n..\\..\\examples\\04-advanced\\04-extrapolation_stress_3d.py\n..\\..\\examples\\04-advanced\\05-extrapolation_strain_2d.py\n..\\..\\examples\\07-distributed-post\\02-distributed-msup_expansion.py\n..\\..\\examples\\04-advanced\\13-manage_licensing.py\n..\\..\\examples\\11-cyclic-symmetry\\02-modal_cyclic_no_expansion.py\n..\\..\\examples\\07-distributed-post\\03-distributed-msup_expansion_steps.py\n..\\..\\examples\\04-advanced\\02-volume_averaged_stress.py\n..\\..\\examples\\00-basic\\00-basic_example.py\n..\\..\\examples\\06-plotting\\07-plot_on_geometries.py\n..\\..\\examples\\00-basic\\07-use_result_helpers.py\n..\\..\\examples\\12-fluids\\01-fluids_mesh.py\n..\\..\\examples\\03-harmonic_analyses\\00-multi_harmonic.py\n..\\..\\examples\\10-mesh_operations\\13-nodes_in_local_coordinate_system.py\n..\\..\\examples\\00-basic\\03-create_entities.py\n..\\..\\examples\\10-mesh_operations\\05-skin_extraction.py\n..\\..\\examples\\07-distributed-post\\01-distributed_workflows_on_remote.py\n..\\..\\examples\\12-fluids\\03-fluids_isosurface.py\n..\\..\\examples\\00-basic\\05-use_local_data.py\n..\\..\\examples\\12-fluids\\00-fluids_model.py\n..\\..\\examples\\04-advanced\\06-stress_gradient_path.py\n..\\..\\examples\\07-distributed-post\\00-distributed_total_disp.py\n..\\..\\examples\\08-python-operators\\01-package_python_operators.py\n..\\..\\examples\\13-streamlines\\01_plot_surface_streamlines.py\n..\\..\\examples\\08-python-operators\\00-wrapping_numpy_capabilities.py\n..\\..\\examples\\04-advanced\\14-incremental_evaluation.py\n..\\..\\examples\\05-file-IO\\01-reduced_matrices_export.py\n..\\..\\examples\\11-cyclic-symmetry\\01-modal_cyclic.py\n..\\..\\examples\\04-advanced\\11-cycles_to_failure.py\n..\\..\\examples\\11-cyclic-symmetry\\03-cyclic_multi_stage.py\n..\\..\\examples\\04-advanced\\00-multistage_advanced_options.py\n..\\..\\examples\\06-plotting\\03-labels.py\n..\\..\\examples\\04-advanced\\10-asme_secviii_divtwo.py\n..\\..\\examples\\00-basic\\01-basic_operators.py\n..\\..\\examples\\06-plotting\\04-plot_on_path.py\n..\\..\\examples\\09-averaging\\00-compute_and_average.py\n..\\..\\examples\\06-plotting\\01-compare_results.py\n..\\..\\examples\\06-plotting\\02-solution_combination.py\n..\\..\\examples\\10-mesh_operations\\00-create_polygons_and_polyhedrons.py\n..\\..\\examples\\15-cfx\\00-cfx_res_files.py\n..\\..\\examples\\01-transient_analyses\\01-transient_easy_time_scoping.py\n..\\..\\examples\\00-basic\\08-results_over_time_subset.py\n..\\..\\examples\\01-transient_analyses\\00-basic_transient.py\n..\\..\\examples\\05-file-IO\\00-hdf5_double_float_comparison.py\n..\\..\\examples\\04-advanced\\01-solve_harmonic_problem.py\n..\\..\\examples\\00-basic\\02-basic_field_containers.py\n..\\..\\examples\\00-basic\\12-get_material_properties.py\n..\\..\\examples\\04-advanced\\07-load_plugin.py\n..\\..\\examples\\00-basic\\10-math_operations.py"
    },
    {
        "objectID": "examples/08-python-operators/02-python_operators_with_dependencies",
        "href": "examples/08-python-operators/02-python_operators_with_dependencies.html#create-a-plug-in-package-that-has-third-party-dependencies",
        "title": "Create a plug-in package that has third-party dependencies",
        "section": "Create a plug-in package that has third-party dependencies",
        "text": "This example shows how to create a Python plug-in package with\nthird-party dependencies. You should be familiar with these\nexamples before proceeding with this more advanced one:\nref_wrapping_numpy_capabilities\nref_python_plugin_package\nThis plug-in contains an operator whose implementation depends on a\nthird-party Python module named gltf.\nThis operator takes a path, a mesh, and a 3D vector field as inputs\nand then exports the mesh and the norm of the 3D vector field to a GLTF\nfile at the given path.\nThis example requires DPF 4.0 (Ansys 2022R2) or above.\nFor more information, see ref_compatibility.\nCreate a plug-in package that has third-party dependencies"
    },
    {
        "objectID": "examples/08-python-operators/02-python_operators_with_dependencies",
        "href": "examples/08-python-operators/02-python_operators_with_dependencies.html#create-the-plug-in-package",
        "title": "Create a plug-in package that has third-party dependencies > Create the plug-in package",
        "section": "Create the plug-in package",
        "text": "Each operator implementation derives from the\nansys.dpf.core.custom_operator.CustomOperatorBase class\nand a call to the ansys.dpf.core.custom_operator.record_operator()\nmethod, which records the operators of the plug-in package.\nDownload the gltf_plugin plug-in package that has already been\ncreated for you.\nTo add third-party modules as dependencies to a plug-in package, you must\ncreate and reference a folder or ZIP file with the sites of the dependencies\nin an XML file located next to the folder for the plug-in package. The XML\nfile must have the same name as the plug-in package plus an .xml extension.\nWhen the ansys.dpf.core.core.load_library() method is called,\nDPF-Core uses the site Python module to add custom to the path\nfor the Python interpreter.\nTo create these custom sites, requirements of the plug-in package should be\ninstalled in a Python virtual environment, the site-packages\n(with unnecessary folders removed) should be compressed to a ZIP file and\nplaced with the plugin. The path to this ZIP file should be referenced in\nthe XML as shown in the preceding code.\nTo simplify this step, you can add a requirements file in the plug-in package:\nDownload the script for your operating system.\nFor Windows, download this\nPowerShell script.\nFor Linux, download this\nShell script.\nRun the downloaded script with the mandatory arguments:\n-pluginpath: Path to the folder with the plug-in package.\n-zippath: Path and name for the ZIP file.\nOptional arguments are:\n-pythonexe: Path to a Python executable of your choice.\n-tempfolder: Path to a temporary folder to work in. The default is the environment variable\nTEMP on Windows and /tmp/ on Linux.\nRun the command for your operating system.\nFrom Windows PowerShell, run:\nFrom Linux Shell, run:\nCreate the plug-in package\nansys.dpf.core.custom_operator.CustomOperatorBase\nansys.dpf.core.custom_operator.record_operator()\ngltf_plugin\n.xml\nansys.dpf.core.core.load_library()\nsite\nPowerShell script\nShell script\n-pluginpath\n-zippath\n-pythonexe\n-tempfolder\nTEMP\n/tmp/"
    },
    {
        "objectID": "examples/08-python-operators/02-python_operators_with_dependencies",
        "href": "examples/08-python-operators/02-python_operators_with_dependencies.html#load-the-plug-in-package",
        "title": "Create a plug-in package that has third-party dependencies > Load the plug-in package",
        "section": "Load the plug-in package",
        "text": "You use the function ansys.dpf.core.core.load_library() to load the\nplug-in package.\nThe first argument is the path to the directory where the plug-in package\nis located.\nThe second argument is py_<package>, where <package> is the name\nidentifying the plug-in package.\nThe third argument is the name of the function exposed in the __init__ file\nfor the plug-in package that is used to record operators.\nInstantiate the operator.\nThis new gltf_export operator requires the following as inputs: a triangle\nsurface mesh, a displacement field on this surface mesh, and a path to export\nthe GLTF file to.\nTo demonstrate this new operator, a ansys.dpf.core.model.Model class\nis created on a simple file and the\nansys.dpf.core.operators.mesh.tri_mesh_skin operator is used\nto extract the surface of the mesh in triangle elements.\nLoad the plug-in package\nansys.dpf.core.core.load_library()\npy_<package>\n<package>\n__init__\ngltf_export\nansys.dpf.core.model.Model\nansys.dpf.core.operators.mesh.tri_mesh_skin"
    },
    {
        "objectID": "examples/08-python-operators/02-python_operators_with_dependencies",
        "href": "examples/08-python-operators/02-python_operators_with_dependencies.html#use-the-custom-operator",
        "title": "Create a plug-in package that has third-party dependencies > Use the custom operator",
        "section": "Use the custom operator",
        "text": "You can download output from the gltf operator.\nTotal running time of the script: (0 minutes 47.371 seconds)\nDownload Jupyter notebook: 02-python_operators_with_dependencies.ipynb\nDownload Python source code: 02-python_operators_with_dependencies.py\nDownload zipped: 02-python_operators_with_dependencies.zip\nGallery generated by Sphinx-Gallery\nUse the custom operator\noutput\ngltf\nDownload Jupyter notebook: 02-python_operators_with_dependencies.ipynb\nDownload Python source code: 02-python_operators_with_dependencies.py\nDownload zipped: 02-python_operators_with_dependencies.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.acceleration_X",
        "href": "api/ansys.dpf.core.operators.result.acceleration_X.html#acceleration_x",
        "title": "acceleration_X",
        "section": "acceleration_X",
        "text": "Autogenerated DPF operator classes.\nacceleration_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.nodal_to_global",
        "href": "api/ansys.dpf.core.operators.result.nodal_to_global.html#nodal_to_global",
        "title": "nodal_to_global",
        "section": "nodal_to_global",
        "text": "Autogenerated DPF operator classes.\nnodal_to_global"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.forward_fields_container",
        "href": "api/ansys.dpf.core.operators.utility.forward_fields_container.html#forward_fields_container",
        "title": "forward_fields_container",
        "section": "forward_fields_container",
        "text": "Autogenerated DPF operator classes.\nforward_fields_container"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_X",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_X.html#compute_stress_x",
        "title": "compute_stress_X",
        "section": "compute_stress_X",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.num_surface_status_changes",
        "href": "api/ansys.dpf.core.operators.result.num_surface_status_changes.html#num_surface_status_changes",
        "title": "num_surface_status_changes",
        "section": "num_surface_status_changes",
        "text": "Autogenerated DPF operator classes.\nnum_surface_status_changes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.compression",
        "href": "api/ansys.dpf.core.operators.compression.html#ansysdpfcoreoperatorscompression-package",
        "title": "ansys.dpf.core.operators.compression package",
        "section": "ansys.dpf.core.operators.compression package",
        "text": "ansys.dpf.core.operators.compression package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.compression",
        "href": "api/ansys.dpf.core.operators.compression.html#submodules",
        "title": "ansys.dpf.core.operators.compression package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.compression",
        "href": "api/ansys.dpf.core.operators.compression.html#module-contents",
        "title": "ansys.dpf.core.operators.compression package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mass_flow_rate",
        "href": "api/ansys.dpf.core.operators.result.mass_flow_rate.html#mass_flow_rate",
        "title": "mass_flow_rate",
        "section": "mass_flow_rate",
        "text": "Autogenerated DPF operator classes.\nmass_flow_rate"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.strain_eqv_as_mechanical",
        "href": "api/ansys.dpf.core.operators.result.strain_eqv_as_mechanical.html#strain_eqv_as_mechanical",
        "title": "strain_eqv_as_mechanical",
        "section": "strain_eqv_as_mechanical",
        "text": "Autogenerated DPF operator classes.\nstrain_eqv_as_mechanical"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#licensing",
        "title": "Licensing",
        "section": "Licensing",
        "text": "This section details how to properly set up licensing, as well as what the user should expect in\nterms of limitations or license usage when running PyDPF scripts.\nDPF follows a client-server architecture, which means that the PyDPF client library must interact with a running DPF Server.\nIt either starts a DPF Server via a local installation of DPF Server, or it connects to an already running local or remote DPF Server.\nDPF Server is packaged within the Ansys installer in Ansys 2021 R1 and later.\nIt is also available as a standalone application.\nFor more information on installing DPF Server, see ref_dpf_server.\nLicensing"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#license-terms",
        "title": "Licensing > License terms",
        "section": "License terms",
        "text": "When using the DPF Server from an Ansys installation, the user has already agreed to the licensing\nterms when installing Ansys.\nWhen using a standalone DPF Server, the user must accept the DPF Preview License Agreement\nby following the indications below.\nStarting a DPF Server without agreeing to the DPF Preview License Agreement throws an exception.\nLicense terms\nDPF Preview License Agreement\nDPF Preview License Agreement"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#dpf-preview-license-agreement",
        "title": "Licensing > DPF Preview License Agreement",
        "section": "DPF Preview License Agreement",
        "text": "The standalone versions of DPF Server are protected using license terms specified in the DPFPreviewLicenseAgreement\nfile that can be found on the DPF Pre-Release page\nof the Ansys Customer Portal.\nThe DPFPreviewLicenseAgreement file is a text file, which means that you can open it with a text editor, such as Notepad.\nTo accept the terms of this license agreement, you must set the following environment variable:\nThe ANSYS_DPF_ACCEPT_LA environment variable confirms your acceptance of the DPF License Agreement.\nBy passing the value Y to this environment variable, you are indicating that you have a valid and\nexisting license for the edition and version of DPF Server that you intend to use.\nDPF Preview License Agreement\nDPFPreviewLicenseAgreement\nNotepad\nANSYS_DPF_ACCEPT_LA\nY"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#configure-licensing",
        "title": "Licensing > Configure licensing",
        "section": "Configure licensing",
        "text": "If your machine does not have a local Ansys installation, you need to define where DPF should look for a valid license.\nTo use a local license file, set the ANSYSLMD_LICENSE_FILE environment\nvariable to point to an Ansys license file <license_file_to_use>:\nTo use a remote license, set the ANSYSLMD_LICENSE_FILE environment\nvariable to point to an Ansys license server <license_server_to_use>:\nFor DPF Docker container usage only, you can use the following code to set both the ANSYS_DPF_ACCEPT_LA\nand ANSYSLMD_LICENSE_FILE environment variables. For the ANSYSLMD_LICENSE_FILE environment variable,\nensure that you replace <license_server_to_use> to point to the Ansys license server.\nThe next section provides information on\nthe Ansys license mechanism that is used with DPF Server.\nConfigure licensing\nANSYSLMD_LICENSE_FILE\n<license_file_to_use>\nANSYSLMD_LICENSE_FILE\n<license_server_to_use>\nANSYS_DPF_ACCEPT_LA\nANSYSLMD_LICENSE_FILE\nANSYSLMD_LICENSE_FILE\n<license_server_to_use>"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#license-checks-and-usage",
        "title": "Licensing > License checks and usage",
        "section": "License checks and usage",
        "text": "Some DPF operators require DPF to check for an existing license\nand some require DPF to check-out a compatible license increment.\nDPF is by default allowed to check-out license increments as needed.\nTo change this behavior, see here.\nTo know if operators require a license increment check-out to run, check their license\nattribute in ref_dpf_operators_reference or directly in Python by checking the operator’s\nproperties for a license key:\nTo check which Ansys licensing increments correspond to any_dpf_supported_increments,\nsee here.\nEven if an operator does not require a license check-out to run, most DPF operators still require\nDPF to check for a reachable license server or license file.\nOperators which do not perform any kind of license check are source operators (data extraction\noperators) which do not perform any data transformation.\nFor example, when considering result operators, they perform data transformation if the requested\nlocation is not the native result location. In that case, averaging occurs which is considered\nas data transformation (such as elemental to nodal, nodal to elemental, or any other location change).\nLicense checks and usage\nlicense\nlicense\nany_dpf_supported_increments"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#server-context",
        "title": "Licensing > Server context",
        "section": "Server context",
        "text": "You can allow or prevent licensed operators from running and using a license with a\nserver context:\nPremium: This default context allows DPF to perform license checkouts,\nmaking licensed DPF operators available.\nEntry: This context does not allow DPF to perform any license checkout,\nmeaning that licensed DPF operators fail.\nTo update the context, apply a new server context:\nServer context"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#licensing-errors",
        "title": "Licensing > Licensing errors",
        "section": "Licensing errors",
        "text": "The following user actions may fail due to licensing:\nStarting a standalone DPF Server may fail due to the\nDPF Preview License Agreement (see target_to_license_terms).\nCreating an operator may fail if the operator performs data transformation and no license server\nor license file is found (see target_to_ansys_license_mechanism).\nRunning an operator requiring a license checkout may fail if no\ncompatible license increment\nis available or if the DPF Server context is Entry, preventing any license check-out\n(see licensing_server_context).\nLicensing errors\nDPF Preview License Agreement"
    },
    {
        "objectID": "getting_started/licensing",
        "href": "getting_started/licensing.html#compatible-ansys-license-increments",
        "title": "Licensing > Compatible Ansys license increments",
        "section": "Compatible Ansys license increments",
        "text": "The following Ansys licensing increments provide rights to use the licensed DPF capabilities:\npreppost available in the Ansys Mechanical Enterprise PrepPost product\nmeba available in the ANSYS Mechanical Enterprise Solver product\nmech_2 available in the ANSYS Mechanical Premium product\nmech_1 available in the ANSYS Mechanical Pro product\nansys available in the ANSYS Mechanical Enterprise product\ndynapp available in the ANSYS LS-DYNA PrepPost product\ndyna available in the ANSYS LS-DYNA product\nvmotion available in the Ansys Motion product\nacpreppost available in the Ansys Mechanical Enterprise product\nacdi_adprepost available in the Ansys AUTODYN and Ansys AUTODYN PrepPost products\ncfd_preppost available in the Ansys CFD Enterprise product\ncfd_preppost_pro available in the Ansys CFD Enterprise product\nvmotion_post available in the Ansys Motion Post product\nvmotion_pre available in the Ansys Motion Pre product\nadvanced_meshing available in the Ansys CFD Enterprise product\nfluent_meshing_pro available in the Ansys CFD Enterprise product\nfluent_setup_post available in the Ansys CFD Enterprise product\nfluent_setup_post_pro available in the Ansys CFD Enterprise product\nacfx_pre available in the Ansys CFD Enterprise product\ncfd_base available in the Ansys CFD Enterprise product\ncfd_solve_level1 available in the Ansys CFD Enterprise product\ncfd_solve_level2 available in the Ansys CFD Enterprise product\ncfd_solve_level3 available in the Ansys CFD Enterprise product\nfluent_meshing available in the Ansys CFD Enterprise product\navrxp_snd_level1 available in the Ansys Sound Pro product\nsherlock available in the Ansys Sherlock product\nEach increment may be available in other products. On the Ansys Customer Portal,\nthe Licensing section\nprovides product/increment mapping.\nCompatible Ansys license increments\npreppost\nAnsys Mechanical Enterprise PrepPost\nmeba\nANSYS Mechanical Enterprise Solver\nmech_2\nANSYS Mechanical Premium\nmech_1\nANSYS Mechanical Pro\nansys\nANSYS Mechanical Enterprise\ndynapp\nANSYS LS-DYNA PrepPost\ndyna\nANSYS LS-DYNA\nvmotion\nAnsys Motion\nacpreppost\nAnsys Mechanical Enterprise\nacdi_adprepost\nAnsys AUTODYN\nAnsys AUTODYN PrepPost\ncfd_preppost\nAnsys CFD Enterprise\ncfd_preppost_pro\nAnsys CFD Enterprise\nvmotion_post\nAnsys Motion Post\nvmotion_pre\nAnsys Motion Pre\nadvanced_meshing\nAnsys CFD Enterprise\nfluent_meshing_pro\nAnsys CFD Enterprise\nfluent_setup_post\nAnsys CFD Enterprise\nfluent_setup_post_pro\nAnsys CFD Enterprise\nacfx_pre\nAnsys CFD Enterprise\ncfd_base\nAnsys CFD Enterprise\ncfd_solve_level1\nAnsys CFD Enterprise\ncfd_solve_level2\nAnsys CFD Enterprise\ncfd_solve_level3\nAnsys CFD Enterprise\nfluent_meshing\nAnsys CFD Enterprise\navrxp_snd_level1\nAnsys Sound Pro\nsherlock\nAnsys Sherlock"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_axial_stress",
        "href": "api/ansys.dpf.core.operators.result.beam_axial_stress.html#beam_axial_stress",
        "title": "beam_axial_stress",
        "section": "beam_axial_stress",
        "text": "Autogenerated DPF operator classes.\nbeam_axial_stress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.make_producer_consumer_for_each_iterator",
        "href": "api/ansys.dpf.core.operators.utility.make_producer_consumer_for_each_iterator.html#make_producer_consumer_for_each_iterator",
        "title": "make_producer_consumer_for_each_iterator",
        "section": "make_producer_consumer_for_each_iterator",
        "text": "Autogenerated DPF operator classes.\nmake_producer_consumer_for_each_iterator"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.scoping_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.scoping_high_pass.html#scoping_high_pass",
        "title": "scoping_high_pass",
        "section": "scoping_high_pass",
        "text": "Autogenerated DPF operator classes.\nscoping_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.members_in_linear_compression_bending_not_certified",
        "href": "api/ansys.dpf.core.operators.result.members_in_linear_compression_bending_not_certified.html#members_in_linear_compression_bending_not_certified",
        "title": "members_in_linear_compression_bending_not_certified",
        "section": "members_in_linear_compression_bending_not_certified",
        "text": "Autogenerated DPF operator classes.\nmembers_in_linear_compression_bending_not_certified"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.external_layer",
        "href": "api/ansys.dpf.core.operators.mesh.external_layer.html#external_layer",
        "title": "external_layer",
        "section": "external_layer",
        "text": "Autogenerated DPF operator classes.\nexternal_layer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging",
        "href": "api/ansys.dpf.core.operators.averaging.html#ansysdpfcoreoperatorsaveraging-package",
        "title": "ansys.dpf.core.operators.averaging package",
        "section": "ansys.dpf.core.operators.averaging package",
        "text": "ansys.dpf.core.operators.averaging package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging",
        "href": "api/ansys.dpf.core.operators.averaging.html#submodules",
        "title": "ansys.dpf.core.operators.averaging package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging",
        "href": "api/ansys.dpf.core.operators.averaging.html#module-contents",
        "title": "ansys.dpf.core.operators.averaging package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.server_context",
        "href": "api/ansys.dpf.core.server_context.html#servercontext",
        "title": "ServerContext",
        "section": "ServerContext",
        "text": "Gives the ability to choose the context with which the server should be started.\nThe context allows you to choose the licensing logic for operators.\nFor every context, DPF always checks if an Ansys license is available.\nBy default, a Premium type of ServerContext is used,\nmeaning that any operator requiring a license check-out can do so.\nThe Entry context instead does not allow operators to check a license out,\nwhich will result in failure of operators requiring it.\nThe default context can be overwritten using the ANSYS_DPF_SERVER_CONTEXT environment\nvariable.\nANSYS_DPF_SERVER_CONTEXT=ENTRY and ANSYS_DPF_SERVER_CONTEXT=PREMIUM can be used.\nServerContext\nServerContext"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_YZ",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_YZ.html#compute_stress_yz",
        "title": "compute_stress_YZ",
        "section": "compute_stress_YZ",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_YZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.recombine_harmonic_indeces_cyclic",
        "href": "api/ansys.dpf.core.operators.result.recombine_harmonic_indeces_cyclic.html#recombine_harmonic_indeces_cyclic",
        "title": "recombine_harmonic_indeces_cyclic",
        "section": "recombine_harmonic_indeces_cyclic",
        "text": "Autogenerated DPF operator classes.\nrecombine_harmonic_indeces_cyclic"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_rigid_body_velocity",
        "href": "api/ansys.dpf.core.operators.result.part_rigid_body_velocity.html#part_rigid_body_velocity",
        "title": "part_rigid_body_velocity",
        "section": "part_rigid_body_velocity",
        "text": "Autogenerated DPF operator classes.\npart_rigid_body_velocity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_plan_clip",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_plan_clip.html#mesh_plan_clip",
        "title": "mesh_plan_clip",
        "section": "mesh_plan_clip",
        "text": "Autogenerated DPF operator classes.\nmesh_plan_clip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.rescope_property_field",
        "href": "api/ansys.dpf.core.operators.scoping.rescope_property_field.html#rescope_property_field",
        "title": "rescope_property_field",
        "section": "rescope_property_field",
        "text": "Autogenerated DPF operator classes.\nrescope_property_field"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#dpf-capabilities-and-scripting-languages",
        "title": "DPF capabilities and scripting languages",
        "section": "DPF capabilities and scripting languages",
        "text": "DPF capabilities and scripting languages"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#dpf-as-a-framework-enabling-data-computation-capabilities",
        "title": "DPF capabilities and scripting languages > DPF as a Framework enabling data computation capabilities",
        "section": "DPF as a Framework enabling data computation capabilities",
        "text": "DPF as a Framework enabling data computation capabilities"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#dpf-application-kernel-and-operators-libraries",
        "title": "DPF capabilities and scripting languages > DPF application: kernel and operator’s libraries",
        "section": "DPF application: kernel and operator’s libraries",
        "text": "DPF is a framework that provides data computation capabilities. These capabilities are provided\nthrough libraries of operators. To learn more about the computed data and the operator concepts, see user_guide_concepts.\nA DPF application is always composed of a kernel (DataProcessingCore and DPFClientAPI binaries),\nthat enables capabilities by loading libraries of operators (for example, mapdlOperatorsCore library\nis basic library enabled by DPF).\nThis application is also called a DPF Server application.\nWhen starting a DPF application, you can customize the list of operator’s libraries that the kernel loads.\nTo learn more on how to customize the initialization of a DPF application, see user_guide_xmlfiles.\nDPF application: kernel and operator’s libraries"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#dpf-client-available-apis-and-languages",
        "title": "DPF capabilities and scripting languages > DPF client: available APIs and languages",
        "section": "DPF client: available APIs and languages",
        "text": "DPF is a framework that provides data computation capabilities. These capabilities are\nenabled using the DPF Server application.\nThese capabilities can be accessed through client APIs, as shown here:\nDPF server application can be accessed using Ansys Inc product, or DPF Server package (see ref_dpf_server) available on the Customer portal.\nSeveral client APIs are available (CPython, IronPython, C++, and so on).\nCommunication in the same process, or through gRPC, allows you to have the client and the servers on different machines.\nNote that IronPython and CPython APIs are different, each has specific syntax.\nThe list of available operators when using DPF is independent from the language or API which is used, it only depends\non how the DPF application has been initialized.\nMost of the DPF capabilities can be accessed using the operators. For more information about the existing operators, see the Operators tab.\nDPF client: available APIs and languages"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#enhance-dpf-capabilities",
        "title": "DPF capabilities and scripting languages > Enhance DPF capabilities",
        "section": "Enhance DPF capabilities",
        "text": "The available DPF capabilities loaded in a DPF application can be enhanced by creating new operator’s libraries.\nDPF offers multiple development APIs depending on your environment. These plugins can be:\nCPython based (see user_guide_custom_operators)\nC++ based (see “DPF/USER GUIDE” section of C++ documentation)\nEnhance DPF capabilities"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#dpf-integration",
        "title": "DPF capabilities and scripting languages > DPF integration",
        "section": "DPF integration",
        "text": "DPF is available as a standalone tool and as a tool in Ansys Mechanical. You should decide whether you want\nto use standalone DPF or DPF in Mechanical before creating any scripts.\nDPF integration"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#dpf-as-a-standalone-application",
        "title": "DPF capabilities and scripting languages > DPF as a standalone application",
        "section": "DPF as a standalone application",
        "text": "Standalone DPF can be used through any of the previously mentioned APIs.\nIn particular, DPF Standalone capabilities can be enabled using CPython and can be accessed via any Python console.\nData can be exported to universal file formats, such as VTK, HDF5, and TXT\nfiles. You can use it to generate TH-plots, screenshots, and animations or\nto create custom result plots using the numpy\nand matplotlib packages.\nDPF as a standalone application"
    },
    {
        "objectID": "user_guide/concepts/waysofusing",
        "href": "user_guide/concepts/waysofusing.html#mechanical",
        "title": "DPF capabilities and scripting languages > Mechanical",
        "section": "Mechanical",
        "text": "DPF in Mechanical uses IronPython and is accessible with the ACT Console.\nUse it to perform custom postprocessing and visualization of results directly\nwithin the Mechanical application.\nMechanical"
    },
    {
        "objectID": "api/ansys.dpf.core.outputs",
        "href": "api/ansys.dpf.core.outputs.html#outputs",
        "title": "Outputs",
        "section": "Outputs",
        "text": "Outputs"
    },
    {
        "objectID": "api/ansys.dpf.core.time_freq_support",
        "href": "api/ansys.dpf.core.time_freq_support.html#timefreqsupport",
        "title": "TimeFreqSupport",
        "section": "TimeFreqSupport",
        "text": "TimeFreqSupport"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max_over_label_fc",
        "href": "api/ansys.dpf.core.operators.min_max.min_max_over_label_fc.html#min_max_over_label_fc",
        "title": "min_max_over_label_fc",
        "section": "min_max_over_label_fc",
        "text": "Autogenerated DPF operator classes.\nmin_max_over_label_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_XZ",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_XZ.html#compute_stress_xz",
        "title": "compute_stress_XZ",
        "section": "compute_stress_XZ",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.deserializer",
        "href": "api/ansys.dpf.core.operators.serialization.deserializer.html#deserializer",
        "title": "deserializer",
        "section": "deserializer",
        "text": "Autogenerated DPF operator classes.\ndeserializer"
    },
    {
        "objectID": "api/ansys.dpf.core.dpf_operator",
        "href": "api/ansys.dpf.core.dpf_operator.html#operator",
        "title": "Operator",
        "section": "Operator",
        "text": "Operator"
    },
    {
        "objectID": "examples/04-advanced/03-exchange_data_between_servers",
        "href": "examples/04-advanced/03-exchange_data_between_servers.html#exchange-data-between-servers",
        "title": "Exchange data between servers",
        "section": "Exchange data between servers",
        "text": "In this example, two DPF servers are started, and a workflow is created\nwith a part on both servers. This example shows how you can read data\nfrom a given machine and transform this data on another machine\nwithout any more difficulties than working on a local computer.\nExchange data between servers"
    },
    {
        "objectID": "examples/04-advanced/03-exchange_data_between_servers",
        "href": "examples/04-advanced/03-exchange_data_between_servers.html#create-two-servers",
        "title": "Exchange data between servers > Create two servers",
        "section": "Create two servers",
        "text": "Use the start_local_server()\nmethod to start two servers on your local machine. If you have another server,\nyou can use the connect_to_server()\nmethod to connect to any DPF server on your network.\nThe as_global attributes allows you to choose whether a server is stored\nby the module and used by default. This example sets the first server as the default.\nCreate two servers\nstart_local_server()\nconnect_to_server()\nas_global"
    },
    {
        "objectID": "examples/04-advanced/03-exchange_data_between_servers",
        "href": "examples/04-advanced/03-exchange_data_between_servers.html#send-the-result-file",
        "title": "Exchange data between servers > Send the result file",
        "section": "Send the result file",
        "text": "The result file is sent to the temporary directory of the first server.\nThis file upload is useless in this case because the two servers are local\nmachines.\nSend the result file"
    },
    {
        "objectID": "examples/04-advanced/03-exchange_data_between_servers",
        "href": "examples/04-advanced/03-exchange_data_between_servers.html#create-a-workflow-on-the-first-server",
        "title": "Exchange data between servers > Create a workflow on the first server",
        "section": "Create a workflow on the first server",
        "text": "Create the model\nCreate a workflow on the first server"
    },
    {
        "objectID": "examples/04-advanced/03-exchange_data_between_servers",
        "href": "examples/04-advanced/03-exchange_data_between_servers.html#create-a-workflow-on-the-second-server",
        "title": "Exchange data between servers > Create a workflow on the second server",
        "section": "Create a workflow on the second server",
        "text": "Create a workflow on the second server"
    },
    {
        "objectID": "examples/04-advanced/03-exchange_data_between_servers",
        "href": "examples/04-advanced/03-exchange_data_between_servers.html#pass-data-from-one-server-to-another",
        "title": "Exchange data between servers > Pass data from one server to another",
        "section": "Pass data from one server to another",
        "text": "Pass data from one server to another"
    },
    {
        "objectID": "examples/04-advanced/03-exchange_data_between_servers",
        "href": "examples/04-advanced/03-exchange_data_between_servers.html#plot-the-output",
        "title": "Exchange data between servers > Plot the output",
        "section": "Plot the output",
        "text": "Total running time of the script: (0 minutes 12.733 seconds)\nDownload Jupyter notebook: 03-exchange_data_between_servers.ipynb\nDownload Python source code: 03-exchange_data_between_servers.py\nDownload zipped: 03-exchange_data_between_servers.zip\nGallery generated by Sphinx-Gallery\nPlot the output\nDownload Jupyter notebook: 03-exchange_data_between_servers.ipynb\nDownload Python source code: 03-exchange_data_between_servers.py\nDownload zipped: 03-exchange_data_between_servers.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_principal_3",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_principal_3.html#elastic_strain_principal_3",
        "title": "elastic_strain_principal_3",
        "section": "elastic_strain_principal_3",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_principal_3"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.meshes_provider",
        "href": "api/ansys.dpf.core.operators.mesh.meshes_provider.html#meshes_provider",
        "title": "meshes_provider",
        "section": "meshes_provider",
        "text": "Autogenerated DPF operator classes.\nmeshes_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_blackman",
        "href": "api/ansys.dpf.core.operators.math.window_blackman.html#window_blackman",
        "title": "window_blackman",
        "section": "window_blackman",
        "text": "Autogenerated DPF operator classes.\nwindow_blackman"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.acceleration",
        "href": "api/ansys.dpf.core.operators.result.acceleration.html#acceleration",
        "title": "acceleration",
        "section": "acceleration",
        "text": "Autogenerated DPF operator classes.\nacceleration"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.static_pressure",
        "href": "api/ansys.dpf.core.operators.result.static_pressure.html#static_pressure",
        "title": "static_pressure",
        "section": "static_pressure",
        "text": "Autogenerated DPF operator classes.\nstatic_pressure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_von_mises",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_von_mises.html#compute_stress_von_mises",
        "title": "compute_stress_von_mises",
        "section": "compute_stress_von_mises",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_von_mises"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cross_product",
        "href": "api/ansys.dpf.core.operators.math.cross_product.html#cross_product",
        "title": "cross_product",
        "section": "cross_product",
        "text": "Autogenerated DPF operator classes.\ncross_product"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.strain_from_voigt",
        "href": "api/ansys.dpf.core.operators.utility.strain_from_voigt.html#strain_from_voigt",
        "title": "strain_from_voigt",
        "section": "strain_from_voigt",
        "text": "Autogenerated DPF operator classes.\nstrain_from_voigt"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timescoping_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.timescoping_high_pass.html#timescoping_high_pass",
        "title": "timescoping_high_pass",
        "section": "timescoping_high_pass",
        "text": "Autogenerated DPF operator classes.\ntimescoping_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.identical_meshes",
        "href": "api/ansys.dpf.core.operators.logic.identical_meshes.html#identical_meshes",
        "title": "identical_meshes",
        "section": "identical_meshes",
        "text": "Autogenerated DPF operator classes.\nidentical_meshes"
    },
    {
        "objectID": "examples/00-basic/05-use_local_data",
        "href": "examples/00-basic/05-use_local_data.html#bring-a-fields-data-locally-to-improve-performance",
        "title": "Bring a field’s data locally to improve performance",
        "section": "Bring a field’s data locally to improve performance",
        "text": "Reducing the number of calls to the server is key to improving\nperformance. Using the as_local_field option brings the data\nfrom the server to your local machine where you can work on it.\nWhen finished, you send the updated data back to the server\nin one transaction.\nCreate a model object to establish a connection with an\nexample result file and then extract:\nBring a field’s data locally to improve performance\nas_local_field"
    },
    {
        "objectID": "examples/00-basic/05-use_local_data",
        "href": "examples/00-basic/05-use_local_data.html#create-the-workflow",
        "title": "Bring a field’s data locally to improve performance > Create the workflow",
        "section": "Create the workflow",
        "text": "Compute the stress principal invariants:\nCreate the workflow"
    },
    {
        "objectID": "examples/00-basic/05-use_local_data",
        "href": "examples/00-basic/05-use_local_data.html#manipulate-data-locally",
        "title": "Bring a field’s data locally to improve performance > Manipulate data locally",
        "section": "Manipulate data locally",
        "text": "This example goes over the fields, keeping the largest invariant value\nby node if the averaged value of invariants is large enough.\nExploring data allows you to customize it to meet your needs.\nManipulate data locally"
    },
    {
        "objectID": "examples/00-basic/05-use_local_data",
        "href": "examples/00-basic/05-use_local_data.html#plot-result-field",
        "title": "Bring a field’s data locally to improve performance > Plot result field",
        "section": "Plot result field",
        "text": "Plot the result field on the skin mesh:\nPlot result field"
    },
    {
        "objectID": "examples/00-basic/05-use_local_data",
        "href": "examples/00-basic/05-use_local_data.html#plot-initial-invariants",
        "title": "Bring a field’s data locally to improve performance > Plot initial invariants",
        "section": "Plot initial invariants",
        "text": "Plot the initial invariants:\nTotal running time of the script: (0 minutes 6.659 seconds)\nDownload Jupyter notebook: 05-use_local_data.ipynb\nDownload Python source code: 05-use_local_data.py\nDownload zipped: 05-use_local_data.zip\nGallery generated by Sphinx-Gallery\nPlot initial invariants\nDownload Jupyter notebook: 05-use_local_data.ipynb\nDownload Python source code: 05-use_local_data.py\nDownload zipped: 05-use_local_data.zip"
    },
    {
        "objectID": "examples/00-basic/07-use_result_helpers",
        "href": "examples/00-basic/07-use_result_helpers.html#use-result-helpers-to-load-custom-data",
        "title": "Use result helpers to load custom data",
        "section": "Use result helpers to load custom data",
        "text": "The Result class, which is an instance\ncreated by the Model, gives\naccess to helpers for requesting results on specific mesh and time scopings.\nWith these helpers, working on a custom spatial and temporal subset of the\nmodel is straightforward.\nCreate a model object to establish a connection with an example result file:\nUse result helpers to load custom data\nResult\nModel"
    },
    {
        "objectID": "examples/00-basic/07-use_result_helpers",
        "href": "examples/00-basic/07-use_result_helpers.html#visualize-specific-mode-shapes",
        "title": "Use result helpers to load custom data > Visualize specific mode shapes",
        "section": "Visualize specific mode shapes",
        "text": "Choose the modes to visualize:\nVisualize specific mode shapes"
    },
    {
        "objectID": "examples/00-basic/07-use_result_helpers",
        "href": "examples/00-basic/07-use_result_helpers.html#choose-a-spatial-subset",
        "title": "Use result helpers to load custom data > Choose a spatial subset",
        "section": "Choose a spatial subset",
        "text": "Work on only a named selection (or component).\nPrint the available named selection:\nSpecify to the result that you want to work on a specific named selection:\nSpecify to the result that you want to work on specific nodes:\nTotal running time of the script: (0 minutes 9.178 seconds)\nDownload Jupyter notebook: 07-use_result_helpers.ipynb\nDownload Python source code: 07-use_result_helpers.py\nDownload zipped: 07-use_result_helpers.zip\nGallery generated by Sphinx-Gallery\nChoose a spatial subset\nDownload Jupyter notebook: 07-use_result_helpers.ipynb\nDownload Python source code: 07-use_result_helpers.py\nDownload zipped: 07-use_result_helpers.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.rotate_in_cylindrical_cs_fc",
        "href": "api/ansys.dpf.core.operators.geo.rotate_in_cylindrical_cs_fc.html#rotate_in_cylindrical_cs_fc",
        "title": "rotate_in_cylindrical_cs_fc",
        "section": "rotate_in_cylindrical_cs_fc",
        "text": "Autogenerated DPF operator classes.\nrotate_in_cylindrical_cs_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.fft_eval",
        "href": "api/ansys.dpf.core.operators.math.fft_eval.html#fft_eval",
        "title": "fft_eval",
        "section": "fft_eval",
        "text": "Autogenerated DPF operator classes.\nfft_eval"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.identical_fc",
        "href": "api/ansys.dpf.core.operators.logic.identical_fc.html#identical_fc",
        "title": "identical_fc",
        "section": "identical_fc",
        "text": "Autogenerated DPF operator classes.\nidentical_fc"
    },
    {
        "objectID": "examples/00-basic/10-math_operations",
        "href": "examples/00-basic/10-math_operations.html#mathematical-operations",
        "title": "Mathematical Operations",
        "section": "Mathematical Operations",
        "text": "DPF provides operators for implementing mathematical operations,\nranging from addition and multiplication to FFT and QR solving.\nFor a complete list, see ref_dpf_operators_reference, under the math section.\nMathematical Operations"
    },
    {
        "objectID": "examples/00-basic/10-math_operations",
        "href": "examples/00-basic/10-math_operations.html#addition",
        "title": "Mathematical Operations > Addition",
        "section": "Addition",
        "text": "Once the fields are ready, we can instantiate an operator.\nFinally, we use eval() to compute and retrieve the result.\nAddition"
    },
    {
        "objectID": "examples/00-basic/10-math_operations",
        "href": "examples/00-basic/10-math_operations.html#dot-product",
        "title": "Mathematical Operations > Dot product",
        "section": "Dot product",
        "text": "Dot product"
    },
    {
        "objectID": "examples/00-basic/10-math_operations",
        "href": "examples/00-basic/10-math_operations.html#power",
        "title": "Mathematical Operations > Power",
        "section": "Power",
        "text": "Power"
    },
    {
        "objectID": "examples/00-basic/10-math_operations",
        "href": "examples/00-basic/10-math_operations.html#l2-norm",
        "title": "Mathematical Operations > L2 norm",
        "section": "L2 norm",
        "text": "L2 norm"
    },
    {
        "objectID": "examples/00-basic/10-math_operations",
        "href": "examples/00-basic/10-math_operations.html#accumulate",
        "title": "Mathematical Operations > Accumulate",
        "section": "Accumulate",
        "text": "First we define fields. By default, fields represent 3D vectors\nso one elementary data is a 3D vector.\nThe optional ponderation field is a field which takes one value per entity,\nso we need to change its dimensionality (1D).\nFill fields with data.\nAdd nine values because there are three entities.\nThree weights, one per entity.\nRetrieve the result.\nAccumulate"
    },
    {
        "objectID": "examples/00-basic/10-math_operations",
        "href": "examples/00-basic/10-math_operations.html#with-scoping",
        "title": "Mathematical Operations > With scoping",
        "section": "With scoping",
        "text": "Next, we need to provide information about the scoping.\nDPF needs to know the IDs of the data we just provided,\nso that it can apply an operator on a subset of the original data.\nBy providing these integers we only select the data with an ID in common.\nHere we are selecting the third elementary data of the first field,\nand the first elementary data of the second field,\nOther elementary data is not taken into account when using an operator that needs two operands.\nDot product\nTotal running time of the script: (0 minutes 0.016 seconds)\nDownload Jupyter notebook: 10-math_operations.ipynb\nDownload Python source code: 10-math_operations.py\nDownload zipped: 10-math_operations.zip\nGallery generated by Sphinx-Gallery\nWith scoping\nDownload Jupyter notebook: 10-math_operations.ipynb\nDownload Python source code: 10-math_operations.py\nDownload zipped: 10-math_operations.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mean_static_pressure",
        "href": "api/ansys.dpf.core.operators.result.mean_static_pressure.html#mean_static_pressure",
        "title": "mean_static_pressure",
        "section": "mean_static_pressure",
        "text": "Autogenerated DPF operator classes.\nmean_static_pressure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.amplitude",
        "href": "api/ansys.dpf.core.operators.math.amplitude.html#amplitude",
        "title": "amplitude",
        "section": "amplitude",
        "text": "Autogenerated DPF operator classes.\namplitude"
    },
    {
        "objectID": "examples/04-advanced/14-incremental_evaluation",
        "href": "examples/04-advanced/14-incremental_evaluation.html#use-incremental-evaluation-helper",
        "title": "Use incremental evaluation helper",
        "section": "Use incremental evaluation helper",
        "text": "This example shows you how to use the incremental evaluation helper.\nRetrieve an example to instantiate a DataSources object\nDefining the workflow to exploit\nObtain a new operator to retrieve outputs from\nTotal running time of the script: (0 minutes 4.189 seconds)\nDownload Jupyter notebook: 14-incremental_evaluation.ipynb\nDownload Python source code: 14-incremental_evaluation.py\nDownload zipped: 14-incremental_evaluation.zip\nGallery generated by Sphinx-Gallery\nUse incremental evaluation helper\nDownload Jupyter notebook: 14-incremental_evaluation.ipynb\nDownload Python source code: 14-incremental_evaluation.py\nDownload zipped: 14-incremental_evaluation.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_welch_fc",
        "href": "api/ansys.dpf.core.operators.math.window_welch_fc.html#window_welch_fc",
        "title": "window_welch_fc",
        "section": "window_welch_fc",
        "text": "Autogenerated DPF operator classes.\nwindow_welch_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_status",
        "href": "api/ansys.dpf.core.operators.result.contact_status.html#contact_status",
        "title": "contact_status",
        "section": "contact_status",
        "text": "Autogenerated DPF operator classes.\ncontact_status"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_strain_energy",
        "href": "api/ansys.dpf.core.operators.result.cyclic_strain_energy.html#cyclic_strain_energy",
        "title": "cyclic_strain_energy",
        "section": "cyclic_strain_energy",
        "text": "Autogenerated DPF operator classes.\ncyclic_strain_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.electric_field",
        "href": "api/ansys.dpf.core.operators.result.electric_field.html#electric_field",
        "title": "electric_field",
        "section": "electric_field",
        "text": "Autogenerated DPF operator classes.\nelectric_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.add_rigid_body_motion",
        "href": "api/ansys.dpf.core.operators.result.add_rigid_body_motion.html#add_rigid_body_motion",
        "title": "add_rigid_body_motion",
        "section": "add_rigid_body_motion",
        "text": "Autogenerated DPF operator classes.\nadd_rigid_body_motion"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.epsilon",
        "href": "api/ansys.dpf.core.operators.result.epsilon.html#epsilon",
        "title": "epsilon",
        "section": "epsilon",
        "text": "Autogenerated DPF operator classes.\nepsilon"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.eigen_vectors_fc",
        "href": "api/ansys.dpf.core.operators.invariant.eigen_vectors_fc.html#eigen_vectors_fc",
        "title": "eigen_vectors_fc",
        "section": "eigen_vectors_fc",
        "text": "Autogenerated DPF operator classes.\neigen_vectors_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.density",
        "href": "api/ansys.dpf.core.operators.result.density.html#density",
        "title": "density",
        "section": "density",
        "text": "Autogenerated DPF operator classes.\ndensity"
    },
    {
        "objectID": "user_guide/model",
        "href": "user_guide/model.html#dpf-model",
        "title": "DPF model",
        "section": "DPF model",
        "text": "The DPF model provides the starting point for opening a result file.\nFrom the Model object, you can connect various operators and display results\nand data.\nTo create an instance of the Model object, import the pydpf-core package and\nload a result file. The path that you provide must be an absolute path\nor a path relative to the DPF server.\nTo understand what is available in the result file, you can print the model\n(or any other instance):\nFor a comprehensive model example, see ref_basic_example.\nFor a description of the Model object, see ref_model.\nDPF model\nModel\nModel\npydpf-core\nModel"
    },
    {
        "objectID": "user_guide/model",
        "href": "user_guide/model.html#model-metadata",
        "title": "DPF model > Model metadata",
        "section": "Model metadata",
        "text": "To access all information about an analysis, you can use model metadata:\nType of analysis\nTime or frequency descriptions\nMesh\nAvailable results\nThis example shows how you get the analysis type:\nThis example shows how you get mesh information:\nThis example shows how you get time sets:\nFor a description of the Metadata object, see ref_model.\nModel metadata\nMetadata"
    },
    {
        "objectID": "user_guide/model",
        "href": "user_guide/model.html#model-results",
        "title": "DPF model > Model results",
        "section": "Model results",
        "text": "The model contains the results attribute, which you can use to\ncreate operators to access certain results.\nThis example shows how you view available results:\nAvailable results of the model.\nOrganizes the results from DPF into accessible methods. All the available\nresults are dynamically created depending on the model’s class:ansys.dpf.core.result_info.\nresults – Available results of the model if possible, else\nreturns common results.\nResults, CommonResults\nResult provider helper wrapping all types of provider available for a\ngiven result file.\nResult\nExtract the result object from a model.\nAccess the displacement at all times.\nWith the results attribute, choosing the time, frequencies, or spatial subset\non which to get a given result is straightforward.\nThis example shows how you get displacement results on all time frequencies on\nthe mesh scoping:\nFor an example using the Result object, see ref_transient_easy_time_scoping.\nFor a description of the Model object, see ref_results.\nModel results\nresults\nresults\nResult\nModel"
    },
    {
        "objectID": "user_guide/model",
        "href": "user_guide/model.html#[]",
        "title": "DPF model > Model results",
        "section": "Model results",
        "text": "Model.results\n\nAvailable results of the model.\n\nOrganizes the results from DPF into accessible methods. All the available\nresults are dynamically created depending on the model’s class:ansys.dpf.core.result_info.\n\nReturns\n\nresults – Available results of the model if possible, else\nreturns common results.\n\nReturn type\n\nResults, CommonResults\n\n\n\nall types of results\n\nResult provider helper wrapping all types of provider available for a\ngiven result file.\n\nExamples\n\n>>> from ansys.dpf import core as dpf\n>>> from ansys.dpf.core import examples\n>>> model = dpf.Model(examples.find_electric_therm())\n>>> v = model.results.electric_potential\n>>> dissip = model.results.thermal_dissipation_energy\n\nType\n\nResult\n\nExamples\n\nExtract the result object from a model.\n\n>>> from ansys.dpf import core as dpf\n>>> from ansys.dpf.core import examples\n>>> model = dpf.Model(examples.find_simple_bar())\n>>> results = model.results # printable object\n\nAccess the displacement at all times.\n\n>>> from ansys.dpf.core import Model\n>>> from ansys.dpf.core import examples\n>>> transient = examples.download_transient_result()\n>>> model = Model(transient)\n>>> displacements = model.results.displacement.on_all_time_freqs.eval()"
    },
    {
        "objectID": "user_guide/model",
        "href": "user_guide/model.html#[]",
        "title": "DPF model > Model results",
        "section": "Model results",
        "text": "all types of results\n\nResult provider helper wrapping all types of provider available for a\ngiven result file.\n\nExamples\n\n>>> from ansys.dpf import core as dpf\n>>> from ansys.dpf.core import examples\n>>> model = dpf.Model(examples.find_electric_therm())\n>>> v = model.results.electric_potential\n>>> dissip = model.results.thermal_dissipation_energy\n\nType\n\nResult"
    },
    {
        "objectID": "user_guide/model",
        "href": "user_guide/model.html#api-reference",
        "title": "DPF model > API reference",
        "section": "API reference",
        "text": "For more information, see ref_model or ref_results.\nAPI reference"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.component_selector_fc",
        "href": "api/ansys.dpf.core.operators.logic.component_selector_fc.html#component_selector_fc",
        "title": "component_selector_fc",
        "section": "component_selector_fc",
        "text": "Autogenerated DPF operator classes.\ncomponent_selector_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.set_property",
        "href": "api/ansys.dpf.core.operators.utility.set_property.html#set_property",
        "title": "set_property",
        "section": "set_property",
        "text": "Autogenerated DPF operator classes.\nset_property"
    },
    {
        "objectID": "api/ansys.dpf.core.scopings_container",
        "href": "api/ansys.dpf.core.scopings_container.html#scopingscontainer",
        "title": "ScopingsContainer",
        "section": "ScopingsContainer",
        "text": "Contains classes associated to the DPF ScopingsContainer\nScopingsContainer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sqr",
        "href": "api/ansys.dpf.core.operators.math.sqr.html#sqr",
        "title": "sqr",
        "section": "sqr",
        "text": "Autogenerated DPF operator classes.\nsqr"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.y_plus",
        "href": "api/ansys.dpf.core.operators.result.y_plus.html#y_plus",
        "title": "y_plus",
        "section": "y_plus",
        "text": "Autogenerated DPF operator classes.\ny_plus"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.change_location",
        "href": "api/ansys.dpf.core.operators.utility.change_location.html#change_location",
        "title": "change_location",
        "section": "change_location",
        "text": "Autogenerated DPF operator classes.\nchange_location"
    },
    {
        "objectID": "api/ansys.dpf.core.nodes",
        "href": "api/ansys.dpf.core.nodes.html#nodes",
        "title": "Nodes",
        "section": "Nodes",
        "text": "Nodes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.field_high_pass_fc",
        "href": "api/ansys.dpf.core.operators.filter.field_high_pass_fc.html#field_high_pass_fc",
        "title": "field_high_pass_fc",
        "section": "field_high_pass_fc",
        "text": "Autogenerated DPF operator classes.\nfield_high_pass_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_Z",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_Z.html#compute_stress_z",
        "title": "compute_stress_Z",
        "section": "compute_stress_Z",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_torsional_moment",
        "href": "api/ansys.dpf.core.operators.result.beam_torsional_moment.html#beam_torsional_moment",
        "title": "beam_torsional_moment",
        "section": "beam_torsional_moment",
        "text": "Autogenerated DPF operator classes.\nbeam_torsional_moment"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.mesh_info_provider",
        "href": "api/ansys.dpf.core.operators.metadata.mesh_info_provider.html#mesh_info_provider",
        "title": "mesh_info_provider",
        "section": "mesh_info_provider",
        "text": "Autogenerated DPF operator classes.\nmesh_info_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_bartlett_fc",
        "href": "api/ansys.dpf.core.operators.math.window_bartlett_fc.html#window_bartlett_fc",
        "title": "window_bartlett_fc",
        "section": "window_bartlett_fc",
        "text": "Autogenerated DPF operator classes.\nwindow_bartlett_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.rigid_transformation_provider",
        "href": "api/ansys.dpf.core.operators.result.rigid_transformation_provider.html#rigid_transformation_provider",
        "title": "rigid_transformation_provider",
        "section": "rigid_transformation_provider",
        "text": "Autogenerated DPF operator classes.\nrigid_transformation_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.write_motion_dfmf_file",
        "href": "api/ansys.dpf.core.operators.result.write_motion_dfmf_file.html#write_motion_dfmf_file",
        "title": "write_motion_dfmf_file",
        "section": "write_motion_dfmf_file",
        "text": "Autogenerated DPF operator classes.\nwrite_motion_dfmf_file"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.compute_element_centroids",
        "href": "api/ansys.dpf.core.operators.scoping.compute_element_centroids.html#compute_element_centroids",
        "title": "compute_element_centroids",
        "section": "compute_element_centroids",
        "text": "Autogenerated DPF operator classes.\ncompute_element_centroids"
    },
    {
        "objectID": "api/ansys.dpf.core.support",
        "href": "api/ansys.dpf.core.support.html#support",
        "title": "Support",
        "section": "Support",
        "text": "Support"
    },
    {
        "objectID": "examples/06-plotting/02-solution_combination",
        "href": "examples/06-plotting/02-solution_combination.html#load-case-combination-for-principal-stress",
        "title": "Load case combination for principal stress",
        "section": "Load case combination for principal stress",
        "text": "This example shows how to get a principal stress load case combination using DPF\nAnd highlight min/max values in the plot.\nImport the ansys.dpf.core module, included examples file, and the DpfPlotter\nmodule.\nOpen an example and print the Model object. The\nModel class helps to organize access\nmethods for the result by keeping track of the operators and data sources\nused by the result file.\nPrinting the model displays this metadata:\nAnalysis type\nAvailable results\nSize of the mesh\nNumber of results\nGet the stress tensor and connect time scoping.\nMake sure that you define dpf.locations.nodal as the scoping location because\nlabels are supported only for nodal results.\nThis code performs solution combination on two load cases, LC1 and LC2.\nYou can access individual load cases as the fields of a fields container for\nthe stress tensor.\nAdd load cases.\nPrincipal stresses are the Eigenvalues of the stress tensor.\nUse principal invariants to get S1, S2, and S3.\nPrint S1 (maximum principal stress).\nGet the meshed region.\nPlot the results on the mesh.\nThe label_text_size and label_point_size arguments control the font\nsize of the label.\nTotal running time of the script: (0 minutes 1.423 seconds)\nDownload Jupyter notebook: 02-solution_combination.ipynb\nDownload Python source code: 02-solution_combination.py\nDownload zipped: 02-solution_combination.zip\nGallery generated by Sphinx-Gallery\nLoad case combination for principal stress\nansys.dpf.core\nDpfPlotter\nModel\nModel\nconnect\ndpf.locations.nodal\nlabel_text_size\nlabel_point_size\nDownload Jupyter notebook: 02-solution_combination.ipynb\nDownload Python source code: 02-solution_combination.py\nDownload zipped: 02-solution_combination.zip"
    },
    {
        "objectID": "user_guide/main_entities",
        "href": "user_guide/main_entities.html#dpf-most-used-entities",
        "title": "DPF most-used entities",
        "section": "DPF most-used entities",
        "text": "DPF most-used entities"
    },
    {
        "objectID": "getting_started/dependencies",
        "href": "getting_started/dependencies.html#dependencies",
        "title": "Dependencies",
        "section": "Dependencies",
        "text": "Dependencies"
    },
    {
        "objectID": "getting_started/dependencies",
        "href": "getting_started/dependencies.html#package-dependencies",
        "title": "Dependencies > Package dependencies",
        "section": "Package dependencies",
        "text": "Dependencies for the ansys-dpf-core package are automatically checked when the\npackage is installed. Package dependencies are:\ngoogle-api-python-client\ngrpcio\nimportlib-metadata\nnumpy\npackaging\nprotobuf\npsutil\nsetuptools\ntqdm\nFor ansys-dpf-core<0.10.0, the ansys.dpf.gate, ansys.dpf.gatebin and ansys.grpc.dpf\nmodules are not included and are dependencies:\nansys.dpf.gate, which is the gate\nto the DPF C API or Python gRPC API. The gate depends on the server configuration:\nansys.grpc.dpf is the gRPC code\ngenerated from protobuf files and is a dependency of ansys-dpf-gate.\nansys.dpf.gatebin is the\noperating system-specific binaries with DPF C APIs and is a dependency of ansys-dpf-gate.\nPackage dependencies\nansys-dpf-core\nansys-dpf-core<0.10.0\nansys.dpf.gate\nansys.dpf.gatebin\nansys.grpc.dpf\nansys-dpf-gate\nansys-dpf-gate"
    },
    {
        "objectID": "getting_started/dependencies",
        "href": "getting_started/dependencies.html#optional-dependencies",
        "title": "Dependencies > Optional dependencies",
        "section": "Optional dependencies",
        "text": "For plotting, you can install these optional Python packages:\nmatplotlib package for chart plotting\npyvista package for 3D plotting\nOptional dependencies"
    },
    {
        "objectID": "api/ansys",
        "href": "api/ansys.html#ansys-namespace",
        "title": "ansys namespace",
        "section": "ansys namespace",
        "text": "ansys namespace"
    },
    {
        "objectID": "examples/07-distributed-post/03-distributed-msup_expansion_steps",
        "href": "examples/07-distributed-post/03-distributed-msup_expansion_steps.html#distributed-msup-distributed-modal-response",
        "title": "Distributed MSUP distributed modal response",
        "section": "Distributed MSUP distributed modal response",
        "text": "This example shows how to read and expand distributed files on distributed\nprocesses. The modal basis (two distributed files) is read on two remote\nservers. The modal response (two distributed files) is then read and expanded\non a third server.\nThe following diagram helps you to understand this example. It shows the operator\nchain that is used to compute the final result.\nImport the dpf-core module and its examples files.\nDistributed MSUP distributed modal response\ndpf-core"
    },
    {
        "objectID": "examples/07-distributed-post/03-distributed-msup_expansion_steps",
        "href": "examples/07-distributed-post/03-distributed-msup_expansion_steps.html#configure-the-servers",
        "title": "Distributed MSUP distributed modal response > Configure the servers",
        "section": "Configure the servers",
        "text": "Make a list of IP addresses and port numbers that DPF servers start and\nlisten on. Operator instances are created on each of these servers so that\neach server can address a different result file.\nThis example postprocesses an analysis distributed in two files.\nConsequently, it requires two remote processes.\nTo make it easier, this example starts local servers. However, you can\nconnect to any existing servers on your network.\nPrint the IP addresses and ports.\nSpecify the file path.\nConfigure the servers"
    },
    {
        "objectID": "examples/07-distributed-post/03-distributed-msup_expansion_steps",
        "href": "examples/07-distributed-post/03-distributed-msup_expansion_steps.html#create-operators-on-each-server",
        "title": "Distributed MSUP distributed modal response > Create operators on each server",
        "section": "Create operators on each server",
        "text": "On each server, create two operators, one for displacement computations\nand one for providing the mesh. Then, define their data sources. Both the\ndisplacement operator and mesh provider operator receive data from their\nrespective data files on each server.\nCreate operators on each server"
    },
    {
        "objectID": "examples/07-distributed-post/03-distributed-msup_expansion_steps",
        "href": "examples/07-distributed-post/03-distributed-msup_expansion_steps.html#create-a-local-operator-chain-for-expansion",
        "title": "Distributed MSUP distributed modal response > Create a local operator chain for expansion",
        "section": "Create a local operator chain for expansion",
        "text": "The following series of operators merge the modal basis and the meshes, read\nthe modal response, and expand the modal response with the modal basis.\nCreate a local operator chain for expansion"
    },
    {
        "objectID": "examples/07-distributed-post/03-distributed-msup_expansion_steps",
        "href": "examples/07-distributed-post/03-distributed-msup_expansion_steps.html#connect-the-operator-chains-together-and-get-the-output",
        "title": "Distributed MSUP distributed modal response > Connect the operator chains together and get the output",
        "section": "Connect the operator chains together and get the output",
        "text": "Total running time of the script: (0 minutes 10.837 seconds)\nDownload Jupyter notebook: 03-distributed-msup_expansion_steps.ipynb\nDownload Python source code: 03-distributed-msup_expansion_steps.py\nDownload zipped: 03-distributed-msup_expansion_steps.zip\nGallery generated by Sphinx-Gallery\nConnect the operator chains together and get the output\nDownload Jupyter notebook: 03-distributed-msup_expansion_steps.ipynb\nDownload Python source code: 03-distributed-msup_expansion_steps.py\nDownload zipped: 03-distributed-msup_expansion_steps.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.velocity_Z",
        "href": "api/ansys.dpf.core.operators.result.velocity_Z.html#velocity_z",
        "title": "velocity_Z",
        "section": "velocity_Z",
        "text": "Autogenerated DPF operator classes.\nvelocity_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.velocity",
        "href": "api/ansys.dpf.core.operators.result.velocity.html#velocity",
        "title": "velocity",
        "section": "velocity",
        "text": "Autogenerated DPF operator classes.\nvelocity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.data_tree_to_txt",
        "href": "api/ansys.dpf.core.operators.serialization.data_tree_to_txt.html#data_tree_to_txt",
        "title": "data_tree_to_txt",
        "section": "data_tree_to_txt",
        "text": "Autogenerated DPF operator classes.\ndata_tree_to_txt"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.normal_contact_force",
        "href": "api/ansys.dpf.core.operators.result.normal_contact_force.html#normal_contact_force",
        "title": "normal_contact_force",
        "section": "normal_contact_force",
        "text": "Autogenerated DPF operator classes.\nnormal_contact_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_moment_reaction",
        "href": "api/ansys.dpf.core.operators.result.joint_moment_reaction.html#joint_moment_reaction",
        "title": "joint_moment_reaction",
        "section": "joint_moment_reaction",
        "text": "Autogenerated DPF operator classes.\njoint_moment_reaction"
    },
    {
        "objectID": "examples/03-harmonic_analyses/index",
        "href": "examples/03-harmonic_analyses/index.html#harmonic-analysis-examples",
        "title": "Harmonic analysis examples",
        "section": "Harmonic analysis examples",
        "text": "These examples show how to use DPF to extract and manipulate\nresults from harmonic analyses.\nsphx_glr_examples_03-harmonic_analyses_00-multi_harmonic.py\nsphx_glr_examples_03-harmonic_analyses_01-modal_superposition.py\nHarmonic analysis examples"
    },
    {
        "objectID": "examples/06-plotting/07-plot_on_geometries",
        "href": "examples/06-plotting/07-plot_on_geometries.html#plot-on-geometry-elements",
        "title": "Plot on geometry elements",
        "section": "Plot on geometry elements",
        "text": "This example shows how to plot a certain field in different geometric\nobjects such as points, lines and planes.\nPlot on geometry elements"
    },
    {
        "objectID": "examples/06-plotting/07-plot_on_geometries",
        "href": "examples/06-plotting/07-plot_on_geometries.html#imports-and-load-model",
        "title": "Plot on geometry elements > Imports and load model",
        "section": "Imports and load model",
        "text": "Import modules and set context as Premium.\nLoad model from examples and print information:\nLoad model’s mesh and define camera position\n(obtained with cpos=pl.show_figure(return_cpos=True)). This will be used\nlater for plotting.\nImports and load model\ncpos=pl.show_figure(return_cpos=True)"
    },
    {
        "objectID": "examples/06-plotting/07-plot_on_geometries",
        "href": "examples/06-plotting/07-plot_on_geometries.html#create-points-line-and-plane-objects",
        "title": "Plot on geometry elements > Create points, line and plane objects",
        "section": "Create points, line and plane objects",
        "text": "Create 8 points in the corners and one in the middle:\nShow points together with the mesh\nCreate line passing through the geometry’s diagonal:\nShow line with the 3D mesh\nCreate vertical plane passing through the mid point:\nShow plane with the 3D mesh\nCreate points, line and plane objects"
    },
    {
        "objectID": "examples/06-plotting/07-plot_on_geometries",
        "href": "examples/06-plotting/07-plot_on_geometries.html#map-displacement-field-to-geometry-objects",
        "title": "Plot on geometry elements > Map displacement field to geometry objects",
        "section": "Map displacement field to geometry objects",
        "text": "Get displacement field from model:\nMap displacement to points in Points object:\nMap displacement to points in Line object:\nMap displacement to points in Plane object:\nMap displacement field to geometry objects"
    },
    {
        "objectID": "examples/06-plotting/07-plot_on_geometries",
        "href": "examples/06-plotting/07-plot_on_geometries.html#plotting-displacement-field-on-the-geometry-objects",
        "title": "Plot on geometry elements > Plotting displacement field on the geometry objects",
        "section": "Plotting displacement field on the geometry objects",
        "text": "3D plot of Points and display mesh:\n3D plot of Line and mesh.\nNote that the line is only displayed if some points are found inside the mesh:\nPlot Plane and display mesh in background.\nNote that the plane is only displayed if some points are found inside the mesh:\n2D plot (graph) of Line (line length vs displacement field):\nTotal running time of the script: (0 minutes 9.239 seconds)\nDownload Jupyter notebook: 07-plot_on_geometries.ipynb\nDownload Python source code: 07-plot_on_geometries.py\nDownload zipped: 07-plot_on_geometries.zip\nGallery generated by Sphinx-Gallery\nPlotting displacement field on the geometry objects\nDownload Jupyter notebook: 07-plot_on_geometries.ipynb\nDownload Python source code: 07-plot_on_geometries.py\nDownload zipped: 07-plot_on_geometries.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping",
        "href": "api/ansys.dpf.core.operators.scoping.html#ansysdpfcoreoperatorsscoping-package",
        "title": "ansys.dpf.core.operators.scoping package",
        "section": "ansys.dpf.core.operators.scoping package",
        "text": "ansys.dpf.core.operators.scoping package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping",
        "href": "api/ansys.dpf.core.operators.scoping.html#submodules",
        "title": "ansys.dpf.core.operators.scoping package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping",
        "href": "api/ansys.dpf.core.operators.scoping.html#module-contents",
        "title": "ansys.dpf.core.operators.scoping package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sqrt_fc",
        "href": "api/ansys.dpf.core.operators.math.sqrt_fc.html#sqrt_fc",
        "title": "sqrt_fc",
        "section": "sqrt_fc",
        "text": "Autogenerated DPF operator classes.\nsqrt_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max",
        "href": "api/ansys.dpf.core.operators.min_max.html#ansysdpfcoreoperatorsmin_max-package",
        "title": "ansys.dpf.core.operators.min_max package",
        "section": "ansys.dpf.core.operators.min_max package",
        "text": "ansys.dpf.core.operators.min_max package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max",
        "href": "api/ansys.dpf.core.operators.min_max.html#submodules",
        "title": "ansys.dpf.core.operators.min_max package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max",
        "href": "api/ansys.dpf.core.operators.min_max.html#module-contents",
        "title": "ansys.dpf.core.operators.min_max package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.spherical_to_cartesian",
        "href": "api/ansys.dpf.core.operators.geo.spherical_to_cartesian.html#spherical_to_cartesian",
        "title": "spherical_to_cartesian",
        "section": "spherical_to_cartesian",
        "text": "Autogenerated DPF operator classes.\nspherical_to_cartesian"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_YZ",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_YZ.html#elastic_strain_yz",
        "title": "elastic_strain_YZ",
        "section": "elastic_strain_YZ",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_YZ"
    },
    {
        "objectID": "api/ansys.dpf.core.available_result",
        "href": "api/ansys.dpf.core.available_result.html#availableresult",
        "title": "AvailableResult",
        "section": "AvailableResult",
        "text": "AvailableResult"
    },
    {
        "objectID": "api/ansys.dpf.core.any",
        "href": "api/ansys.dpf.core.any.html#any",
        "title": "Any",
        "section": "Any",
        "text": "Any"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.export_symbolic_workflow",
        "href": "api/ansys.dpf.core.operators.serialization.export_symbolic_workflow.html#export_symbolic_workflow",
        "title": "export_symbolic_workflow",
        "section": "export_symbolic_workflow",
        "text": "Autogenerated DPF operator classes.\nexport_symbolic_workflow"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_any",
        "href": "api/ansys.dpf.core.operators.utility.merge_any.html#merge_any",
        "title": "merge_any",
        "section": "merge_any",
        "text": "Autogenerated DPF operator classes.\nmerge_any"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.add_constant",
        "href": "api/ansys.dpf.core.operators.math.add_constant.html#add_constant",
        "title": "add_constant",
        "section": "add_constant",
        "text": "Autogenerated DPF operator classes.\nadd_constant"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.on_named_selection",
        "href": "api/ansys.dpf.core.operators.scoping.on_named_selection.html#on_named_selection",
        "title": "on_named_selection",
        "section": "on_named_selection",
        "text": "Autogenerated DPF operator classes.\non_named_selection"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_principal_1",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_principal_1.html#thermal_strain_principal_1",
        "title": "thermal_strain_principal_1",
        "section": "thermal_strain_principal_1",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_principal_1"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timefreq_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.timefreq_high_pass.html#timefreq_high_pass",
        "title": "timefreq_high_pass",
        "section": "timefreq_high_pass",
        "text": "Autogenerated DPF operator classes.\ntimefreq_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.split_streams",
        "href": "api/ansys.dpf.core.operators.logic.split_streams.html#split_streams",
        "title": "split_streams",
        "section": "split_streams",
        "text": "Autogenerated DPF operator classes.\nsplit_streams"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.make_one_on_comp",
        "href": "api/ansys.dpf.core.operators.math.make_one_on_comp.html#make_one_on_comp",
        "title": "make_one_on_comp",
        "section": "make_one_on_comp",
        "text": "Autogenerated DPF operator classes.\nmake_one_on_comp"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.element_orientations",
        "href": "api/ansys.dpf.core.operators.result.element_orientations.html#element_orientations",
        "title": "element_orientations",
        "section": "element_orientations",
        "text": "Autogenerated DPF operator classes.\nelement_orientations"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.members_in_bending_not_certified",
        "href": "api/ansys.dpf.core.operators.result.members_in_bending_not_certified.html#members_in_bending_not_certified",
        "title": "members_in_bending_not_certified",
        "section": "members_in_bending_not_certified",
        "text": "Autogenerated DPF operator classes.\nmembers_in_bending_not_certified"
    },
    {
        "objectID": "api/ansys.dpf.core.server",
        "href": "api/ansys.dpf.core.server.html#server",
        "title": "Server",
        "section": "Server",
        "text": "Contains the directives necessary to start the DPF server.\nServer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.modal_damping_ratio",
        "href": "api/ansys.dpf.core.operators.math.modal_damping_ratio.html#modal_damping_ratio",
        "title": "modal_damping_ratio",
        "section": "modal_damping_ratio",
        "text": "Autogenerated DPF operator classes.\nmodal_damping_ratio"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_XZ",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_XZ.html#compute_total_strain_xz",
        "title": "compute_total_strain_XZ",
        "section": "compute_total_strain_XZ",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.rom_data_provider",
        "href": "api/ansys.dpf.core.operators.result.rom_data_provider.html#rom_data_provider",
        "title": "rom_data_provider",
        "section": "rom_data_provider",
        "text": "Autogenerated DPF operator classes.\nrom_data_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_scopings",
        "href": "api/ansys.dpf.core.operators.utility.merge_scopings.html#merge_scopings",
        "title": "merge_scopings",
        "section": "merge_scopings",
        "text": "Autogenerated DPF operator classes.\nmerge_scopings"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_XY",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_XY.html#compute_total_strain_xy",
        "title": "compute_total_strain_XY",
        "section": "compute_total_strain_XY",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.overall_dot",
        "href": "api/ansys.dpf.core.operators.math.overall_dot.html#overall_dot",
        "title": "overall_dot",
        "section": "overall_dot",
        "text": "Autogenerated DPF operator classes.\noverall_dot"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.compute_residual_and_error",
        "href": "api/ansys.dpf.core.operators.math.compute_residual_and_error.html#compute_residual_and_error",
        "title": "compute_residual_and_error",
        "section": "compute_residual_and_error",
        "text": "Autogenerated DPF operator classes.\ncompute_residual_and_error"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_tr_shear_stress",
        "href": "api/ansys.dpf.core.operators.result.beam_tr_shear_stress.html#beam_tr_shear_stress",
        "title": "beam_tr_shear_stress",
        "section": "beam_tr_shear_stress",
        "text": "Autogenerated DPF operator classes.\nbeam_tr_shear_stress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.absolute_value_by_component_fc",
        "href": "api/ansys.dpf.core.operators.math.absolute_value_by_component_fc.html#absolute_value_by_component_fc",
        "title": "absolute_value_by_component_fc",
        "section": "absolute_value_by_component_fc",
        "text": "Autogenerated DPF operator classes.\nabsolute_value_by_component_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_sliding_distance",
        "href": "api/ansys.dpf.core.operators.result.contact_sliding_distance.html#contact_sliding_distance",
        "title": "contact_sliding_distance",
        "section": "contact_sliding_distance",
        "text": "Autogenerated DPF operator classes.\ncontact_sliding_distance"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.extend_to_mid_nodes_fc",
        "href": "api/ansys.dpf.core.operators.averaging.extend_to_mid_nodes_fc.html#extend_to_mid_nodes_fc",
        "title": "extend_to_mid_nodes_fc",
        "section": "extend_to_mid_nodes_fc",
        "text": "Autogenerated DPF operator classes.\nextend_to_mid_nodes_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_X",
        "href": "api/ansys.dpf.core.operators.result.stress_X.html#stress_x",
        "title": "stress_X",
        "section": "stress_X",
        "text": "Autogenerated DPF operator classes.\nstress_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.accumulate_min_over_label_fc",
        "href": "api/ansys.dpf.core.operators.math.accumulate_min_over_label_fc.html#accumulate_min_over_label_fc",
        "title": "accumulate_min_over_label_fc",
        "section": "accumulate_min_over_label_fc",
        "text": "Autogenerated DPF operator classes.\naccumulate_min_over_label_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.migrate_file_to_vtk",
        "href": "api/ansys.dpf.core.operators.serialization.migrate_file_to_vtk.html#migrate_file_to_vtk",
        "title": "migrate_file_to_vtk",
        "section": "migrate_file_to_vtk",
        "text": "Autogenerated DPF operator classes.\nmigrate_file_to_vtk"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_property_fields",
        "href": "api/ansys.dpf.core.operators.utility.merge_property_fields.html#merge_property_fields",
        "title": "merge_property_fields",
        "section": "merge_property_fields",
        "text": "Autogenerated DPF operator classes.\nmerge_property_fields"
    },
    {
        "objectID": "examples/04-advanced/10-asme_secviii_divtwo",
        "href": "examples/04-advanced/10-asme_secviii_divtwo.html#pressure-vessel-analysis-according-to-an-asme-standard",
        "title": "Pressure vessel analysis according to an ASME standard",
        "section": "Pressure vessel analysis according to an ASME standard",
        "text": "This example demonstrates how you can use PyDPF to postprocess a Mechanical\nmodel according to the ASME Section VIII Division 2 standard for pressure\nvessel designs.\nThis example is taken from Workshop 02.1 from Ansys Mechanical Advanced Topics.\nInstead of using several user defined results as it is done in the workshop,\nDPF is able to calculate the triaxial strain limit and compare it with the\nequivalent plastic strain, as specified in Equation 5.7 assuming 0 forming strain.\nPlease be aware that this is just an example, so it is the user’s duty to verify\nthat calculation is made according to latest ASME standard.\nPressure vessel analysis according to an ASME standard"
    },
    {
        "objectID": "examples/04-advanced/10-asme_secviii_divtwo",
        "href": "examples/04-advanced/10-asme_secviii_divtwo.html#parameters-input",
        "title": "Pressure vessel analysis according to an ASME standard > Parameters input",
        "section": "Parameters input",
        "text": "You must go to ASME Section III Division 2 to get values for the parameters\nalfasl and m2. This is the code for introducing these parameters\nmanually:\nalfasl = input(“Introduce alfasl parameter from ASMEn”)\nalfasl = float(alfasl)\nm2 = input(“Introduce m2 parameter from ASMEn”)\nm2 = float(m2)\nFor this exercise, alfasl = 2.2 and m2 = .288, which is the same\nas the original.\nParameters input\nalfasl\nm2\nalfasl\nalfasl\nalfasl\nm2\nm2\nm2\nalfasl\nm2"
    },
    {
        "objectID": "examples/04-advanced/10-asme_secviii_divtwo",
        "href": "examples/04-advanced/10-asme_secviii_divtwo.html#stresses-and-strains",
        "title": "Pressure vessel analysis according to an ASME standard > Stresses and strains",
        "section": "Stresses and strains",
        "text": "Stresses and strains are read. To get the same results as Mechanical, read\nelemental nodal strains and apply von Mises invariant. This operator\ndoes not have an option for defining the effective Poisson’s ratio.\nConsequently, a correction factor is applied.\nStresses and strains"
    },
    {
        "objectID": "examples/04-advanced/10-asme_secviii_divtwo",
        "href": "examples/04-advanced/10-asme_secviii_divtwo.html#triaxial-strain-limit-calculation",
        "title": "Pressure vessel analysis according to an ASME standard > Triaxial strain limit calculation",
        "section": "Triaxial strain limit calculation",
        "text": "Triaxial strain limit calculation"
    },
    {
        "objectID": "examples/04-advanced/10-asme_secviii_divtwo",
        "href": "examples/04-advanced/10-asme_secviii_divtwo.html#strain-limit-condition-less-than-1-pass-the-criteria",
        "title": "Pressure vessel analysis according to an ASME standard > Strain limit condition (less than 1 pass the criteria)",
        "section": "Strain limit condition (less than 1 pass the criteria)",
        "text": "Strain limit condition (less than 1 pass the criteria)"
    },
    {
        "objectID": "examples/04-advanced/10-asme_secviii_divtwo",
        "href": "examples/04-advanced/10-asme_secviii_divtwo.html#strain-limit-condition-is-plot",
        "title": "Pressure vessel analysis according to an ASME standard > Strain limit condition is plot",
        "section": "Strain limit condition is plot",
        "text": "Total running time of the script: (0 minutes 2.188 seconds)\nDownload Jupyter notebook: 10-asme_secviii_divtwo.ipynb\nDownload Python source code: 10-asme_secviii_divtwo.py\nDownload zipped: 10-asme_secviii_divtwo.zip\nGallery generated by Sphinx-Gallery\nStrain limit condition is plot\nDownload Jupyter notebook: 10-asme_secviii_divtwo.ipynb\nDownload Python source code: 10-asme_secviii_divtwo.py\nDownload zipped: 10-asme_secviii_divtwo.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.phase",
        "href": "api/ansys.dpf.core.operators.math.phase.html#phase",
        "title": "phase",
        "section": "phase",
        "text": "Autogenerated DPF operator classes.\nphase"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_XZ",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_XZ.html#thermal_strain_xz",
        "title": "thermal_strain_XZ",
        "section": "thermal_strain_XZ",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.img_part",
        "href": "api/ansys.dpf.core.operators.math.img_part.html#img_part",
        "title": "img_part",
        "section": "img_part",
        "text": "Autogenerated DPF operator classes.\nimg_part"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.cartesian_to_spherical",
        "href": "api/ansys.dpf.core.operators.geo.cartesian_to_spherical.html#cartesian_to_spherical",
        "title": "cartesian_to_spherical",
        "section": "cartesian_to_spherical",
        "text": "Autogenerated DPF operator classes.\ncartesian_to_spherical"
    },
    {
        "objectID": "api/ansys.dpf.core.dimensionality",
        "href": "api/ansys.dpf.core.dimensionality.html#dimensionality",
        "title": "Dimensionality",
        "section": "Dimensionality",
        "text": "Dimensionality"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.component_selector",
        "href": "api/ansys.dpf.core.operators.logic.component_selector.html#component_selector",
        "title": "component_selector",
        "section": "component_selector",
        "text": "Autogenerated DPF operator classes.\ncomponent_selector"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.time_integration",
        "href": "api/ansys.dpf.core.operators.math.time_integration.html#time_integration",
        "title": "time_integration",
        "section": "time_integration",
        "text": "Autogenerated DPF operator classes.\ntime_integration"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "examples/08-python-operators/index",
        "href": "examples/08-python-operators/index.html#examples-of-creating-custom-operator-plugins",
        "title": "Examples of creating custom operator plugins",
        "section": "Examples of creating custom operator plugins",
        "text": "These examples show how to create a basic operator plugin or plug-in\npackages with multiple operators. Plugins wrap your custom operators\nso that you can use them like native DPF operators.\nsphx_glr_examples_08-python-operators_00-wrapping_numpy_capabilities.py\nsphx_glr_examples_08-python-operators_01-package_python_operators.py\nsphx_glr_examples_08-python-operators_02-python_operators_with_dependencies.py\nExamples of creating custom operator plugins"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_hanning",
        "href": "api/ansys.dpf.core.operators.math.window_hanning.html#window_hanning",
        "title": "window_hanning",
        "section": "window_hanning",
        "text": "Autogenerated DPF operator classes.\nwindow_hanning"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_internal_energy",
        "href": "api/ansys.dpf.core.operators.result.global_internal_energy.html#global_internal_energy",
        "title": "global_internal_energy",
        "section": "global_internal_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_internal_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_thermal_closure_XZ",
        "href": "api/ansys.dpf.core.operators.result.gasket_thermal_closure_XZ.html#gasket_thermal_closure_xz",
        "title": "gasket_thermal_closure_XZ",
        "section": "gasket_thermal_closure_XZ",
        "text": "Autogenerated DPF operator classes.\ngasket_thermal_closure_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.time_freq_provider",
        "href": "api/ansys.dpf.core.operators.metadata.time_freq_provider.html#time_freq_provider",
        "title": "time_freq_provider",
        "section": "time_freq_provider",
        "text": "Autogenerated DPF operator classes.\ntime_freq_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_XY",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_XY.html#compute_stress_xy",
        "title": "compute_stress_XY",
        "section": "compute_stress_XY",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_principal_1",
        "href": "api/ansys.dpf.core.operators.result.stress_principal_1.html#stress_principal_1",
        "title": "stress_principal_1",
        "section": "stress_principal_1",
        "text": "Autogenerated DPF operator classes.\nstress_principal_1"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain.html#thermal_strain",
        "title": "thermal_strain",
        "section": "thermal_strain",
        "text": "Autogenerated DPF operator classes.\nthermal_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_rotation_by_euler_nodes",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_rotation_by_euler_nodes.html#elastic_strain_rotation_by_euler_nodes",
        "title": "elastic_strain_rotation_by_euler_nodes",
        "section": "elastic_strain_rotation_by_euler_nodes",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_rotation_by_euler_nodes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.default_value",
        "href": "api/ansys.dpf.core.operators.utility.default_value.html#default_value",
        "title": "default_value",
        "section": "default_value",
        "text": "Autogenerated DPF operator classes.\ndefault_value"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timescoping_signed_high_pass",
        "href": "api/ansys.dpf.core.operators.filter.timescoping_signed_high_pass.html#timescoping_signed_high_pass",
        "title": "timescoping_signed_high_pass",
        "section": "timescoping_signed_high_pass",
        "text": "Autogenerated DPF operator classes.\ntimescoping_signed_high_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.surface_heat_rate",
        "href": "api/ansys.dpf.core.operators.result.surface_heat_rate.html#surface_heat_rate",
        "title": "surface_heat_rate",
        "section": "surface_heat_rate",
        "text": "Autogenerated DPF operator classes.\nsurface_heat_rate"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_scopings_containers",
        "href": "api/ansys.dpf.core.operators.utility.merge_scopings_containers.html#merge_scopings_containers",
        "title": "merge_scopings_containers",
        "section": "merge_scopings_containers",
        "text": "Autogenerated DPF operator classes.\nmerge_scopings_containers"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.heat_flux_Z",
        "href": "api/ansys.dpf.core.operators.result.heat_flux_Z.html#heat_flux_z",
        "title": "heat_flux_Z",
        "section": "heat_flux_Z",
        "text": "Autogenerated DPF operator classes.\nheat_flux_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.field_definition",
        "href": "api/ansys.dpf.core.field_definition.html#fielddefinition",
        "title": "FieldDefinition",
        "section": "FieldDefinition",
        "text": "FieldDefinition"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh",
        "href": "api/ansys.dpf.core.operators.mesh.html#ansysdpfcoreoperatorsmesh-package",
        "title": "ansys.dpf.core.operators.mesh package",
        "section": "ansys.dpf.core.operators.mesh package",
        "text": "ansys.dpf.core.operators.mesh package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh",
        "href": "api/ansys.dpf.core.operators.mesh.html#submodules",
        "title": "ansys.dpf.core.operators.mesh package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh",
        "href": "api/ansys.dpf.core.operators.mesh.html#module-contents",
        "title": "ansys.dpf.core.operators.mesh package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.creep_strain_energy_density",
        "href": "api/ansys.dpf.core.operators.result.creep_strain_energy_density.html#creep_strain_energy_density",
        "title": "creep_strain_energy_density",
        "section": "creep_strain_energy_density",
        "text": "Autogenerated DPF operator classes.\ncreep_strain_energy_density"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.json_to_data_tree",
        "href": "api/ansys.dpf.core.operators.serialization.json_to_data_tree.html#json_to_data_tree",
        "title": "json_to_data_tree",
        "section": "json_to_data_tree",
        "text": "Autogenerated DPF operator classes.\njson_to_data_tree"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_hourglass_energy",
        "href": "api/ansys.dpf.core.operators.result.global_hourglass_energy.html#global_hourglass_energy",
        "title": "global_hourglass_energy",
        "section": "global_hourglass_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_hourglass_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.descending_sort_fc",
        "href": "api/ansys.dpf.core.operators.logic.descending_sort_fc.html#descending_sort_fc",
        "title": "descending_sort_fc",
        "section": "descending_sort_fc",
        "text": "Autogenerated DPF operator classes.\ndescending_sort_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.heat_flux",
        "href": "api/ansys.dpf.core.operators.result.heat_flux.html#heat_flux",
        "title": "heat_flux",
        "section": "heat_flux",
        "text": "Autogenerated DPF operator classes.\nheat_flux"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#terms-and-concepts",
        "title": "Terms and concepts",
        "section": "Terms and concepts",
        "text": "DPF sees fields of data, not physical results. This makes DPF a\nvery versatile tool that can be used across teams, projects, and\nsimulations.\nTerms and concepts"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#key-terms",
        "title": "Terms and concepts > Key terms",
        "section": "Key terms",
        "text": "Here are descriptions for key DPF terms:\nData source: One or more files containing analysis results.\nField: Main simulation data container.\nField container: For a transient, harmonic, modal, or multi-step\nstatic analysis, a set of fields, with one field for each time step\nor frequency.\nLocation: Type of topology associated with the data container. DPF\nuses three different spatial locations for finite element data: Nodal,\nElemental, and ElementalNodal.\nOperators: Objects that are used to create, transform, and stream the data.\nAn operator is composed of a core and pins. The core handles the\ncalculation, and the pins provide input data to and output data from\nthe operator.\nScoping: Spatial and/or temporal subset of a model’s support.\nSupport: Physical entity that the field is associated with. For example,\nthe support can be a mesh, geometrical entity, or time or frequency values.\nWorkflow: Global entity that is used to evaluate the data produced\nby chained operators.\nMeshed region: Entity describing a mesh. Node and element scopings,\nelement types, connectivity (list of node indices composing each element) and\nnode coordinates are the fundamental entities composing the meshed region.\nKey terms\nNodal\nElemental\nElementalNodal"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#scoping",
        "title": "Terms and concepts > Scoping",
        "section": "Scoping",
        "text": "In most cases, you do not want to work with an entire set of data\nbut rather with a subset. To achieve this, you define\na scoping, which is a subset of the model’s support.\nTypically, scoping can represent node IDs, element IDs, time steps,\nfrequencies, and joints. Scoping describes a spatial and/or temporal\nsubset that the field is scoped on.\nScoping"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#field-data",
        "title": "Terms and concepts > Field data",
        "section": "Field data",
        "text": "In DPF, field data is always associated with its scoping and support, making\nthe field a self-describing piece of data. For example, in a field of nodal\ndisplacement, the displacement is the simulation data, and the associated\nnodes are the scoping. A field can also be defined by its dimensionality,\nunit of data, and location.\nField data"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#location",
        "title": "Terms and concepts > Location",
        "section": "Location",
        "text": "The location is the type of topology associated with the data container. For\nfinite element data, the location is one of three spatial locations: Nodal,\nElemental, or ElementalNodal.\nA Nodal location describes data computed on the nodes. A node is identified\nby an ID, which is typically a node number.\nAn Elemental location describes data computed on the element itself. An element\nis identified by an ID, which is typically an element number.\nAn ElementalNodal location describes data defined on the nodes of the elements.\nTo retrieve an elemental node, you must use the ID for the element. To achieve\nthis, you define an elemental scoping or nodal scoping.\nLocation\nNodal\nElemental\nElementalNodal\nNodal\nElemental\nElementalNodal"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#concept-summary",
        "title": "Terms and concepts > Concept summary",
        "section": "Concept summary",
        "text": "This image summarizes the preceding concepts:\nConcept summary"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#operators",
        "title": "Terms and concepts > Operators",
        "section": "Operators",
        "text": "You use ref_dpf_operators_reference to create, transform, and stream the data. An\noperator is composed of a core and input and output pins.\nThe core handles the calculation.\nThe input and output pins, like those in an integrated circuit in electronics,\nsubmit data to the operator and output the computed result from the operator.\nOperators"
    },
    {
        "objectID": "user_guide/concepts/concepts",
        "href": "user_guide/concepts/concepts.html#workflows",
        "title": "Terms and concepts > Workflows",
        "section": "Workflows",
        "text": "You can chain operators together to create a workflow, which is a global entity\nthat you use to evaluate data produced by operators. A workflow requires inputs\nto operators, which computes requested outputs.\nThink of a workflow as a black box in which some operators are chained,\ncomputing the information for which the workflow is made:\nThe following image shows operators that have been chained together to create a\ntotal deformation workflow. You can use this workflow in any simulation\nworkflow with any data sources as inputs.\nWorkflows"
    },
    {
        "objectID": "examples/15-cfx/index",
        "href": "examples/15-cfx/index.html#cfx-examples",
        "title": "CFX examples",
        "section": "CFX examples",
        "text": "These examples show how to post-process CFX result files.\nsphx_glr_examples_15-cfx_00-cfx_res_files.py\nCFX examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.reaction_force_Y",
        "href": "api/ansys.dpf.core.operators.result.reaction_force_Y.html#reaction_force_y",
        "title": "reaction_force_Y",
        "section": "reaction_force_Y",
        "text": "Autogenerated DPF operator classes.\nreaction_force_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_equivalent_mass",
        "href": "api/ansys.dpf.core.operators.result.cyclic_equivalent_mass.html#cyclic_equivalent_mass",
        "title": "cyclic_equivalent_mass",
        "section": "cyclic_equivalent_mass",
        "text": "Autogenerated DPF operator classes.\ncyclic_equivalent_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.ds_get_attribute",
        "href": "api/ansys.dpf.core.operators.utility.ds_get_attribute.html#ds_get_attribute",
        "title": "ds_get_attribute",
        "section": "ds_get_attribute",
        "text": "Autogenerated DPF operator classes.\nds_get_attribute"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max_fc_inc",
        "href": "api/ansys.dpf.core.operators.min_max.min_max_fc_inc.html#min_max_fc_inc",
        "title": "min_max_fc_inc",
        "section": "min_max_fc_inc",
        "text": "Autogenerated DPF operator classes.\nmin_max_fc_inc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.torque",
        "href": "api/ansys.dpf.core.operators.result.torque.html#torque",
        "title": "torque",
        "section": "torque",
        "text": "Autogenerated DPF operator classes.\ntorque"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.exponential_fc",
        "href": "api/ansys.dpf.core.operators.math.exponential_fc.html#exponential_fc",
        "title": "exponential_fc",
        "section": "exponential_fc",
        "text": "Autogenerated DPF operator classes.\nexponential_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.rigid_transformation",
        "href": "api/ansys.dpf.core.operators.result.rigid_transformation.html#rigid_transformation",
        "title": "rigid_transformation",
        "section": "rigid_transformation",
        "text": "Autogenerated DPF operator classes.\nrigid_transformation"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_energy_ratio_wo_eroded",
        "href": "api/ansys.dpf.core.operators.result.global_energy_ratio_wo_eroded.html#global_energy_ratio_wo_eroded",
        "title": "global_energy_ratio_wo_eroded",
        "section": "global_energy_ratio_wo_eroded",
        "text": "Autogenerated DPF operator classes.\nglobal_energy_ratio_wo_eroded"
    },
    {
        "objectID": "api/ansys.dpf.core.unit_system",
        "href": "api/ansys.dpf.core.unit_system.html#unitsystem",
        "title": "UnitSystem",
        "section": "UnitSystem",
        "text": "UnitSystem"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.norm",
        "href": "api/ansys.dpf.core.operators.math.norm.html#norm",
        "title": "norm",
        "section": "norm",
        "text": "Autogenerated DPF operator classes.\nnorm"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.invariants_fc",
        "href": "api/ansys.dpf.core.operators.invariant.invariants_fc.html#invariants_fc",
        "title": "invariants_fc",
        "section": "invariants_fc",
        "text": "Autogenerated DPF operator classes.\ninvariants_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_eroded_internal_energy",
        "href": "api/ansys.dpf.core.operators.result.part_eroded_internal_energy.html#part_eroded_internal_energy",
        "title": "part_eroded_internal_energy",
        "section": "part_eroded_internal_energy",
        "text": "Autogenerated DPF operator classes.\npart_eroded_internal_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.cyclic_support",
        "href": "api/ansys.dpf.core.cyclic_support.html#cyclic-support",
        "title": "Cyclic Support",
        "section": "Cyclic Support",
        "text": "Cyclic Support"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_deformation",
        "href": "api/ansys.dpf.core.operators.result.gasket_deformation.html#gasket_deformation",
        "title": "gasket_deformation",
        "section": "gasket_deformation",
        "text": "Autogenerated DPF operator classes.\ngasket_deformation"
    },
    {
        "objectID": "examples/10-mesh_operations/05-skin_extraction",
        "href": "examples/10-mesh_operations/05-skin_extraction.html#extract-the-skin-from-a-mesh",
        "title": "Extract the skin from a mesh",
        "section": "Extract the skin from a mesh",
        "text": "Extracting the skin of a mesh to reduce the amount of data to operate on\ncan be useful for specific results and for performance.\nCreate a model object to establish a connection with an\nexample result file and then extract:\nExtract the skin from a mesh"
    },
    {
        "objectID": "examples/10-mesh_operations/05-skin_extraction",
        "href": "examples/10-mesh_operations/05-skin_extraction.html#create-the-workflow",
        "title": "Extract the skin from a mesh > Create the workflow",
        "section": "Create the workflow",
        "text": "Maximum principal stress usually occurs on the skin of the\nmodel. Computing results only on this skin reduces the data size.\nPlot the mesh skin:\nCompute the stress principal invariants on the skin nodes only:\nCreate the workflow"
    },
    {
        "objectID": "examples/10-mesh_operations/05-skin_extraction",
        "href": "examples/10-mesh_operations/05-skin_extraction.html#manipulate-data-locally",
        "title": "Extract the skin from a mesh > Manipulate data locally",
        "section": "Manipulate data locally",
        "text": "This example goes over the fields, keeping the largest invariant value\nby node if the averaged value of invariants is large enough.\nExploring data allows you to customize it to meet your needs.\nManipulate data locally"
    },
    {
        "objectID": "examples/10-mesh_operations/05-skin_extraction",
        "href": "examples/10-mesh_operations/05-skin_extraction.html#plot-result-field",
        "title": "Extract the skin from a mesh > Plot result field",
        "section": "Plot result field",
        "text": "Plot the result field on the skin mesh:\nPlot result field"
    },
    {
        "objectID": "examples/10-mesh_operations/05-skin_extraction",
        "href": "examples/10-mesh_operations/05-skin_extraction.html#plot-initial-invariants",
        "title": "Extract the skin from a mesh > Plot initial invariants",
        "section": "Plot initial invariants",
        "text": "Plot the initial invariants on the skin mesh:\nTotal running time of the script: (0 minutes 6.864 seconds)\nDownload Jupyter notebook: 05-skin_extraction.ipynb\nDownload Python source code: 05-skin_extraction.py\nDownload zipped: 05-skin_extraction.zip\nGallery generated by Sphinx-Gallery\nPlot initial invariants\nDownload Jupyter notebook: 05-skin_extraction.ipynb\nDownload Python source code: 05-skin_extraction.py\nDownload zipped: 05-skin_extraction.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.dpf_array",
        "href": "api/ansys.dpf.core.dpf_array.html#dpfarray",
        "title": "DPFArray",
        "section": "DPFArray",
        "text": "Overload of numpy ndarray <https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html>`_\nmanaging DPFVector (memory owner of vector data in DPF C APIs) memory and updates.\nvec (DPFVectorBase) – DPFVector instance to manage and optionally update when the DPFArray is deleted or committed.\nUpdates the data server side when necessary\nDPFArray"
    },
    {
        "objectID": "api/ansys.dpf.core.dpf_array",
        "href": "api/ansys.dpf.core.dpf_array.html#ansys.dpf.core.dpf_array.DPFArray",
        "title": "DPFArray > DPFArray > DPFArray",
        "section": "DPFArray > DPFArray",
        "text": "class ansys.dpf.core.dpf_array.DPFArray(vec)\n\nOverload of numpy ndarray <https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html>`_\nmanaging DPFVector (memory owner of vector data in DPF C APIs) memory and updates.\n\nParameters\n\nvec (DPFVectorBase) – DPFVector instance to manage and optionally update when the DPFArray is deleted or committed.\n\n\n\ncommit()\n\nUpdates the data server side when necessary"
    },
    {
        "objectID": "api/ansys.dpf.core.dpf_array",
        "href": "api/ansys.dpf.core.dpf_array.html#ansys.dpf.core.dpf_array.DPFArray.commit",
        "title": "DPFArray > DPFArray > commit",
        "section": "DPFArray > commit",
        "text": "commit()\n\nUpdates the data server side when necessary"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.included_fields",
        "href": "api/ansys.dpf.core.operators.logic.included_fields.html#included_fields",
        "title": "included_fields",
        "section": "included_fields",
        "text": "Autogenerated DPF operator classes.\nincluded_fields"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#troubleshooting",
        "title": "Troubleshooting",
        "section": "Troubleshooting",
        "text": "This page explains how to resolve the most common issues encountered when\nusing PyDPF-Core. It also includes suggestions for improving scripts.\nTroubleshooting"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#server-issues",
        "title": "Troubleshooting > Server issues",
        "section": "Server issues",
        "text": "Server issues"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#start-the-dpf-server",
        "title": "Troubleshooting > Start the DPF server",
        "section": "Start the DPF server",
        "text": "When using PyDPF-Core to start the server with the\nstart_local_server() method\nor when starting the server manually with the Ans.Dpf.Grpc.sh or Ans.Dpf.Grpc.bat\nfile, a Python error might occur: TimeoutError: Server did not start in 10 seconds.\nThis kind of error might mean that the server or its dependencies were not found. Ensure that\nthe AWP_ROOT{VER} environment variable is set when using DPF from an Ansys unified install,\nwhere VER is the three-digit numeric format for the version, such as 221 or 222.\nStart the DPF server\nstart_local_server()\nAns.Dpf.Grpc.sh\nAns.Dpf.Grpc.bat\nTimeoutError: Server did not start in 10 seconds\nAWP_ROOT{VER}\nVER\n221\n222"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#connect-to-the-dpf-server",
        "title": "Troubleshooting > Connect to the DPF server",
        "section": "Connect to the DPF server",
        "text": "If an issue appears while using Py-DPF code to connect to an initialized server with the\nconnect_to_server() method, ensure that the\nIP address and port number that are set as parameters are applicable for a DPF server started\non the network.\nConnect to the DPF server\nconnect_to_server()"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#import-the-pydpf-core-package",
        "title": "Troubleshooting > Import the pydpf-core package",
        "section": "Import the pydpf-core package",
        "text": "Assume that you are importing the PyDPF-Core package:\nIf an error lists missing modules, see ref_compatibility.\nFor ``PyDPF-Core``<0.10.0, the ansys.grpc.dpf module\nshould always be synchronized with its server version.\nImport the pydpf-core package\npydpf-core\nPyDPF-Core"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#model-issues",
        "title": "Troubleshooting > Model issues",
        "section": "Model issues",
        "text": "Model issues"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#invalid-utf-8-error",
        "title": "Troubleshooting > Invalid UTF-8 error",
        "section": "Invalid UTF-8 error",
        "text": "Assume that you are trying to access the ansys.dpf.core.model.Model class.\nThe following error might be raised:\nInvalid UTF-8 data is preventing the model from being accessed. To avoid this error, ensure that\nyou are using PyDPF-Core version 0.3.2 or later. While a warning is still raised, the invalid UTF-8\ndata should not prevent you from using the ansys.dpf.core.model.Model class.\nThen, with result files reproducing this issue, you can prevent the warning from being raised with:\nHowever, the preceding code disables the reading and generation of the available results for the model.\nAny static results that are available for the model are used instead.\nInvalid UTF-8 error\nansys.dpf.core.model.Model\nansys.dpf.core.model.Model"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#plotting-issues",
        "title": "Troubleshooting > Plotting issues",
        "section": "Plotting issues",
        "text": "When trying to plot a result with DPF, the following error might be raised:\nIn that case, simply install PyVista <https://pyvista.org/>`_ with this command:\nAnother option is to install PyVista along with PyDPF-Core. For more information, see\nInstall with plotting capabilities\nPlotting issues"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#performance-issues",
        "title": "Troubleshooting > Performance issues",
        "section": "Performance issues",
        "text": "Performance issues"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#get-and-set-a-fields-data",
        "title": "Troubleshooting > Get and set a field’s data",
        "section": "Get and set a field’s data",
        "text": "Using the Field class to get or set field data entity\nby entity can be slow if the field’s size is large or if the server is far from the Python client.\nTo improve performance, use the as_local_field()\nmethod in a context manager to bring the field data from the server to your local machine. For an\nexample, see ref_use_local_data_example.\nGet and set a field’s data\nField\nas_local_field()"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#autocompletion-in-notebooks",
        "title": "Troubleshooting > Autocompletion in notebooks",
        "section": "Autocompletion in notebooks",
        "text": "Autocompletion in Jupyter notebook can sometimes be slow for large models. The interpreter might\nevaluate the getters of some properties when the tab key is pressed. To disable this capability, use the\ndisable_interpreter_properties_evaluation()\nmethod:\nAutocompletion in notebooks\ndisable_interpreter_properties_evaluation()"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.co_energy",
        "href": "api/ansys.dpf.core.operators.result.co_energy.html#co_energy",
        "title": "co_energy",
        "section": "co_energy",
        "text": "Autogenerated DPF operator classes.\nco_energy"
    },
    {
        "objectID": "examples/04-advanced/12-read_distributed_files",
        "href": "examples/04-advanced/12-read_distributed_files.html#read-results-from-distributed-files",
        "title": "Read results from distributed files",
        "section": "Read results from distributed files",
        "text": "Solvers usually solve analysis with distributed architecture. In this\ncase, one file is written by spatial or temporal domains. DPF is capable\nof reading one result in distributed files. This allows it to skip the\nmerging of files on the solver side, which is time-consuming and\noften doubles the memory used.\nRead results from distributed files"
    },
    {
        "objectID": "examples/04-advanced/12-read_distributed_files",
        "href": "examples/04-advanced/12-read_distributed_files.html#create-the-data-sources",
        "title": "Read results from distributed files > Create the data sources",
        "section": "Create the data sources",
        "text": "First create a data sources with one result file by domain\nCreate the data sources"
    },
    {
        "objectID": "examples/04-advanced/12-read_distributed_files",
        "href": "examples/04-advanced/12-read_distributed_files.html#compute-displacements",
        "title": "Read results from distributed files > Compute displacements",
        "section": "Compute displacements",
        "text": "Once the file architecture is put in the data sources,\ncomputing displacements with or without domain has the exact same syntax.\nDPF reads parts of the result on each domain and merges these results in\nthe outputs fields. The output is no different than when using combined\nor distributed files.\nCompute displacements"
    },
    {
        "objectID": "examples/04-advanced/12-read_distributed_files",
        "href": "examples/04-advanced/12-read_distributed_files.html#compute-equivalent-stress",
        "title": "Read results from distributed files > Compute equivalent stress",
        "section": "Compute equivalent stress",
        "text": "Total running time of the script: (0 minutes 17.430 seconds)\nDownload Jupyter notebook: 12-read_distributed_files.ipynb\nDownload Python source code: 12-read_distributed_files.py\nDownload zipped: 12-read_distributed_files.zip\nGallery generated by Sphinx-Gallery\nCompute equivalent stress\nDownload Jupyter notebook: 12-read_distributed_files.ipynb\nDownload Python source code: 12-read_distributed_files.py\nDownload zipped: 12-read_distributed_files.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.result_info",
        "href": "api/ansys.dpf.core.result_info.html#resultinfo",
        "title": "ResultInfo",
        "section": "ResultInfo",
        "text": "ResultInfo"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_X",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_X.html#elastic_strain_x",
        "title": "elastic_strain_X",
        "section": "elastic_strain_X",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_X"
    },
    {
        "objectID": "api/ansys.dpf.core.element_descriptor",
        "href": "api/ansys.dpf.core.element_descriptor.html#element-descriptor",
        "title": "Element Descriptor",
        "section": "Element Descriptor",
        "text": "Element Descriptor"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/01-modal_cyclic",
        "href": "examples/11-cyclic-symmetry/01-modal_cyclic.html#expand-mesh-and-results-for-modal-cyclic-symmetry",
        "title": "Expand mesh and results for modal cyclic symmetry",
        "section": "Expand mesh and results for modal cyclic symmetry",
        "text": "This example shows a modal cyclic symmetry model with mesh and results expansions.\nCreate the model and display the state of the result.\nExpand mesh and results for modal cyclic symmetry"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/01-modal_cyclic",
        "href": "examples/11-cyclic-symmetry/01-modal_cyclic.html#expand-displacement-results",
        "title": "Expand mesh and results for modal cyclic symmetry > Expand displacement results",
        "section": "Expand displacement results",
        "text": "This example expands displacement results, by default on all\nnodes and the first time step. Note that the displacements are expanded using\nthe read_cyclic\nproperty with 2 as an argument (1 does not perform expansion of the cyclic symmetry).\nExpand displacement results\nread_cyclic"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/01-modal_cyclic",
        "href": "examples/11-cyclic-symmetry/01-modal_cyclic.html#expand-stresses-at-a-given-time-step",
        "title": "Expand mesh and results for modal cyclic symmetry > Expand stresses at a given time step",
        "section": "Expand stresses at a given time step",
        "text": "Expand stresses at a given time step"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/01-modal_cyclic",
        "href": "examples/11-cyclic-symmetry/01-modal_cyclic.html#expand-stresses-at-given-sectors",
        "title": "Expand mesh and results for modal cyclic symmetry > Expand stresses at given sectors",
        "section": "Expand stresses at given sectors",
        "text": "Expand stresses at given sectors"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/01-modal_cyclic",
        "href": "examples/11-cyclic-symmetry/01-modal_cyclic.html#expand-stresses-and-average-to-elemental-location",
        "title": "Expand mesh and results for modal cyclic symmetry > Expand stresses and average to elemental location",
        "section": "Expand stresses and average to elemental location",
        "text": "Total running time of the script: (0 minutes 3.393 seconds)\nDownload Jupyter notebook: 01-modal_cyclic.ipynb\nDownload Python source code: 01-modal_cyclic.py\nDownload zipped: 01-modal_cyclic.zip\nGallery generated by Sphinx-Gallery\nExpand stresses and average to elemental location\nDownload Jupyter notebook: 01-modal_cyclic.ipynb\nDownload Python source code: 01-modal_cyclic.py\nDownload zipped: 01-modal_cyclic.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.bind_support",
        "href": "api/ansys.dpf.core.operators.utility.bind_support.html#bind_support",
        "title": "bind_support",
        "section": "bind_support",
        "text": "Autogenerated DPF operator classes.\nbind_support"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.read_cms_rbd_file",
        "href": "api/ansys.dpf.core.operators.result.read_cms_rbd_file.html#read_cms_rbd_file",
        "title": "read_cms_rbd_file",
        "section": "read_cms_rbd_file",
        "text": "Autogenerated DPF operator classes.\nread_cms_rbd_file"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.force_summation",
        "href": "api/ansys.dpf.core.operators.averaging.force_summation.html#force_summation",
        "title": "force_summation",
        "section": "force_summation",
        "text": "Autogenerated DPF operator classes.\nforce_summation"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.faces_area",
        "href": "api/ansys.dpf.core.operators.geo.faces_area.html#faces_area",
        "title": "faces_area",
        "section": "faces_area",
        "text": "Autogenerated DPF operator classes.\nfaces_area"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.von_mises_eqv",
        "href": "api/ansys.dpf.core.operators.invariant.von_mises_eqv.html#von_mises_eqv",
        "title": "von_mises_eqv",
        "section": "von_mises_eqv",
        "text": "Autogenerated DPF operator classes.\nvon_mises_eqv"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.minus_fc",
        "href": "api/ansys.dpf.core.operators.math.minus_fc.html#minus_fc",
        "title": "minus_fc",
        "section": "minus_fc",
        "text": "Autogenerated DPF operator classes.\nminus_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.interface_contact_force",
        "href": "api/ansys.dpf.core.operators.result.interface_contact_force.html#interface_contact_force",
        "title": "interface_contact_force",
        "section": "interface_contact_force",
        "text": "Autogenerated DPF operator classes.\ninterface_contact_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.adapt_with_scopings_container",
        "href": "api/ansys.dpf.core.operators.scoping.adapt_with_scopings_container.html#adapt_with_scopings_container",
        "title": "adapt_with_scopings_container",
        "section": "adapt_with_scopings_container",
        "text": "Autogenerated DPF operator classes.\nadapt_with_scopings_container"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.spherical_to_cartesian_fc",
        "href": "api/ansys.dpf.core.operators.geo.spherical_to_cartesian_fc.html#spherical_to_cartesian_fc",
        "title": "spherical_to_cartesian_fc",
        "section": "spherical_to_cartesian_fc",
        "text": "Autogenerated DPF operator classes.\nspherical_to_cartesian_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.server_factory",
        "href": "api/ansys.dpf.core.server_factory.html#server-factory-server-configuration-and-communication-protocols",
        "title": "Server factory, server configuration and communication protocols",
        "section": "Server factory, server configuration and communication protocols",
        "text": "Contains the server factory as well as the communication\nprotocols and server configurations available.\nServer factory, server configuration and communication protocols"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.swelling_strains",
        "href": "api/ansys.dpf.core.operators.result.swelling_strains.html#swelling_strains",
        "title": "swelling_strains",
        "section": "swelling_strains",
        "text": "Autogenerated DPF operator classes.\nswelling_strains"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_relative_angular_velocity",
        "href": "api/ansys.dpf.core.operators.result.joint_relative_angular_velocity.html#joint_relative_angular_velocity",
        "title": "joint_relative_angular_velocity",
        "section": "joint_relative_angular_velocity",
        "text": "Autogenerated DPF operator classes.\njoint_relative_angular_velocity"
    },
    {
        "objectID": "operator_reference_load",
        "href": "operator_reference_load.html#operators",
        "title": "Operators",
        "section": "Operators",
        "text": "Loading operators.\nOperators"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_max_shear",
        "href": "api/ansys.dpf.core.operators.result.stress_max_shear.html#stress_max_shear",
        "title": "stress_max_shear",
        "section": "stress_max_shear",
        "text": "Autogenerated DPF operator classes.\nstress_max_shear"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_max",
        "href": "api/ansys.dpf.core.operators.min_max.min_max.html#min_max",
        "title": "min_max",
        "section": "min_max",
        "text": "Autogenerated DPF operator classes.\nmin_max"
    },
    {
        "objectID": "api/ansys.dpf.core.examples.downloads",
        "href": "api/ansys.dpf.core.examples.downloads.html#downloads",
        "title": "Downloads",
        "section": "Downloads",
        "text": "Download example datasets from https://github.com/ansys/example-data\nDownloads"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.phase_fc",
        "href": "api/ansys.dpf.core.operators.math.phase_fc.html#phase_fc",
        "title": "phase_fc",
        "section": "phase_fc",
        "text": "Autogenerated DPF operator classes.\nphase_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.enthalpy",
        "href": "api/ansys.dpf.core.operators.result.enthalpy.html#enthalpy",
        "title": "enthalpy",
        "section": "enthalpy",
        "text": "Autogenerated DPF operator classes.\nenthalpy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.modal_basis",
        "href": "api/ansys.dpf.core.operators.result.modal_basis.html#modal_basis",
        "title": "modal_basis",
        "section": "modal_basis",
        "text": "Autogenerated DPF operator classes.\nmodal_basis"
    },
    {
        "objectID": "examples/07-distributed-post/sg_execution_times",
        "href": "examples/07-distributed-post/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:34.950 total execution time for 4 files from examples07-distributed-post:\nExample\nTime\nMem (MB)\nsphx_glr_examples_07-distributed-post_02-distributed-msup_expansion.py (02-distributed-msup_expansion.py)\n00:11.944\n0.0\nsphx_glr_examples_07-distributed-post_03-distributed-msup_expansion_steps.py (03-distributed-msup_expansion_steps.py)\n00:10.837\n0.0\nsphx_glr_examples_07-distributed-post_01-distributed_workflows_on_remote.py (01-distributed_workflows_on_remote.py)\n00:06.744\n0.0\nsphx_glr_examples_07-distributed-post_00-distributed_total_disp.py (00-distributed_total_disp.py)\n00:05.425\n0.0\nComputation times\n02-distributed-msup_expansion.py\n03-distributed-msup_expansion_steps.py\n01-distributed_workflows_on_remote.py\n00-distributed_total_disp.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_meshes_containers",
        "href": "api/ansys.dpf.core.operators.utility.merge_meshes_containers.html#merge_meshes_containers",
        "title": "merge_meshes_containers",
        "section": "merge_meshes_containers",
        "text": "Autogenerated DPF operator classes.\nmerge_meshes_containers"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.linear_combination",
        "href": "api/ansys.dpf.core.operators.math.linear_combination.html#linear_combination",
        "title": "linear_combination",
        "section": "linear_combination",
        "text": "Autogenerated DPF operator classes.\nlinear_combination"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.rescope",
        "href": "api/ansys.dpf.core.operators.scoping.rescope.html#rescope",
        "title": "rescope",
        "section": "rescope",
        "text": "Autogenerated DPF operator classes.\nrescope"
    },
    {
        "objectID": "api/ansys.dpf.core.model",
        "href": "api/ansys.dpf.core.model.html#model",
        "title": "Model",
        "section": "Model",
        "text": "Module contains the Model class to manage file result models.\nModel"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.convertnum_nod_to_bcs",
        "href": "api/ansys.dpf.core.operators.invariant.convertnum_nod_to_bcs.html#convertnum_nod_to_bcs",
        "title": "convertnum_nod_to_bcs",
        "section": "convertnum_nod_to_bcs",
        "text": "Autogenerated DPF operator classes.\nconvertnum_nod_to_bcs"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_eroded_kinetic_energy",
        "href": "api/ansys.dpf.core.operators.result.part_eroded_kinetic_energy.html#part_eroded_kinetic_energy",
        "title": "part_eroded_kinetic_energy",
        "section": "part_eroded_kinetic_energy",
        "text": "Autogenerated DPF operator classes.\npart_eroded_kinetic_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.descending_sort",
        "href": "api/ansys.dpf.core.operators.logic.descending_sort.html#descending_sort",
        "title": "descending_sort",
        "section": "descending_sort",
        "text": "Autogenerated DPF operator classes.\ndescending_sort"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.pow_fc",
        "href": "api/ansys.dpf.core.operators.math.pow_fc.html#pow_fc",
        "title": "pow_fc",
        "section": "pow_fc",
        "text": "Autogenerated DPF operator classes.\npow_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_stress_2",
        "href": "api/ansys.dpf.core.operators.result.compute_stress_2.html#compute_stress_2",
        "title": "compute_stress_2",
        "section": "compute_stress_2",
        "text": "Autogenerated DPF operator classes.\ncompute_stress_2"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.reaction_force",
        "href": "api/ansys.dpf.core.operators.result.reaction_force.html#reaction_force",
        "title": "reaction_force",
        "section": "reaction_force",
        "text": "Autogenerated DPF operator classes.\nreaction_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.relative_error",
        "href": "api/ansys.dpf.core.operators.math.relative_error.html#relative_error",
        "title": "relative_error",
        "section": "relative_error",
        "text": "Autogenerated DPF operator classes.\nrelative_error"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.compute_time_scoping",
        "href": "api/ansys.dpf.core.operators.utility.compute_time_scoping.html#compute_time_scoping",
        "title": "compute_time_scoping",
        "section": "compute_time_scoping",
        "text": "Autogenerated DPF operator classes.\ncompute_time_scoping"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.forward_meshes_container",
        "href": "api/ansys.dpf.core.operators.utility.forward_meshes_container.html#forward_meshes_container",
        "title": "forward_meshes_container",
        "section": "forward_meshes_container",
        "text": "Autogenerated DPF operator classes.\nforward_meshes_container"
    },
    {
        "objectID": "examples/04-advanced/01-solve_harmonic_problem",
        "href": "examples/04-advanced/01-solve_harmonic_problem.html#solve-harmonic-problem-with-damping-using-matrix-inverse",
        "title": "Solve harmonic problem (with damping) using matrix inverse",
        "section": "Solve harmonic problem (with damping) using matrix inverse",
        "text": "This example shows how to create a harmonic (over frequencies) fields\ncontainer for an analysis with damping. This fields container is then used to\nsolve the problem Ma+Dv+Ku=F by inverting the matrix\nCreate 2D (x,y) matrix fields for inertia, damping, and stiffness.\nCreate a fields container for real and imaginary parts\nfor each frequency.\nUse DPF operators to inverse the matrix and then compute the amplitude\nand the phase.\nGet the phase and amplitude and then plot it over frequencies.\nTotal running time of the script: (0 minutes 0.172 seconds)\nDownload Jupyter notebook: 01-solve_harmonic_problem.ipynb\nDownload Python source code: 01-solve_harmonic_problem.py\nDownload zipped: 01-solve_harmonic_problem.zip\nGallery generated by Sphinx-Gallery\nSolve harmonic problem (with damping) using matrix inverse\nDownload Jupyter notebook: 01-solve_harmonic_problem.ipynb\nDownload Python source code: 01-solve_harmonic_problem.py\nDownload zipped: 01-solve_harmonic_problem.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.erp_radiation_efficiency",
        "href": "api/ansys.dpf.core.operators.result.erp_radiation_efficiency.html#erp_radiation_efficiency",
        "title": "erp_radiation_efficiency",
        "section": "erp_radiation_efficiency",
        "text": "Autogenerated DPF operator classes.\nerp_radiation_efficiency"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_vectors",
        "href": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_vectors.html#assemble_scalars_to_vectors",
        "title": "assemble_scalars_to_vectors",
        "section": "assemble_scalars_to_vectors",
        "text": "Autogenerated DPF operator classes.\nassemble_scalars_to_vectors"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.omega",
        "href": "api/ansys.dpf.core.operators.result.omega.html#omega",
        "title": "omega",
        "section": "omega",
        "text": "Autogenerated DPF operator classes.\nomega"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.time_freq_support_get_attribute",
        "href": "api/ansys.dpf.core.operators.metadata.time_freq_support_get_attribute.html#time_freq_support_get_attribute",
        "title": "time_freq_support_get_attribute",
        "section": "time_freq_support_get_attribute",
        "text": "Autogenerated DPF operator classes.\ntime_freq_support_get_attribute"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.make_label_space",
        "href": "api/ansys.dpf.core.operators.utility.make_label_space.html#make_label_space",
        "title": "make_label_space",
        "section": "make_label_space",
        "text": "Autogenerated DPF operator classes.\nmake_label_space"
    },
    {
        "objectID": "examples/00-basic/12-get_material_properties",
        "href": "examples/00-basic/12-get_material_properties.html#get-material-properties-from-the-result-file",
        "title": "Get material properties from the result file",
        "section": "Get material properties from the result file",
        "text": "Material properties are assigned to each element in APDL and by default they\nare written out in the APDL result file. This example shows how you can extract\nmaterial properties of each element using PyDPF-Core.\nCreate a model object to establish a connection with an example result file.\nGet the meshed_region\nfrom model’s metadata.\nSee available properties in the meshed_region.\nGet all material properties.\nUse the DPF operator mapdl_material_properties\nto extract data for the # materials - mats. For the input\nproperties_name, you need the correct material property string. To see\nwhich strings are supported, you can print the operator help.\nFor the input pin properties_name, you need the correct\nmaterial property string. To see which strings are supported, you can\nprint the operator help.\nTo extract the Young’s modulus for element ID 1, first we need to get the\nmat_id for EID 1.\nAnd then use the mat_id get the material property.\nExtract Poisson’s ratio for element ID 1.\nTotal running time of the script: (0 minutes 0.027 seconds)\nDownload Jupyter notebook: 12-get_material_properties.ipynb\nDownload Python source code: 12-get_material_properties.py\nDownload zipped: 12-get_material_properties.zip\nGallery generated by Sphinx-Gallery\nGet material properties from the result file\nmeshed_region\nmeshed_region\nmapdl_material_properties\nproperties_name\nproperties_name\n1\n1\n1\nDownload Jupyter notebook: 12-get_material_properties.ipynb\nDownload Python source code: 12-get_material_properties.py\nDownload zipped: 12-get_material_properties.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.wall_shear_stress",
        "href": "api/ansys.dpf.core.operators.result.wall_shear_stress.html#wall_shear_stress",
        "title": "wall_shear_stress",
        "section": "wall_shear_stress",
        "text": "Autogenerated DPF operator classes.\nwall_shear_stress"
    },
    {
        "objectID": "examples/03-harmonic_analyses/01-modal_superposition",
        "href": "examples/03-harmonic_analyses/01-modal_superposition.html#expand-harmonic-modal-superposition-with-dpf",
        "title": "Expand harmonic modal superposition with DPF",
        "section": "Expand harmonic modal superposition with DPF",
        "text": "Different types of linear dynamics expansions are implemented in DPF.\nWith modal superposition used in harmonic analysis, modal coefficients\nare multiplied by mode shapes (of a previous modal analysis) to analyse\na structure under given boundary conditions in a range of frequencies.\nDoing this expansion “on demand” in DPF instead of in the solver\nreduces the size of the result files.\nExpand harmonic modal superposition with DPF"
    },
    {
        "objectID": "examples/03-harmonic_analyses/01-modal_superposition",
        "href": "examples/03-harmonic_analyses/01-modal_superposition.html#create-data-sources",
        "title": "Expand harmonic modal superposition with DPF > Create data sources",
        "section": "Create data sources",
        "text": "Create data sources with the mode shapes and the modal response.\nThe expansion is recursive in DPF: first the modal response is read.\nThen, “upstream” mode shapes are found in the data sources, where they\nare read and expanded (mode shapes x modal response)\nCreate data sources"
    },
    {
        "objectID": "examples/03-harmonic_analyses/01-modal_superposition",
        "href": "examples/03-harmonic_analyses/01-modal_superposition.html#compute-displacements",
        "title": "Expand harmonic modal superposition with DPF > Compute displacements",
        "section": "Compute displacements",
        "text": "Once the add_upstream() method puts the recursivity in the data sources,\nin a harmonic, transient, or modal analysis, computing displacements with\nor without expansion has the exact same syntax.\nTotal running time of the script: (0 minutes 19.196 seconds)\nDownload Jupyter notebook: 01-modal_superposition.ipynb\nDownload Python source code: 01-modal_superposition.py\nDownload zipped: 01-modal_superposition.zip\nGallery generated by Sphinx-Gallery\nCompute displacements\nadd_upstream()\nDownload Jupyter notebook: 01-modal_superposition.ipynb\nDownload Python source code: 01-modal_superposition.py\nDownload zipped: 01-modal_superposition.zip"
    },
    {
        "objectID": "examples/00-basic/sg_execution_times",
        "href": "examples/00-basic/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:52.167 total execution time for 10 files from examples00-basic:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-basic_09-results_over_space_subset.py (09-results_over_space_subset.py)\n00:17.091\n0.0\nsphx_glr_examples_00-basic_00-basic_example.py (00-basic_example.py)\n00:09.707\n0.0\nsphx_glr_examples_00-basic_07-use_result_helpers.py (07-use_result_helpers.py)\n00:09.178\n0.0\nsphx_glr_examples_00-basic_03-create_entities.py (03-create_entities.py)\n00:06.925\n0.0\nsphx_glr_examples_00-basic_05-use_local_data.py (05-use_local_data.py)\n00:06.659\n0.0\nsphx_glr_examples_00-basic_01-basic_operators.py (01-basic_operators.py)\n00:01.829\n0.0\nsphx_glr_examples_00-basic_08-results_over_time_subset.py (08-results_over_time_subset.py)\n00:00.688\n0.0\nsphx_glr_examples_00-basic_02-basic_field_containers.py (02-basic_field_containers.py)\n00:00.047\n0.0\nsphx_glr_examples_00-basic_12-get_material_properties.py (12-get_material_properties.py)\n00:00.027\n0.0\nsphx_glr_examples_00-basic_10-math_operations.py (10-math_operations.py)\n00:00.016\n0.0\nComputation times\n09-results_over_space_subset.py\n00-basic_example.py\n07-use_result_helpers.py\n03-create_entities.py\n05-use_local_data.py\n01-basic_operators.py\n08-results_over_time_subset.py\n02-basic_field_containers.py\n12-get_material_properties.py\n10-math_operations.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_get_attribute",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_get_attribute.html#mesh_get_attribute",
        "title": "mesh_get_attribute",
        "section": "mesh_get_attribute",
        "text": "Autogenerated DPF operator classes.\nmesh_get_attribute"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.total_mass",
        "href": "api/ansys.dpf.core.operators.result.total_mass.html#total_mass",
        "title": "total_mass",
        "section": "total_mass",
        "text": "Autogenerated DPF operator classes.\ntotal_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_to_field_matrix",
        "href": "api/ansys.dpf.core.operators.utility.merge_to_field_matrix.html#merge_to_field_matrix",
        "title": "merge_to_field_matrix",
        "section": "merge_to_field_matrix",
        "text": "Autogenerated DPF operator classes.\nmerge_to_field_matrix"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.extract_time_freq",
        "href": "api/ansys.dpf.core.operators.utility.extract_time_freq.html#extract_time_freq",
        "title": "extract_time_freq",
        "section": "extract_time_freq",
        "text": "Autogenerated DPF operator classes.\nextract_time_freq"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_string_fields",
        "href": "api/ansys.dpf.core.operators.utility.merge_string_fields.html#merge_string_fields",
        "title": "merge_string_fields",
        "section": "merge_string_fields",
        "text": "Autogenerated DPF operator classes.\nmerge_string_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_eqv_as_mechanical_workflow",
        "href": "api/ansys.dpf.core.operators.result.stress_eqv_as_mechanical_workflow.html#stress_eqv_as_mechanical_workflow",
        "title": "stress_eqv_as_mechanical_workflow",
        "section": "stress_eqv_as_mechanical_workflow",
        "text": "Autogenerated DPF operator classes.\nstress_eqv_as_mechanical_workflow"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.add_constant_fc",
        "href": "api/ansys.dpf.core.operators.math.add_constant_fc.html#add_constant_fc",
        "title": "add_constant_fc",
        "section": "add_constant_fc",
        "text": "Autogenerated DPF operator classes.\nadd_constant_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.turbulent_viscosity",
        "href": "api/ansys.dpf.core.operators.result.turbulent_viscosity.html#turbulent_viscosity",
        "title": "turbulent_viscosity",
        "section": "turbulent_viscosity",
        "text": "Autogenerated DPF operator classes.\nturbulent_viscosity"
    },
    {
        "objectID": "examples/00-basic/03-create_entities",
        "href": "examples/00-basic/03-create_entities.html#create-your-own-entities-using-dpf-operators",
        "title": "Create your own entities using DPF operators",
        "section": "Create your own entities using DPF operators",
        "text": "You can create your field, fields container, or meshed region to use DPF operators\nwith your own data. The ability to use scripting to create any DPF entity means\nthat you are not dependent on result files and can connect the DPF environment\nwith any Python tool.\nCreate a parallel piped mesh made of linear hexa:\nAdd nodes:\nGet the nodes’ coordinates field:\nSet the mesh unit:\nAdd solid elements (linear hexa with eight nodes):\nCreate displacement fields over time with three time sets.\nFor the first time set, the displacement on each node is the\nvalue of its x, y, and z coordinates.\nFor the second time set, the displacement on each node is two\ntimes the value of its x, y, and z coordinates.\nFor the third time set, the displacement on each node is three\ntimes the value of its x, y, and z coordinates.\nCreate results over times in a fields container with its time frequency support:\nCheck that the time frequency support has been built:\nPlot the norm over time of the fields container:\nTotal running time of the script: (0 minutes 6.925 seconds)\nDownload Jupyter notebook: 03-create_entities.ipynb\nDownload Python source code: 03-create_entities.py\nDownload zipped: 03-create_entities.zip\nGallery generated by Sphinx-Gallery\nCreate your own entities using DPF operators\nDownload Jupyter notebook: 03-create_entities.ipynb\nDownload Python source code: 03-create_entities.py\nDownload zipped: 03-create_entities.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter",
        "href": "api/ansys.dpf.core.operators.filter.html#ansysdpfcoreoperatorsfilter-package",
        "title": "ansys.dpf.core.operators.filter package",
        "section": "ansys.dpf.core.operators.filter package",
        "text": "ansys.dpf.core.operators.filter package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter",
        "href": "api/ansys.dpf.core.operators.filter.html#submodules",
        "title": "ansys.dpf.core.operators.filter package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter",
        "href": "api/ansys.dpf.core.operators.filter.html#module-contents",
        "title": "ansys.dpf.core.operators.filter package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.electric_potential",
        "href": "api/ansys.dpf.core.operators.result.electric_potential.html#electric_potential",
        "title": "electric_potential",
        "section": "electric_potential",
        "text": "Autogenerated DPF operator classes.\nelectric_potential"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.wireframe",
        "href": "api/ansys.dpf.core.operators.mesh.wireframe.html#wireframe",
        "title": "wireframe",
        "section": "wireframe",
        "text": "Autogenerated DPF operator classes.\nwireframe"
    },
    {
        "objectID": "examples/00-basic/02-basic_field_containers",
        "href": "examples/00-basic/02-basic_field_containers.html#field-and-field-containers-overview",
        "title": "Field and field containers overview",
        "section": "Field and field containers overview",
        "text": "In DPF, the field is the main simulation data container. During a numerical\nsimulation, the result data is defined by values associated to entities\n(scoping). These entities are a subset of a model (support).\nBecause the field data is always associated to its scoping and support,\nthe field is a self-describing piece of data. A field is also\ndefined by its parameters, such as dimensionality, unit, and location.\nFor example, a field can describe any of the following:\nDisplacement vector\nNorm, stress, or strain tensor\nStress or strain equivalent\nMinimum or maximum over time of any result.\nA field can be defined on a complete model or on only certain entities\nof the model based on its scoping. The data is stored as a vector of\ndouble values, and each elementary entity has a number of components.\nFor example, a displacement has three components, and a symmetrical\nstress matrix has six components.\nIn DPF, a fields container is simply a collection of fields that can be\nindexed, just like a Python list. Operators applied to a fields\ncontainer have each individual field operated on. Fields\ncontainers are outputs from operators.\nCreate a model object to establish a connection with an\nexample result file and then extract:\nCreate the displacement operator directly from the results\nproperty and extract the displacement fields container:\nA field can be extracted from a fields container by simply indexing\nthe requested field:\nField and field containers overview\nresults"
    },
    {
        "objectID": "examples/00-basic/02-basic_field_containers",
        "href": "examples/00-basic/02-basic_field_containers.html#extract-data-from-a-field",
        "title": "Field and field containers overview > Extract data from a field",
        "section": "Extract data from a field",
        "text": "You can extract all the data from a given field using the data\nproperty. This returns a numpy array.\nWhile it might seem preferable to work entirely within numpy,\nDPF runs outside of Python and potentially even on a\nremote machine. Therefore, the transfer of unnecessary data between\nthe DPF instance and the Python client leads to inefficient\noperations on large models. Instead, you should use DPF operators to\nassemble the necessary data before recalling the data from DPF.\nFor example, if you want the maximum displacement for a given\nresult, use the min/max operator:\nNote that the numpy array does not retain any information about the\nfield it describes. Using the DPF max operator of the field does\nretain this information.\nTotal running time of the script: (0 minutes 0.047 seconds)\nDownload Jupyter notebook: 02-basic_field_containers.ipynb\nDownload Python source code: 02-basic_field_containers.py\nDownload zipped: 02-basic_field_containers.zip\nGallery generated by Sphinx-Gallery\nExtract data from a field\ndata\nnumpy\nnumpy\nmax\nDownload Jupyter notebook: 02-basic_field_containers.ipynb\nDownload Python source code: 02-basic_field_containers.py\nDownload zipped: 02-basic_field_containers.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.txt_file_to_dpf",
        "href": "api/ansys.dpf.core.operators.utility.txt_file_to_dpf.html#txt_file_to_dpf",
        "title": "txt_file_to_dpf",
        "section": "txt_file_to_dpf",
        "text": "Autogenerated DPF operator classes.\ntxt_file_to_dpf"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.heat_flux_X",
        "href": "api/ansys.dpf.core.operators.result.heat_flux_X.html#heat_flux_x",
        "title": "heat_flux_X",
        "section": "heat_flux_X",
        "text": "Autogenerated DPF operator classes.\nheat_flux_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.incremental_concatenate_as_fc",
        "href": "api/ansys.dpf.core.operators.utility.incremental_concatenate_as_fc.html#incremental_concatenate_as_fc",
        "title": "incremental_concatenate_as_fc",
        "section": "incremental_concatenate_as_fc",
        "text": "Autogenerated DPF operator classes.\nincremental_concatenate_as_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.producer_consumer_for_each",
        "href": "api/ansys.dpf.core.operators.utility.producer_consumer_for_each.html#producer_consumer_for_each",
        "title": "producer_consumer_for_each",
        "section": "producer_consumer_for_each",
        "text": "Autogenerated DPF operator classes.\nproducer_consumer_for_each"
    },
    {
        "objectID": "api/ansys.dpf.core.results",
        "href": "api/ansys.dpf.core.results.html#results",
        "title": "Results",
        "section": "Results",
        "text": "This module contains the Results and Result classes that are created by the model\nto easily access results in result files.\nResults"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#operators",
        "title": "Operators",
        "section": "Operators",
        "text": "An operator is the main object that is used to create, transform, and stream\ndata. In DPF, you use operators to load, operate on, and output data.\nEach operator contains input and output attributes, which\nallow you to make various input and output connections.\nDuring an evaluation, an operator processes inputs to\ncompute an output with respect to the operator’s description:\nYou can attach one operator’s outputs to another operator’s inputs to\nchain operators together, thereby creating workflows for conducting simple or\ncomplex data processing. Through lazy evaluation, DPF approaches data processing\nin an efficient manner, evaluating each operator only when the final operator\nis evaluated and the data is requested.\nFor example, if you want the maximum normalized displacement of a\nresult, you construct operators in this order:\nThis example shows how to compute the maximum normalized displacement\nof a result:\nThis approach efficiently computes the maximum\ndisplacement of a result entirely within the DPF service, without\ntransferring any data from DPF to Python until DPF arrives at the\nsolution data that you want.\nA DPF operator can be licensed, meaning it requires a license checkout to run.\nThe license type can be specific, or amongst a given list, and is defined at the operator level.\nFor more information about the DPF licensing logic, see user_guide_server_context.\nThe library of DPF operators is large and includes file readers and mathematical,\ngeometrical, and logical transformations. For more information on this library,\nwhich is progressively enhanced, see ref_dpf_operators_reference.\nOperators\ninput\noutput"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#create-operators",
        "title": "Operators > Create operators",
        "section": "Create operators",
        "text": "Each operator is of type ref_operator. You can create an instance\nin Python with any of the derived classes available in the\nansys.dpf.core.operators package or directly with the ref_operator\nclass using the internal name string that indicates the operator type.\nFor more information, see ref_dpf_operators_reference.\nThis example shows how to create the displacement operator:\nYou can view the description and available inputs and available outputs of this\noperator by printing it:\nAlternatively, you can instantiate result providers using the Model object.\nFor more information, see user_guide_model.\nWhen using this model’s results, file paths for the results are directly\nconnected to the operator, which means that you can only instantiate\navailable results for your result files:\nCreate operators\nModel"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#connect-operators",
        "title": "Operators > Connect operators",
        "section": "Connect operators",
        "text": "The only required input for the displacement operator is the data_sources``input (see above).\nTo compute an output in the ``fields_container object, which contains the displacement\nresults, you must provide paths for the result files.\nYou can create data sources in two ways:\nUse the ref_model class.\nUse the ref_data_sources class.\nBecause several other examples use the Model class, this example uses the\nDataSources class:\nThis code shows how to connect the data source to the displacement operator:\nYou can connect other optional inputs to the displacement operator.\nThe output from printing the operator shows that a mesh_scoping of type ref_scoping\ncan be connected to work on a spatial subset. A time_scoping of a list of integers\ncan also be connected to work on a temporal subset:\nConnect operators\ndata_sources``input (see above).\nTo compute an output in the ``fields_container\nModel\nDataSources\nmesh_scoping\ntime_scoping"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#evaluate-operators",
        "title": "Operators > Evaluate operators",
        "section": "Evaluate operators",
        "text": "With all the required inputs assigned, you can output the ansys.dpf.core.fields_container\nclass from the operator:\nAt run time, the operator checks if all required inputs have been assigned.\nEvaluating an operator with missing inputs raises a DPFServerException\nlike this one:\nFor more information on using a fields container, see ref_user_guide_fields_container.\nEvaluate operators\nansys.dpf.core.fields_container\nDPFServerException"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#chain-operators",
        "title": "Operators > Chain operators",
        "section": "Chain operators",
        "text": "To create more complex operations and customizable results, you can chain operators\ntogether to create workflows. Using the large library of DPF operators, you can\ncustomize results to get a specific output.\nWhile manually customizing results on the Python side is far less efficient\nthan using operators, for a very small model, it is acceptable to bring all\ndisplacement data on the client side to compute the maximum:\nOn an industrial model, however, you should use code like this:\nIn the preceding example, only the maximum displacements in the X, Y, and Z\ncomponents are transferred and returned as a numpy array.\nFor small data sets, you can compute the maximum of the array in NumpPy.\nWhile there may be times where having the entire data array for a given\nresult type is necessary, many times it is not necessary. In these\ncases, it is faster not to transfer the array to Python but rather to\ncompute the maximum of the fields container within DPF and then return\nthe result to Python.\nThis example instantiates operators with other operators:\nThis automatically connects the matching displacement output with the\nmatching min_max input. You can also use the connect()\nmethod to manually connect the outputs of one operator to the inputs of another operator:\nWhile this last approach is more verbose, it can be useful for operators\nhaving several matching inputs or outputs.\nChain operators\ndisplacement\nmin_max\nconnect()"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#types-of-operators",
        "title": "Operators > Types of operators",
        "section": "Types of operators",
        "text": "DPF provides three main types of operators:\nOperators for importing or reading data\nOperators for transforming data\nOperators for exporting data\nTypes of operators"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#operators-for-importing-or-reading-data",
        "title": "Operators > Operators for importing or reading data",
        "section": "Operators for importing or reading data",
        "text": "These operators provide for reading data from solver files or from standard file types\nsuch as .RST (MAPDL), .D3Plot (LS DYNA), .CAS.H5/.DAT.H5 (Fluent) or .CAS.CFF/.DAT.CFF (CFX).\nTo read these files, different readers are implemented as plugins.\nPlugins can be loaded on demand in any DPF scripting language with “load library” methods.\nFile readers can be used generically thanks to the DPF result providers, which means that the same operators can be used for any file types.\nThis example shows how to read a displacement and a stress for any file:\nStandard file format readers are also supported to import custom data.\nFields can be imported from CSV, VTK, and HDF5 files.\nFor an example of importing and exporting a CSV file, see ref_basic_load_file_example.\nOperators for importing or reading data"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#operators-for-transforming-data",
        "title": "Operators > Operators for transforming data",
        "section": "Operators for transforming data",
        "text": "A field is the main data container in DPF. Most of the operators that transform\ndata take a field or a fields container as input and return a transformed\nfield or fields container as output. You can perform analytic, averaging,\nor filtering operations on simulation data.\nFor example, after creation of a field, you can use scaling and filtering\noperators:\nOperators for transforming data"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#operators-for-exporting-data",
        "title": "Operators > Operators for exporting data",
        "section": "Operators for exporting data",
        "text": "After using DPF to read or transform simulation data, you might want\nto export the results in a given format to either use them in another\nenvironment or save them for future use with DPF. Supported file formats\nfor export include VTK, H5, CSV, and TXT (serializer operator). Export\noperators often match with import operators, allowing you to reuse data.\nIn ref_dpf_operators_reference, both the Entry\nand Premium sections have a Serialization category that\ndisplays available import and export operators.\nThis example demonstrates how to use import and export operators if the\nPython client is not on the same machine as the server:\nOperators for exporting data"
    },
    {
        "objectID": "user_guide/operators",
        "href": "user_guide/operators.html#api-reference",
        "title": "Operators > API reference",
        "section": "API reference",
        "text": "For a list of all operators in DPF, see ref_dpf_operators_reference\nor the package ansys.dpf.core.operators package.  For more information about the\nclass itself, see ref_operator.\nAPI reference"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elemental_mass",
        "href": "api/ansys.dpf.core.operators.result.elemental_mass.html#elemental_mass",
        "title": "elemental_mass",
        "section": "elemental_mass",
        "text": "Autogenerated DPF operator classes.\nelemental_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_stress_XY",
        "href": "api/ansys.dpf.core.operators.result.gasket_stress_XY.html#gasket_stress_xy",
        "title": "gasket_stress_XY",
        "section": "gasket_stress_XY",
        "text": "Autogenerated DPF operator classes.\ngasket_stress_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.qr_solve",
        "href": "api/ansys.dpf.core.operators.math.qr_solve.html#qr_solve",
        "title": "qr_solve",
        "section": "qr_solve",
        "text": "Autogenerated DPF operator classes.\nqr_solve"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.total_temperature",
        "href": "api/ansys.dpf.core.operators.result.total_temperature.html#total_temperature",
        "title": "total_temperature",
        "section": "total_temperature",
        "text": "Autogenerated DPF operator classes.\ntotal_temperature"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_axial_force",
        "href": "api/ansys.dpf.core.operators.result.beam_axial_force.html#beam_axial_force",
        "title": "beam_axial_force",
        "section": "beam_axial_force",
        "text": "Autogenerated DPF operator classes.\nbeam_axial_force"
    },
    {
        "objectID": "api/ansys.dpf.core.geometry",
        "href": "api/ansys.dpf.core.geometry.html#geometry",
        "title": "Geometry",
        "section": "Geometry",
        "text": "Module containing the different geometry objects.\nGeometry"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_eroded_hourglass_energy",
        "href": "api/ansys.dpf.core.operators.result.global_eroded_hourglass_energy.html#global_eroded_hourglass_energy",
        "title": "global_eroded_hourglass_energy",
        "section": "global_eroded_hourglass_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_eroded_hourglass_energy"
    },
    {
        "objectID": "examples/08-python-operators/00-wrapping_numpy_capabilities",
        "href": "examples/08-python-operators/00-wrapping_numpy_capabilities.html#create-a-basic-operator-plugin",
        "title": "Create a basic operator plugin",
        "section": "Create a basic operator plugin",
        "text": "This example shows how to create a basic operator plugin, which is for\na single custom operator. This custom operator, easy_statistics,\ncomputes simple statistics quantities on a scalar field with the help of\nthe numpy package.\nThe objective of this simple example is to show how routines for DPF can\nbe wrapped in Python plugins.\nThis example requires DPF 4.0 (Ansys 2022R2) or above.\nFor more information, see ref_compatibility.\nCreate a basic operator plugin\neasy_statistics\nnumpy"
    },
    {
        "objectID": "examples/08-python-operators/00-wrapping_numpy_capabilities",
        "href": "examples/08-python-operators/00-wrapping_numpy_capabilities.html#create-the-operator",
        "title": "Create a basic operator plugin > Create the operator",
        "section": "Create the operator",
        "text": "Creating a basic operator plugin consists of writing a single Python script.\nAn operator implementation derives from the\nansys.dpf.core.custom_operator.CustomOperatorBase class\nand a call to the ansys.dpf.core.custom_operator.record_operator()\nmethod.\nThe easy_statistics operator takes a field as an input and returns\nthe first quartile, the median, the third quartile, and the variance.\nThe Python operator and its recording are available in the\neasy_statistics.py file.\nDownload and display the Python script.\nCreate the operator\nansys.dpf.core.custom_operator.CustomOperatorBase\nansys.dpf.core.custom_operator.record_operator()\neasy_statistics\neasy_statistics.py"
    },
    {
        "objectID": "examples/08-python-operators/00-wrapping_numpy_capabilities",
        "href": "examples/08-python-operators/00-wrapping_numpy_capabilities.html#load-the-plugin",
        "title": "Create a basic operator plugin > Load the plugin",
        "section": "Load the plugin",
        "text": "You use the ansys.dpf.core.core.load_library() method to load the\nplugin.\nInstantiate the operator.\nLoad the plugin\nansys.dpf.core.core.load_library()"
    },
    {
        "objectID": "examples/08-python-operators/00-wrapping_numpy_capabilities",
        "href": "examples/08-python-operators/00-wrapping_numpy_capabilities.html#connect-a-workflow",
        "title": "Create a basic operator plugin > Connect a workflow",
        "section": "Connect a workflow",
        "text": "Connect a workflow that computes the norm of the displacement to the\neasy_statistics operator. Methods of the easy_statistics class\nare dynamically added because specifications for the operator are\ndefined in the plugin.\nConnect a workflow\neasy_statistics\neasy_statistics"
    },
    {
        "objectID": "examples/08-python-operators/00-wrapping_numpy_capabilities",
        "href": "examples/08-python-operators/00-wrapping_numpy_capabilities.html#use-the-operator",
        "title": "Create a basic operator plugin > Use the operator",
        "section": "Use the operator",
        "text": "Total running time of the script: (0 minutes 4.283 seconds)\nDownload Jupyter notebook: 00-wrapping_numpy_capabilities.ipynb\nDownload Python source code: 00-wrapping_numpy_capabilities.py\nDownload zipped: 00-wrapping_numpy_capabilities.zip\nGallery generated by Sphinx-Gallery\nUse the operator\nDownload Jupyter notebook: 00-wrapping_numpy_capabilities.ipynb\nDownload Python source code: 00-wrapping_numpy_capabilities.py\nDownload zipped: 00-wrapping_numpy_capabilities.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.field",
        "href": "api/ansys.dpf.core.field.html#field",
        "title": "Field",
        "section": "Field",
        "text": "Field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cms_matrices_provider",
        "href": "api/ansys.dpf.core.operators.result.cms_matrices_provider.html#cms_matrices_provider",
        "title": "cms_matrices_provider",
        "section": "cms_matrices_provider",
        "text": "Autogenerated DPF operator classes.\ncms_matrices_provider"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_to_nodal",
        "href": "api/ansys.dpf.core.operators.result.global_to_nodal.html#global_to_nodal",
        "title": "global_to_nodal",
        "section": "global_to_nodal",
        "text": "Autogenerated DPF operator classes.\nglobal_to_nodal"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.structural_temperature",
        "href": "api/ansys.dpf.core.operators.result.structural_temperature.html#structural_temperature",
        "title": "structural_temperature",
        "section": "structural_temperature",
        "text": "Autogenerated DPF operator classes.\nstructural_temperature"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.scale_by_field",
        "href": "api/ansys.dpf.core.operators.math.scale_by_field.html#scale_by_field",
        "title": "scale_by_field",
        "section": "scale_by_field",
        "text": "Autogenerated DPF operator classes.\nscale_by_field"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "API reference"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.mesh_to_mc",
        "href": "api/ansys.dpf.core.operators.utility.mesh_to_mc.html#mesh_to_mc",
        "title": "mesh_to_mc",
        "section": "mesh_to_mc",
        "text": "Autogenerated DPF operator classes.\nmesh_to_mc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.migrate_to_h5dpf",
        "href": "api/ansys.dpf.core.operators.result.migrate_to_h5dpf.html#migrate_to_h5dpf",
        "title": "migrate_to_h5dpf",
        "section": "migrate_to_h5dpf",
        "text": "Autogenerated DPF operator classes.\nmigrate_to_h5dpf"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.gasket_thermal_closure_X",
        "href": "api/ansys.dpf.core.operators.result.gasket_thermal_closure_X.html#gasket_thermal_closure_x",
        "title": "gasket_thermal_closure_X",
        "section": "gasket_thermal_closure_X",
        "text": "Autogenerated DPF operator classes.\ngasket_thermal_closure_X"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#dpf-usage",
        "title": "DPF usage",
        "section": "DPF usage",
        "text": "The goal of using DPF is to transform simulation data into output data\nthat can be used to visualize and analyze simulation results.\nThere are two main steps to achieve this goal:\nStep 1: define_sim_data\nStep 2: transform_the_data\nDPF usage"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#define-simulation-data",
        "title": "DPF usage > Define simulation data",
        "section": "Define simulation data",
        "text": "Data can come from two sources:\nSimulation result files: DPF automatically recognizes the fields in simulation\nresult files. When using result files as input, you specify the data source by\ndefining where the result files are located.\nManual input in DPF: You can create fields of data in DPF.\nOnce you specify data sources or manually create fields in DPF,\nyou can create field containers (if applicable) and define scopings to\nidentify the subset of data that you want to evaluate.\nDefine simulation data"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#specify-the-data-source",
        "title": "DPF usage > Specify the data source",
        "section": "Specify the data source",
        "text": "To evaluate the data in simulation result files, you specify the data source by defining\nwhere the results files are located.\nThis code shows how to define the data source:\nTo evaluate data files, they must be opened. To open data files, you\ndefine streams. A stream is an entity that contains the data sources.\nStreams keep the data files open and keep some data cached to make the next\nevaluation faster. Streams are particularly convenient when using large\ndata files. They save time when opening and closing data files. When a stream\nis released, the data files are closed.\nSpecify the data source"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#define-fields",
        "title": "DPF usage > Define fields",
        "section": "Define fields",
        "text": "A field is a container of simulation data. In numerical simulations,\nresult data is defined by values associated with entities:\nTherefore, a field of data might look something like this:\nThis code shows how to define a field from scratch:\nIn DPF, field data is always associated with its scoping and support, making\na field a self-describing piece of data. A field can also be defined by its\ndimensionality, unit, and location. For more information, see user_guide_concepts.\nDefine fields"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#define-scopings",
        "title": "DPF usage > Define scopings",
        "section": "Define scopings",
        "text": "In most cases, you do not want to work with an entire field but rather with a\nsubset of entities in the field. To achieve this, you define a scoping for\nthe field. A scoping is a set of entity IDs on a location. For example, this can\nbe a set of mesh IDs, geometric entity IDs, time domain, or frequency domain.\nYou specify the set of entities by defining a range of IDs:\nYou must define a scoping prior to its use in the transformation data workflow.\nThis code shows how to define a mesh scoping:\nDefine scopings"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#define-field-containers",
        "title": "DPF usage > Define field containers",
        "section": "Define field containers",
        "text": "A field container holds a set of fields. It is used mainly for\ntransient, harmonic, modal, or multi-step analyses. This image\nexplains its structure:\nA field container is a vector of fields. Fields are ordered with labels\nand IDs. Most commonly, a field container is scoped on the time label,\nand the IDs are the time or frequency sets:\nYou can define a field container in multiple ways:\nExtract labeled data from a result file.\nCreate a field container from a CSV file.\nConvert existing fields to a field container.\nThis code shows how to define a field container from scratch:\nSome operators can operate directly on field containers instead of fields.\nField containers are identified by fc suffixes in their names.\nOperators and field containers are explained in more detail\nin transform_the_data.\nDefine field containers\nfc"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#transform-the-data",
        "title": "DPF usage > Transform the data",
        "section": "Transform the data",
        "text": "Once you have defined the simulation data to evaluate, you use operators\nto transform the data to obtain the desired output. You can chain operators\ntogether to create simple or complex data transformation workflows.\nTransform the data"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#use-operators",
        "title": "DPF usage > Use operators",
        "section": "Use operators",
        "text": "You use operators to import, export, transform, and analyze data.\nAn operator is analogous to an integrated circuit in electronics. It\nhas a set of input and output pins. Pins provide for passing data to\nand from operators.\nAn operator takes input from a field, field container, or scoping using\nan input pin. Based on what it is designed to do, the operator computes\nan output that it passes to a field or field container using an output pin.\nComprehensive information on operators is available in ref_dpf_operators_reference.\nIn the Available Operators area for either the Entry or Premium operators,\nyou can either type a keyword in the Search option\nor browse by operator categories:\nThe page for each operator describes how the operator transforms data,\nindicates input and output data, and provides usage examples.\nUse operators"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#define-operators",
        "title": "DPF usage > Define operators",
        "section": "Define operators",
        "text": "Defining an operator consists of three steps:\nInstantiate the operator.\nDefine the inputs.\nStore the output.\nThis image shows how the page for an operator provides a usage example for each available\nlanguage (IronPython, CPython, and C++).\nThis code shows how to define an operator from a model:\nDefine operators"
    },
    {
        "objectID": "user_guide/concepts/stepbystep",
        "href": "user_guide/concepts/stepbystep.html#define-workflows",
        "title": "DPF usage > Define workflows",
        "section": "Define workflows",
        "text": "In most cases, using a single operator is not sufficient to obtain the\ndesired result. In DPF, you can chain operators together to create a complete\ndata transformation workflow, enabling you to perform all operations necessary\nto get the result that you want.\nIn a workflow, the output pins of one operator can be connected to the input pins\nof another operator, allowing the output from one operator to be passed as\nthe input to another operator.\nThis image shows how you would get the norm of a resulting vector from the\ndot product of two vectors:\nThis code shows how to define a generic workflow that computes the minimum\nof displacement by chaining the U and min_max_fc operators:\nDefine workflows\nU\nmin_max_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.element_orientations_Y",
        "href": "api/ansys.dpf.core.operators.result.element_orientations_Y.html#element_orientations_y",
        "title": "element_orientations_Y",
        "section": "element_orientations_Y",
        "text": "Autogenerated DPF operator classes.\nelement_orientations_Y"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#compute-and-plot-2d-streamlines",
        "title": "Compute and plot 2D streamlines",
        "section": "Compute and plot 2D streamlines",
        "text": "This example shows you how to compute and plot\nstreamlines of fluid simulation results, for 2D models.\nThis example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nCompute and plot 2D streamlines"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#plot-surface-streamlines",
        "title": "Compute and plot 2D streamlines > Plot surface streamlines",
        "section": "Plot surface streamlines",
        "text": "Plot surface streamlines"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#import-modules-create-the-data-sources-and-the-model",
        "title": "Compute and plot 2D streamlines > Import modules, create the data sources and the model",
        "section": "Import modules, create the data sources and the model",
        "text": "Import modules:\nCreate data sources for fluids simulation result:\nCreate model from fluid simulation result data sources:\nImport modules, create the data sources and the model"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#get-meshed-region-and-velocity-data",
        "title": "Compute and plot 2D streamlines > Get meshed region and velocity data",
        "section": "Get meshed region and velocity data",
        "text": "Meshed region is used as the geometric base to compute the streamlines.\nVelocity data is used to compute the streamlines. The velocity data must be nodal.\nGet the meshed region:\nGet the velocity result at nodes:\nGet meshed region and velocity data"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#compute-single-streamline",
        "title": "Compute and plot 2D streamlines > Compute single streamline",
        "section": "Compute single streamline",
        "text": "Compute single streamline"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#plot-single-streamline",
        "title": "Compute and plot 2D streamlines > Plot single streamline",
        "section": "Plot single streamline",
        "text": "Plot single streamline"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#compute-multiple-streamlines",
        "title": "Compute and plot 2D streamlines > Compute multiple streamlines",
        "section": "Compute multiple streamlines",
        "text": "Compute multiple streamlines"
    },
    {
        "objectID": "examples/13-streamlines/01_plot_surface_streamlines",
        "href": "examples/13-streamlines/01_plot_surface_streamlines.html#plot-multiple-streamlines",
        "title": "Compute and plot 2D streamlines > Plot multiple streamlines",
        "section": "Plot multiple streamlines",
        "text": "Total running time of the script: (0 minutes 4.502 seconds)\nDownload Jupyter notebook: 01_plot_surface_streamlines.ipynb\nDownload Python source code: 01_plot_surface_streamlines.py\nDownload zipped: 01_plot_surface_streamlines.zip\nGallery generated by Sphinx-Gallery\nPlot multiple streamlines\nDownload Jupyter notebook: 01_plot_surface_streamlines.ipynb\nDownload Python source code: 01_plot_surface_streamlines.py\nDownload zipped: 01_plot_surface_streamlines.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.ascending_sort_fc",
        "href": "api/ansys.dpf.core.operators.logic.ascending_sort_fc.html#ascending_sort_fc",
        "title": "ascending_sort_fc",
        "section": "ascending_sort_fc",
        "text": "Autogenerated DPF operator classes.\nascending_sort_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.component_wise_divide_fc",
        "href": "api/ansys.dpf.core.operators.math.component_wise_divide_fc.html#component_wise_divide_fc",
        "title": "component_wise_divide_fc",
        "section": "component_wise_divide_fc",
        "text": "Autogenerated DPF operator classes.\ncomponent_wise_divide_fc"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "These examples demonstrate the behavior and usage of DPF-Core.\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#basic-dpf-examples",
        "title": "Examples > Basic DPF examples",
        "section": "Basic DPF examples",
        "text": "These examples explain the basic concepts of DPF.\nsphx_glr_examples_00-basic_00-basic_example.py\nsphx_glr_examples_00-basic_01-basic_operators.py\nsphx_glr_examples_00-basic_02-basic_field_containers.py\nsphx_glr_examples_00-basic_03-create_entities.py\nsphx_glr_examples_00-basic_05-use_local_data.py\nsphx_glr_examples_00-basic_07-use_result_helpers.py\nsphx_glr_examples_00-basic_08-results_over_time_subset.py\nsphx_glr_examples_00-basic_09-results_over_space_subset.py\nsphx_glr_examples_00-basic_10-math_operations.py\nsphx_glr_examples_00-basic_12-get_material_properties.py\nBasic DPF examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#transient-analysis-examples",
        "title": "Examples > Transient analysis examples",
        "section": "Transient analysis examples",
        "text": "These examples show how to use DPF to extract and plot displacements,\nstresses, and strains for a transient result.\nsphx_glr_examples_01-transient_analyses_00-basic_transient.py\nsphx_glr_examples_01-transient_analyses_01-transient_easy_time_scoping.py\nTransient analysis examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#modal-analysis-examples",
        "title": "Examples > Modal analysis examples",
        "section": "Modal analysis examples",
        "text": "These examples show how to use DPF to extract and manipulate\nresults from modal analyses.\nsphx_glr_examples_02-modal_analyses_00-compare_modes.py\nsphx_glr_examples_02-modal_analyses_01-plot_and_animate_modes.py\nModal analysis examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#harmonic-analysis-examples",
        "title": "Examples > Harmonic analysis examples",
        "section": "Harmonic analysis examples",
        "text": "These examples show how to use DPF to extract and manipulate\nresults from harmonic analyses.\nsphx_glr_examples_03-harmonic_analyses_00-multi_harmonic.py\nsphx_glr_examples_03-harmonic_analyses_01-modal_superposition.py\nHarmonic analysis examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#advanced-and-miscellaneous-examples",
        "title": "Examples > Advanced and miscellaneous examples",
        "section": "Advanced and miscellaneous examples",
        "text": "These examples show advanced use cases to demonstrate the high level of workflow customization.\nsphx_glr_examples_04-advanced_00-multistage_advanced_options.py\nsphx_glr_examples_04-advanced_01-solve_harmonic_problem.py\nsphx_glr_examples_04-advanced_02-volume_averaged_stress.py\nsphx_glr_examples_04-advanced_03-exchange_data_between_servers.py\nsphx_glr_examples_04-advanced_04-extrapolation_stress_3d.py\nsphx_glr_examples_04-advanced_05-extrapolation_strain_2d.py\nsphx_glr_examples_04-advanced_06-stress_gradient_path.py\nsphx_glr_examples_04-advanced_07-load_plugin.py\nsphx_glr_examples_04-advanced_10-asme_secviii_divtwo.py\nsphx_glr_examples_04-advanced_11-cycles_to_failure.py\nsphx_glr_examples_04-advanced_12-read_distributed_files.py\nsphx_glr_examples_04-advanced_13-manage_licensing.py\nsphx_glr_examples_04-advanced_14-incremental_evaluation.py\nAdvanced and miscellaneous examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#file-manipulation-and-input-output-examples",
        "title": "Examples > File manipulation and input-output examples",
        "section": "File manipulation and input-output examples",
        "text": "These examples show how to manipulate files,\nas well as importing or exporting from or to specific formats.\nsphx_glr_examples_05-file-IO_00-hdf5_double_float_comparison.py\nsphx_glr_examples_05-file-IO_01-reduced_matrices_export.py\nsphx_glr_examples_05-file-IO_02-hdf5_serialize_and_read.py\nsphx_glr_examples_05-file-IO_04-basic-load-file.py\nFile manipulation and input-output examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#plotting-examples",
        "title": "Examples > Plotting examples",
        "section": "Plotting examples",
        "text": "These examples show how to use the ansys.dpf.core.plotter.DpfPlotter class.\nsphx_glr_examples_06-plotting_00-basic_plotting.py\nsphx_glr_examples_06-plotting_01-compare_results.py\nsphx_glr_examples_06-plotting_02-solution_combination.py\nsphx_glr_examples_06-plotting_03-labels.py\nsphx_glr_examples_06-plotting_04-plot_on_path.py\nsphx_glr_examples_06-plotting_05-plot_on_warped_mesh.py\nsphx_glr_examples_06-plotting_06-animate_results.py\nsphx_glr_examples_06-plotting_07-plot_on_geometries.py\nPlotting examples\nansys.dpf.core.plotter.DpfPlotter"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples-for-postprocessing-on-distributed-processes",
        "title": "Examples > Examples for postprocessing on distributed processes",
        "section": "Examples for postprocessing on distributed processes",
        "text": "These examples show how to create workflows on different processes (possibly on\ndifferent machines) and connect them.\nsphx_glr_examples_07-distributed-post_00-distributed_total_disp.py\nsphx_glr_examples_07-distributed-post_01-distributed_workflows_on_remote.py\nsphx_glr_examples_07-distributed-post_02-distributed-msup_expansion.py\nsphx_glr_examples_07-distributed-post_03-distributed-msup_expansion_steps.py\nExamples for postprocessing on distributed processes"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples-of-creating-custom-operator-plugins",
        "title": "Examples > Examples of creating custom operator plugins",
        "section": "Examples of creating custom operator plugins",
        "text": "These examples show how to create a basic operator plugin or plug-in\npackages with multiple operators. Plugins wrap your custom operators\nso that you can use them like native DPF operators.\nsphx_glr_examples_08-python-operators_00-wrapping_numpy_capabilities.py\nsphx_glr_examples_08-python-operators_01-package_python_operators.py\nsphx_glr_examples_08-python-operators_02-python_operators_with_dependencies.py\nExamples of creating custom operator plugins"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#averaging-examples",
        "title": "Examples > Averaging examples",
        "section": "Averaging examples",
        "text": "These examples show how to use some of DPF’s averaging operators.\nsphx_glr_examples_09-averaging_00-compute_and_average.py\nsphx_glr_examples_09-averaging_01-average_across_bodies.py\nAveraging examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#mesh-operations-examples",
        "title": "Examples > Mesh operations examples",
        "section": "Mesh operations examples",
        "text": "These examples show how to manipulate meshes.\nsphx_glr_examples_10-mesh_operations_00-create_polygons_and_polyhedrons.py\nsphx_glr_examples_10-mesh_operations_05-skin_extraction.py\nsphx_glr_examples_10-mesh_operations_13-nodes_in_local_coordinate_system.py\nMesh operations examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#cyclic-symmetry-examples",
        "title": "Examples > Cyclic symmetry examples",
        "section": "Cyclic symmetry examples",
        "text": "These examples show how to post-process cyclic symmetry models.\nsphx_glr_examples_11-cyclic-symmetry_01-modal_cyclic.py\nsphx_glr_examples_11-cyclic-symmetry_02-modal_cyclic_no_expansion.py\nsphx_glr_examples_11-cyclic-symmetry_03-cyclic_multi_stage.py\nCyclic symmetry examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#fluids-examples",
        "title": "Examples > Fluids examples",
        "section": "Fluids examples",
        "text": "These examples show how to post-process Fluid models.\nsphx_glr_examples_12-fluids_00-fluids_model.py\nsphx_glr_examples_12-fluids_01-fluids_mesh.py\nsphx_glr_examples_12-fluids_02-fluids_results.py\nsphx_glr_examples_12-fluids_03-fluids_isosurface.py\nFluids examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#streamlines-examples",
        "title": "Examples > Streamlines examples",
        "section": "Streamlines examples",
        "text": "These examples show how to compute and plot streamlines.\nsphx_glr_examples_13-streamlines_00_plot_3d_streamlines.py\nsphx_glr_examples_13-streamlines_01_plot_surface_streamlines.py\nStreamlines examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#ls-dyna-examples",
        "title": "Examples > LS-Dyna examples",
        "section": "LS-Dyna examples",
        "text": "These examples show how to post-process LS-Dyna models.\nsphx_glr_examples_14-lsdyna_00-lsdyna_operators.py\nLS-Dyna examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#cfx-examples",
        "title": "Examples > CFX examples",
        "section": "CFX examples",
        "text": "These examples show how to post-process CFX result files.\nsphx_glr_examples_15-cfx_00-cfx_res_files.py\nGallery generated by Sphinx-Gallery\nCFX examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.interface_contact_moment",
        "href": "api/ansys.dpf.core.operators.result.interface_contact_moment.html#interface_contact_moment",
        "title": "interface_contact_moment",
        "section": "interface_contact_moment",
        "text": "Autogenerated DPF operator classes.\ninterface_contact_moment"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/sg_execution_times",
        "href": "examples/11-cyclic-symmetry/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:17.949 total execution time for 3 files from examples11-cyclic-symmetry:\nExample\nTime\nMem (MB)\nsphx_glr_examples_11-cyclic-symmetry_02-modal_cyclic_no_expansion.py (02-modal_cyclic_no_expansion.py)\n00:11.290\n0.0\nsphx_glr_examples_11-cyclic-symmetry_01-modal_cyclic.py (01-modal_cyclic.py)\n00:03.393\n0.0\nsphx_glr_examples_11-cyclic-symmetry_03-cyclic_multi_stage.py (03-cyclic_multi_stage.py)\n00:03.266\n0.0\nComputation times\n02-modal_cyclic_no_expansion.py\n01-modal_cyclic.py\n03-cyclic_multi_stage.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.joint_force_reaction",
        "href": "api/ansys.dpf.core.operators.result.joint_force_reaction.html#joint_force_reaction",
        "title": "joint_force_reaction",
        "section": "joint_force_reaction",
        "text": "Autogenerated DPF operator classes.\njoint_force_reaction"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.forward_field",
        "href": "api/ansys.dpf.core.operators.utility.forward_field.html#forward_field",
        "title": "forward_field",
        "section": "forward_field",
        "text": "Autogenerated DPF operator classes.\nforward_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cplx_dot",
        "href": "api/ansys.dpf.core.operators.math.cplx_dot.html#cplx_dot",
        "title": "cplx_dot",
        "section": "cplx_dot",
        "text": "Autogenerated DPF operator classes.\ncplx_dot"
    },
    {
        "objectID": "examples/04-advanced/04-extrapolation_stress_3d",
        "href": "examples/04-advanced/04-extrapolation_stress_3d.html#extrapolation-method-for-stress-result-of-a-3d-element",
        "title": "Extrapolation method for stress result of a 3D element",
        "section": "Extrapolation method for stress result of a 3D element",
        "text": "This example shows how to compute the stress nodal components from\nGaussian points (integration points) for a 3D element using\nextrapolation.\nExtrapolate results available at Gaussian or quadrature points to nodal\npoints for a field or fields container. The available elements are:\nLinear quadrangle\nParabolic quadrangle\nLinear hexagonal\nQuadratic hexagonal\nLinear tetrahedral\nQuadratic tetrahedral\nHere are the steps for extrapolation:\nGet the data source’s solution from the integration points. (This\nresult file was generated with the Ansys Mechanical APDL (MAPDL)\noption ERESX, NO).\nUse the extrapolation operator to compute the nodal stress.\nGet the result for nodal stress from the data source.\nThe analysis was computed by MAPDL.\nCompare the result for nodal stress from the data source\nand the nodal stress computed by the extrapolation method.\nGet the data source’s analysis of integration points and analysis reference\nExtrapolation method for stress result of a 3D element\nERESX, NO"
    },
    {
        "objectID": "examples/04-advanced/04-extrapolation_stress_3d",
        "href": "examples/04-advanced/04-extrapolation_stress_3d.html#extrapolate-from-integration-points-for-stress-result",
        "title": "Extrapolation method for stress result of a 3D element > Extrapolate from integration points for stress result",
        "section": "Extrapolate from integration points for stress result",
        "text": "This example uses the gauss_to_node_fc operator to compute the nodal\ncomponent stress result from the stress result of integration points.\nExtrapolate from integration points for stress result\ngauss_to_node_fc"
    },
    {
        "objectID": "examples/04-advanced/04-extrapolation_stress_3d",
        "href": "examples/04-advanced/04-extrapolation_stress_3d.html#nodal-stress-result-of-integration-points",
        "title": "Extrapolation method for stress result of a 3D element > Nodal stress result of integration points",
        "section": "Nodal stress result of integration points",
        "text": "The MAPLD command ERESX,NO is used to copy directly the\nGaussian (integration) points results to the nodes, instead of the\nresults at nodes or elements (which are interpolation of results at a\nfew gauss points).\nThe following plot shows the nodal values, which are the averaged values\nof stresses at each node. The value shown at the node is the average of\nthe stresses from the Gaussian points of each element that it belongs to.\nCreate operator gauss_to_node_fc and compute nodal component stress\nby applying the extrapolation method.\nNodal stress result of integration points\nERESX,NO\ngauss_to_node_fc"
    },
    {
        "objectID": "examples/04-advanced/04-extrapolation_stress_3d",
        "href": "examples/04-advanced/04-extrapolation_stress_3d.html#stress-result-of-reference-ansys-workbench",
        "title": "Extrapolation method for stress result of a 3D element > Stress result of reference Ansys Workbench",
        "section": "Stress result of reference Ansys Workbench",
        "text": "Stress result of reference Ansys Workbench"
    },
    {
        "objectID": "examples/04-advanced/04-extrapolation_stress_3d",
        "href": "examples/04-advanced/04-extrapolation_stress_3d.html#plot",
        "title": "Extrapolation method for stress result of a 3D element > Plot",
        "section": "Plot",
        "text": "Show plots of the extrapolation’s stress result and the reference’s stress result\nPlot"
    },
    {
        "objectID": "examples/04-advanced/04-extrapolation_stress_3d",
        "href": "examples/04-advanced/04-extrapolation_stress_3d.html#compare-stress-results",
        "title": "Extrapolation method for stress result of a 3D element > Compare stress results",
        "section": "Compare stress results",
        "text": "Compare the stress result computed by extrapolation and the reference’s result.\nCheck if the two fields container are identical using the\nidentical_fc operator.\nThe relative tolerance is set to 1.1e-6.\nThe smallest value that is considered during the comparison step: all the\nabs(values) in field less than 1e-2 is considered as null.\nCompute absolute and relative errors\nPlot absolute and relative errors.\nThe absolute value is the order of 10, which is very small when compared to the\nmagnitude of 1e8 of the displacements. This is reflected in the relative error\nplot, where the errors are found to be below 1.02e-6%. The result of these plots\ncan be used to set the tolerances for the\nidentical_fc operator.\nTotal running time of the script: (0 minutes 12.271 seconds)\nDownload Jupyter notebook: 04-extrapolation_stress_3d.ipynb\nDownload Python source code: 04-extrapolation_stress_3d.py\nDownload zipped: 04-extrapolation_stress_3d.zip\nGallery generated by Sphinx-Gallery\nCompare stress results\nidentical_fc\nabs(values)\nidentical_fc\nDownload Jupyter notebook: 04-extrapolation_stress_3d.ipynb\nDownload Python source code: 04-extrapolation_stress_3d.py\nDownload zipped: 04-extrapolation_stress_3d.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.hydrostatic_pressure",
        "href": "api/ansys.dpf.core.operators.result.hydrostatic_pressure.html#hydrostatic_pressure",
        "title": "hydrostatic_pressure",
        "section": "hydrostatic_pressure",
        "text": "Autogenerated DPF operator classes.\nhydrostatic_pressure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.polar_to_cplx",
        "href": "api/ansys.dpf.core.operators.math.polar_to_cplx.html#polar_to_cplx",
        "title": "polar_to_cplx",
        "section": "polar_to_cplx",
        "text": "Autogenerated DPF operator classes.\npolar_to_cplx"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_friction_stress",
        "href": "api/ansys.dpf.core.operators.result.contact_friction_stress.html#contact_friction_stress",
        "title": "contact_friction_stress",
        "section": "contact_friction_stress",
        "text": "Autogenerated DPF operator classes.\ncontact_friction_stress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_1",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_1.html#compute_total_strain_1",
        "title": "compute_total_strain_1",
        "section": "compute_total_strain_1",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_1"
    },
    {
        "objectID": "examples/09-averaging/00-compute_and_average",
        "href": "examples/09-averaging/00-compute_and_average.html#averaging-order",
        "title": "Averaging order",
        "section": "Averaging order",
        "text": "This example compares two different workflows that accomplish the same task to show\nhow the order of the operators can change the end result.\nThe first workflow extracts the stress field of a crankshaft under load from a\nresult file, computes the equivalent (von Mises) stresses, and then applies an\naveraging operator to transpose them from ElementalNodal to Nodal positions.\nThe second workflow first transposes the stresses that come from the result file\nto a Nodal position and then calculates the von Mises stresses.\nThe following images shows these workflows:\nImport the necessary modules.\nLoad the simulation results from an RST file.\nAveraging order\nElementalNodal\nNodal\nNodal"
    },
    {
        "objectID": "examples/09-averaging/00-compute_and_average",
        "href": "examples/09-averaging/00-compute_and_average.html#create-the-first-workflow",
        "title": "Averaging order > Create the first workflow",
        "section": "Create the first workflow",
        "text": "The first workflow applies the averaging operator after computing the equivalent\nstresses. To create it, define a function that computes the von Mises stresses\nin the crankshaft and then apply the averaging operator.\nCreate the first workflow"
    },
    {
        "objectID": "examples/09-averaging/00-compute_and_average",
        "href": "examples/09-averaging/00-compute_and_average.html#create-the-second-workflow",
        "title": "Averaging order > Create the second workflow",
        "section": "Create the second workflow",
        "text": "The second workflow computes the equivalent stresses after applying the averaging\noperator. To create this workflow, first apply the averaging operator to the\nstress field in the crankshaft and then calculate the von Mises stresses, which\nare already located on a Nodal position.\nCreate the second workflow\nNodal"
    },
    {
        "objectID": "examples/09-averaging/00-compute_and_average",
        "href": "examples/09-averaging/00-compute_and_average.html#plot-the-results",
        "title": "Averaging order > Plot the results",
        "section": "Plot the results",
        "text": "Plot both von Mises stress fields side by side to compare them.\n- The first plot displays the results when the equivalent stresses are calculated first.\n- The second plot shows the results when the averaging is done first.\nEven though both workflows apply the same steps to the same initial data,\ntheir final results are different because of the order in which the operators\nare applied.\nTotal running time of the script: (0 minutes 1.658 seconds)\nDownload Jupyter notebook: 00-compute_and_average.ipynb\nDownload Python source code: 00-compute_and_average.py\nDownload zipped: 00-compute_and_average.zip\nGallery generated by Sphinx-Gallery\nPlot the results\nDownload Jupyter notebook: 00-compute_and_average.ipynb\nDownload Python source code: 00-compute_and_average.py\nDownload zipped: 00-compute_and_average.zip"
    },
    {
        "objectID": "examples/06-plotting/00-basic_plotting",
        "href": "examples/06-plotting/00-basic_plotting.html#review-of-available-plotting-commands",
        "title": "Review of available plotting commands",
        "section": "Review of available plotting commands",
        "text": "This example lists the different plotting commands available,\nshown with the arguments available.\nTotal running time of the script: (0 minutes 21.997 seconds)\nDownload Jupyter notebook: 00-basic_plotting.ipynb\nDownload Python source code: 00-basic_plotting.py\nDownload zipped: 00-basic_plotting.zip\nGallery generated by Sphinx-Gallery\nReview of available plotting commands\nDownload Jupyter notebook: 00-basic_plotting.ipynb\nDownload Python source code: 00-basic_plotting.py\nDownload zipped: 00-basic_plotting.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain.html#plastic_strain",
        "title": "plastic_strain",
        "section": "plastic_strain",
        "text": "Autogenerated DPF operator classes.\nplastic_strain"
    },
    {
        "objectID": "user_guide/plotting",
        "href": "user_guide/plotting.html#plot",
        "title": "Plot",
        "section": "Plot",
        "text": "DPF-Core has a variety of plotting methods for generating 3D plots of\nAnsys models directly from Python. These methods use VTK and leverage\nthe PyVista library to\nsimplify plotting. For more information, see the PyVista Documentation.\nPlot"
    },
    {
        "objectID": "user_guide/plotting",
        "href": "user_guide/plotting.html#plot-the-mesh-from-the-model-object",
        "title": "Plot > Plot the mesh from the Model object",
        "section": "Plot the mesh from the Model object",
        "text": "The Model.plot() method\nplots the mesh of the model immediately after loading it.\nThis example downloads a simple pontoon mesh from the internet and uses the\nansys.dpf.core.model class to load it:\nThe default plotter settings display the mesh with edges shown and\nlighting enabled. For a list of all keyword arguments, see\nplot.\nPlot the mesh from the Model object\nModel\nModel.plot()\nansys.dpf.core.model"
    },
    {
        "objectID": "user_guide/plotting",
        "href": "user_guide/plotting.html#plot-the-meshed-region",
        "title": "Plot > Plot the meshed region",
        "section": "Plot the meshed region",
        "text": "The MeshedRegion.plot()\nmethod plots the meshed region. If the meshed region is generated from the model’s\nmetadata, the plot generated is identical to the plot generated by the\nModel.plot() method.\nPlot the meshed region\nWhen a field is provided as the first argument, the mesh is plotted\nusing these values.\nThis example extracts the nodal strain in the X direction:\nFirst, extract the X component strain\nThis ElementalNodal strain must be converted to nodal strain for it to be plotted.\nOnly fields with  Nodal and Elemental locations are\nsupported. Use the to_nodal\noperator to convert to the Nodal location or the\nansys.dpf.core.operators.averaging.nodal_to_elemental\nclass to convert to the Elemental location.\nPlot the meshed region\nMeshedRegion.plot()\nModel.plot()\nNodal\nElemental\nto_nodal\nNodal\nansys.dpf.core.operators.averaging.nodal_to_elemental\nElemental"
    },
    {
        "objectID": "examples/01-transient_analyses/00-basic_transient",
        "href": "examples/01-transient_analyses/00-basic_transient.html#transient-analysis-result-example",
        "title": "Transient analysis result example",
        "section": "Transient analysis result example",
        "text": "This example shows how to postprocess a transient result and\nvisualize the outputs.\nDownload the transient result example. This example is\nnot included in DPF-Core by default to speed up the installation.\nDownloading this example should take only a few seconds.\nNext, create the model and display the state of the result. This transient\nresult file contains several individual results, each at a different timestamp.\nGet the timestamps for each substep as a numpy array:\nTransient analysis result example"
    },
    {
        "objectID": "examples/01-transient_analyses/00-basic_transient",
        "href": "examples/01-transient_analyses/00-basic_transient.html#obtain-minimum-and-maximum-displacements-for-all-results",
        "title": "Transient analysis result example > Obtain minimum and maximum displacements for all results",
        "section": "Obtain minimum and maximum displacements for all results",
        "text": "Create a displacement operator and set its time scoping request to\nthe entire time frequency support:\nPlot the minimum and maximum displacements over time:\nPlot the minimum and maximum displacements over time for the X\ncomponent.\nObtain minimum and maximum displacements for all results"
    },
    {
        "objectID": "examples/01-transient_analyses/00-basic_transient",
        "href": "examples/01-transient_analyses/00-basic_transient.html#postprocessing-stress",
        "title": "Transient analysis result example > Postprocessing stress",
        "section": "Postprocessing stress",
        "text": "Create an equivalent (von Mises) stress operator and set its time\nscoping to the entire time frequency support:\nPlot the maximum stress over time:\nPostprocessing stress"
    },
    {
        "objectID": "examples/01-transient_analyses/00-basic_transient",
        "href": "examples/01-transient_analyses/00-basic_transient.html#scoping-and-stress-field-coordinates",
        "title": "Transient analysis result example > Scoping and stress field coordinates",
        "section": "Scoping and stress field coordinates",
        "text": "The scoping of the stress field can be used to extract the\ncoordinates used for each result:\nAs you can see, these node IDs are not in order. Additionally,\nthere may be fewer entries in the field than nodes in the model. For\nexample, stresses are not computed at mid-side nodes.\nTo extract the coordinates for these node IDs, load the mesh from\nthe model and then extract a coordinate for each node index.\nHere is an inefficient way of getting the coordinates as each\nindividual request must be sent to the DPF service:\nRather than individually querying for each node coordinate of the\nfield, you can use the map_scoping\nto remap the field data to match the order of the nodes in the meshed region.\nObtain the indices needed to get the data from field.data to match\nthe order of nodes in the mesh:\nTotal running time of the script: (0 minutes 0.564 seconds)\nDownload Jupyter notebook: 00-basic_transient.ipynb\nDownload Python source code: 00-basic_transient.py\nDownload zipped: 00-basic_transient.zip\nGallery generated by Sphinx-Gallery\nScoping and stress field coordinates\nmap_scoping\nfield.data\nDownload Jupyter notebook: 00-basic_transient.ipynb\nDownload Python source code: 00-basic_transient.py\nDownload zipped: 00-basic_transient.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_YZ",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_YZ.html#plastic_strain_yz",
        "title": "plastic_strain_YZ",
        "section": "plastic_strain_YZ",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_YZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.is_cyclic",
        "href": "api/ansys.dpf.core.operators.metadata.is_cyclic.html#is_cyclic",
        "title": "is_cyclic",
        "section": "is_cyclic",
        "text": "Autogenerated DPF operator classes.\nis_cyclic"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_X",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_X.html#plastic_strain_x",
        "title": "plastic_strain_X",
        "section": "plastic_strain_X",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_X"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_ratio",
        "href": "api/ansys.dpf.core.operators.result.stress_ratio.html#stress_ratio",
        "title": "stress_ratio",
        "section": "stress_ratio",
        "text": "Autogenerated DPF operator classes.\nstress_ratio"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.entropy",
        "href": "api/ansys.dpf.core.operators.result.entropy.html#entropy",
        "title": "entropy",
        "section": "entropy",
        "text": "Autogenerated DPF operator classes.\nentropy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.tri_mesh_skin",
        "href": "api/ansys.dpf.core.operators.mesh.tri_mesh_skin.html#tri_mesh_skin",
        "title": "tri_mesh_skin",
        "section": "tri_mesh_skin",
        "text": "Autogenerated DPF operator classes.\ntri_mesh_skin"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_vectors_fc",
        "href": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_vectors_fc.html#assemble_scalars_to_vectors_fc",
        "title": "assemble_scalars_to_vectors_fc",
        "section": "assemble_scalars_to_vectors_fc",
        "text": "Autogenerated DPF operator classes.\nassemble_scalars_to_vectors_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.scoping",
        "href": "api/ansys.dpf.core.scoping.html#scoping",
        "title": "Scoping",
        "section": "Scoping",
        "text": "Scoping"
    },
    {
        "objectID": "operator_reference_load_apis",
        "href": "operator_reference_load_apis.html#operators",
        "title": "Operators",
        "section": "Operators",
        "text": "Loading operators.\nOperators"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.from_scopings",
        "href": "api/ansys.dpf.core.operators.mesh.from_scopings.html#from_scopings",
        "title": "from_scopings",
        "section": "from_scopings",
        "text": "Autogenerated DPF operator classes.\nfrom_scopings"
    },
    {
        "objectID": "examples/05-file-IO/index",
        "href": "examples/05-file-IO/index.html#file-manipulation-and-input-output-examples",
        "title": "File manipulation and input-output examples",
        "section": "File manipulation and input-output examples",
        "text": "These examples show how to manipulate files,\nas well as importing or exporting from or to specific formats.\nsphx_glr_examples_05-file-IO_00-hdf5_double_float_comparison.py\nsphx_glr_examples_05-file-IO_01-reduced_matrices_export.py\nsphx_glr_examples_05-file-IO_02-hdf5_serialize_and_read.py\nsphx_glr_examples_05-file-IO_04-basic-load-file.py\nFile manipulation and input-output examples"
    },
    {
        "objectID": "examples/15-cfx/sg_execution_times",
        "href": "examples/15-cfx/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:01.075 total execution time for 1 file from examples15-cfx:\nExample\nTime\nMem (MB)\nsphx_glr_examples_15-cfx_00-cfx_res_files.py (00-cfx_res_files.py)\n00:01.075\n0.0\nComputation times\n00-cfx_res_files.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.equivalent_radiated_power",
        "href": "api/ansys.dpf.core.operators.result.equivalent_radiated_power.html#equivalent_radiated_power",
        "title": "equivalent_radiated_power",
        "section": "equivalent_radiated_power",
        "text": "Autogenerated DPF operator classes.\nequivalent_radiated_power"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.split_fields",
        "href": "api/ansys.dpf.core.operators.mesh.split_fields.html#split_fields",
        "title": "split_fields",
        "section": "split_fields",
        "text": "Autogenerated DPF operator classes.\nsplit_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.fields_container_factory",
        "href": "api/ansys.dpf.core.fields_container_factory.html#fields_container_factory",
        "title": "fields_container_factory",
        "section": "fields_container_factory",
        "text": "Contains functions to simplify creating a fields container.\nfields_container_factory"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_conductivity",
        "href": "api/ansys.dpf.core.operators.result.thermal_conductivity.html#thermal_conductivity",
        "title": "thermal_conductivity",
        "section": "thermal_conductivity",
        "text": "Autogenerated DPF operator classes.\nthermal_conductivity"
    },
    {
        "objectID": "api/ansys.dpf.core.inputs",
        "href": "api/ansys.dpf.core.inputs.html#inputs",
        "title": "Inputs",
        "section": "Inputs",
        "text": "Inputs"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_Y",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_Y.html#plastic_strain_y",
        "title": "plastic_strain_Y",
        "section": "plastic_strain_Y",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata",
        "href": "api/ansys.dpf.core.operators.metadata.html#ansysdpfcoreoperatorsmetadata-package",
        "title": "ansys.dpf.core.operators.metadata package",
        "section": "ansys.dpf.core.operators.metadata package",
        "text": "ansys.dpf.core.operators.metadata package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata",
        "href": "api/ansys.dpf.core.operators.metadata.html#submodules",
        "title": "ansys.dpf.core.operators.metadata package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata",
        "href": "api/ansys.dpf.core.operators.metadata.html#module-contents",
        "title": "ansys.dpf.core.operators.metadata package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.fft_gradient_eval",
        "href": "api/ansys.dpf.core.operators.math.fft_gradient_eval.html#fft_gradient_eval",
        "title": "fft_gradient_eval",
        "section": "fft_gradient_eval",
        "text": "Autogenerated DPF operator classes.\nfft_gradient_eval"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_energy_density",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_energy_density.html#elastic_strain_energy_density",
        "title": "elastic_strain_energy_density",
        "section": "elastic_strain_energy_density",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_energy_density"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_intensity",
        "href": "api/ansys.dpf.core.operators.result.stress_intensity.html#stress_intensity",
        "title": "stress_intensity",
        "section": "stress_intensity",
        "text": "Autogenerated DPF operator classes.\nstress_intensity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_Y",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_Y.html#thermal_strain_y",
        "title": "thermal_strain_Y",
        "section": "thermal_strain_Y",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.meshes_container",
        "href": "api/ansys.dpf.core.meshes_container.html#meshescontainer",
        "title": "MeshesContainer",
        "section": "MeshesContainer",
        "text": "Contains classes associated with the DPF MeshesContainer.\nMeshesContainer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.change_shell_layers",
        "href": "api/ansys.dpf.core.operators.utility.change_shell_layers.html#change_shell_layers",
        "title": "change_shell_layers",
        "section": "change_shell_layers",
        "text": "Autogenerated DPF operator classes.\nchange_shell_layers"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_Z",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_Z.html#thermal_strain_z",
        "title": "thermal_strain_Z",
        "section": "thermal_strain_Z",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.server_path",
        "href": "api/ansys.dpf.core.operators.utility.server_path.html#server_path",
        "title": "server_path",
        "section": "server_path",
        "text": "Autogenerated DPF operator classes.\nserver_path"
    },
    {
        "objectID": "api/ansys.dpf.core.collection_base",
        "href": "api/ansys.dpf.core.collection_base.html#collectionbase",
        "title": "CollectionBase",
        "section": "CollectionBase",
        "text": "Contains classes associated with the DPF collection.\nCollectionBase"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_principal_3",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_principal_3.html#thermal_strain_principal_3",
        "title": "thermal_strain_principal_3",
        "section": "thermal_strain_principal_3",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_principal_3"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_provider",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_provider.html#mesh_provider",
        "title": "mesh_provider",
        "section": "mesh_provider",
        "text": "Autogenerated DPF operator classes.\nmesh_provider"
    },
    {
        "objectID": "examples/09-averaging/index",
        "href": "examples/09-averaging/index.html#averaging-examples",
        "title": "Averaging examples",
        "section": "Averaging examples",
        "text": "These examples show how to use some of DPF’s averaging operators.\nsphx_glr_examples_09-averaging_00-compute_and_average.py\nsphx_glr_examples_09-averaging_01-average_across_bodies.py\nAveraging examples"
    },
    {
        "objectID": "getting_started/install",
        "href": "getting_started/install.html#installation",
        "title": "Installation",
        "section": "Installation",
        "text": "Installation"
    },
    {
        "objectID": "getting_started/install",
        "href": "getting_started/install.html#install-using-pip",
        "title": "Installation > Install using pip",
        "section": "Install using pip",
        "text": "The standard package installer for Python is pip.\nTo use PyDPF-Core with Ansys 2022 R2 or later, install the latest version\nwith this command:\nPyDPF-Core plotting capabilities require to have PyVista installed.\nTo install PyDPF-Core with its optional plotting functionalities, use:\nFor more information about PyDPF-Core plotting capabilities, see user_guide_plotting.\nTo use PyDPF-Core with Ansys 2022 R1, install the latest compatible version\nwith this command:\nTo use PyDPF-Core with Ansys 2021 R2, install the latest compatible version\nwith this command:\nTo use PyDPF-Core with Ansys 2021 R1, install the latest compatible version\nwith this command:\nInstall using pip\npip"
    },
    {
        "objectID": "getting_started/install",
        "href": "getting_started/install.html#install-without-internet",
        "title": "Installation > Install without internet",
        "section": "Install without internet",
        "text": "If you are unable to install PyDPF-Core on the host machine using pip due to\nnetwork isolation, download the wheelhouse corresponding to your platform and Python interpreter version\nfor the latest release of PyDPF-Core from the assets section of the latest PyDPF-Core release on GitHub.\nThe wheelhouse is a ZIP file containing Python wheels for all the packages PyDPF-Core requires to run.\nTo install PyDPF-Core using the downloaded wheelhouse, unzip the wheelhouse to a local directory,\nthen use the following command from within this local directory:\nBeware that PyDPF-Core wheelhouses do not include the optional plotting dependencies.\nTo allow for plotting capabilities, also download the wheels corresponding to your platform and Python interpreter version\nfor PyVista and\nmatplotlib, then place them in the same previous local directory and run the command above.\nInstall without internet\npip"
    },
    {
        "objectID": "getting_started/install",
        "href": "getting_started/install.html#install-in-development-mode",
        "title": "Installation > Install in development mode",
        "section": "Install in development mode",
        "text": "If you want to edit and potentially contribute to PyDPF-Core,\nclone the repository and install it using pip with the -e\ndevelopment flag:\nInstall in development mode\npip\n-e"
    },
    {
        "objectID": "getting_started/install",
        "href": "getting_started/install.html#check-the-installation",
        "title": "Installation > Check the installation",
        "section": "Check the installation",
        "text": "Run the following Python code to verify your PyDPF-Core installation:\nCheck the installation"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mapdl_section",
        "href": "api/ansys.dpf.core.operators.result.mapdl_section.html#mapdl_section",
        "title": "mapdl_section",
        "section": "mapdl_section",
        "text": "Autogenerated DPF operator classes.\nmapdl_section"
    },
    {
        "objectID": "examples/10-mesh_operations/index",
        "href": "examples/10-mesh_operations/index.html#mesh-operations-examples",
        "title": "Mesh operations examples",
        "section": "Mesh operations examples",
        "text": "These examples show how to manipulate meshes.\nsphx_glr_examples_10-mesh_operations_00-create_polygons_and_polyhedrons.py\nsphx_glr_examples_10-mesh_operations_05-skin_extraction.py\nsphx_glr_examples_10-mesh_operations_13-nodes_in_local_coordinate_system.py\nMesh operations examples"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_elemental_fc",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_elemental_fc.html#elemental_nodal_to_nodal_elemental_fc",
        "title": "elemental_nodal_to_nodal_elemental_fc",
        "section": "elemental_nodal_to_nodal_elemental_fc",
        "text": "Autogenerated DPF operator classes.\nelemental_nodal_to_nodal_elemental_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal.html#elemental_nodal_to_nodal",
        "title": "elemental_nodal_to_nodal",
        "section": "elemental_nodal_to_nodal",
        "text": "Autogenerated DPF operator classes.\nelemental_nodal_to_nodal"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_added_mass_pct",
        "href": "api/ansys.dpf.core.operators.result.global_added_mass_pct.html#global_added_mass_pct",
        "title": "global_added_mass_pct",
        "section": "global_added_mass_pct",
        "text": "Autogenerated DPF operator classes.\nglobal_added_mass_pct"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_surface_heat_flux",
        "href": "api/ansys.dpf.core.operators.result.contact_surface_heat_flux.html#contact_surface_heat_flux",
        "title": "contact_surface_heat_flux",
        "section": "contact_surface_heat_flux",
        "text": "Autogenerated DPF operator classes.\ncontact_surface_heat_flux"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.compression.zfp_decompress",
        "href": "api/ansys.dpf.core.operators.compression.zfp_decompress.html#zfp_decompress",
        "title": "zfp_decompress",
        "section": "zfp_decompress",
        "text": "Autogenerated DPF operator classes.\nzfp_decompress"
    },
    {
        "objectID": "examples/01-transient_analyses/sg_execution_times",
        "href": "examples/01-transient_analyses/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:01.422 total execution time for 2 files from examples01-transient_analyses:\nExample\nTime\nMem (MB)\nsphx_glr_examples_01-transient_analyses_01-transient_easy_time_scoping.py (01-transient_easy_time_scoping.py)\n00:00.858\n0.0\nsphx_glr_examples_01-transient_analyses_00-basic_transient.py (00-basic_transient.py)\n00:00.564\n0.0\nComputation times\n01-transient_easy_time_scoping.py\n00-basic_transient.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.remote_operator_instantiate",
        "href": "api/ansys.dpf.core.operators.utility.remote_operator_instantiate.html#remote_operator_instantiate",
        "title": "remote_operator_instantiate",
        "section": "remote_operator_instantiate",
        "text": "Autogenerated DPF operator classes.\nremote_operator_instantiate"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.max_by_component",
        "href": "api/ansys.dpf.core.operators.min_max.max_by_component.html#max_by_component",
        "title": "max_by_component",
        "section": "max_by_component",
        "text": "Autogenerated DPF operator classes.\nmax_by_component"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.prepare_mapping_workflow",
        "href": "api/ansys.dpf.core.operators.mapping.prepare_mapping_workflow.html#prepare_mapping_workflow",
        "title": "prepare_mapping_workflow",
        "section": "prepare_mapping_workflow",
        "text": "Autogenerated DPF operator classes.\nprepare_mapping_workflow"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_analytic_usum_max",
        "href": "api/ansys.dpf.core.operators.result.cyclic_analytic_usum_max.html#cyclic_analytic_usum_max",
        "title": "cyclic_analytic_usum_max",
        "section": "cyclic_analytic_usum_max",
        "text": "Autogenerated DPF operator classes.\ncyclic_analytic_usum_max"
    },
    {
        "objectID": "api/ansys.dpf.core.config",
        "href": "api/ansys.dpf.core.config.html#operator-configuration",
        "title": "Operator Configuration",
        "section": "Operator Configuration",
        "text": "Operator Configuration"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.split_data_sources",
        "href": "api/ansys.dpf.core.operators.logic.split_data_sources.html#split_data_sources",
        "title": "split_data_sources",
        "section": "split_data_sources",
        "text": "Autogenerated DPF operator classes.\nsplit_data_sources"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.poynting_vector",
        "href": "api/ansys.dpf.core.operators.result.poynting_vector.html#poynting_vector",
        "title": "poynting_vector",
        "section": "poynting_vector",
        "text": "Autogenerated DPF operator classes.\npoynting_vector"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_YZ",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_YZ.html#thermal_strain_yz",
        "title": "thermal_strain_YZ",
        "section": "thermal_strain_YZ",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_YZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_to_nodal_fc",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_to_nodal_fc.html#elemental_to_nodal_fc",
        "title": "elemental_to_nodal_fc",
        "section": "elemental_to_nodal_fc",
        "text": "Autogenerated DPF operator classes.\nelemental_to_nodal_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.thermal_strain_XY",
        "href": "api/ansys.dpf.core.operators.result.thermal_strain_XY.html#thermal_strain_xy",
        "title": "thermal_strain_XY",
        "section": "thermal_strain_XY",
        "text": "Autogenerated DPF operator classes.\nthermal_strain_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_rotation_by_euler_nodes",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_rotation_by_euler_nodes.html#plastic_strain_rotation_by_euler_nodes",
        "title": "plastic_strain_rotation_by_euler_nodes",
        "section": "plastic_strain_rotation_by_euler_nodes",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_rotation_by_euler_nodes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.enf_rotation_by_euler_nodes",
        "href": "api/ansys.dpf.core.operators.result.enf_rotation_by_euler_nodes.html#enf_rotation_by_euler_nodes",
        "title": "enf_rotation_by_euler_nodes",
        "section": "enf_rotation_by_euler_nodes",
        "text": "Autogenerated DPF operator classes.\nenf_rotation_by_euler_nodes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.rotate_fc",
        "href": "api/ansys.dpf.core.operators.geo.rotate_fc.html#rotate_fc",
        "title": "rotate_fc",
        "section": "rotate_fc",
        "text": "Autogenerated DPF operator classes.\nrotate_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.nodal_to_elemental_fc",
        "href": "api/ansys.dpf.core.operators.averaging.nodal_to_elemental_fc.html#nodal_to_elemental_fc",
        "title": "nodal_to_elemental_fc",
        "section": "nodal_to_elemental_fc",
        "text": "Autogenerated DPF operator classes.\nnodal_to_elemental_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_center_mass",
        "href": "api/ansys.dpf.core.operators.result.global_center_mass.html#global_center_mass",
        "title": "global_center_mass",
        "section": "global_center_mass",
        "text": "Autogenerated DPF operator classes.\nglobal_center_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.split_mesh",
        "href": "api/ansys.dpf.core.operators.mesh.split_mesh.html#split_mesh",
        "title": "split_mesh",
        "section": "split_mesh",
        "text": "Autogenerated DPF operator classes.\nsplit_mesh"
    },
    {
        "objectID": "api/ansys.dpf.core.operator_specification",
        "href": "api/ansys.dpf.core.operator_specification.html#operator-specification",
        "title": "Operator Specification",
        "section": "Operator Specification",
        "text": "The OperatorSpecification Provides a documentation for each Operator\nOperator Specification"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.server.grpc_start_server",
        "href": "api/ansys.dpf.core.operators.server.grpc_start_server.html#grpc_start_server",
        "title": "grpc_start_server",
        "section": "grpc_start_server",
        "text": "Autogenerated DPF operator classes.\ngrpc_start_server"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.compression.kmeans_clustering",
        "href": "api/ansys.dpf.core.operators.compression.kmeans_clustering.html#kmeans_clustering",
        "title": "kmeans_clustering",
        "section": "kmeans_clustering",
        "text": "Autogenerated DPF operator classes.\nkmeans_clustering"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.equivalent_mass",
        "href": "api/ansys.dpf.core.operators.result.equivalent_mass.html#equivalent_mass",
        "title": "equivalent_mass",
        "section": "equivalent_mass",
        "text": "Autogenerated DPF operator classes.\nequivalent_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_weighted_fields",
        "href": "api/ansys.dpf.core.operators.utility.merge_weighted_fields.html#merge_weighted_fields",
        "title": "merge_weighted_fields",
        "section": "merge_weighted_fields",
        "text": "Autogenerated DPF operator classes.\nmerge_weighted_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.stress_von_mises",
        "href": "api/ansys.dpf.core.operators.result.stress_von_mises.html#stress_von_mises",
        "title": "stress_von_mises",
        "section": "stress_von_mises",
        "text": "Autogenerated DPF operator classes.\nstress_von_mises"
    },
    {
        "objectID": "examples/06-plotting/index",
        "href": "examples/06-plotting/index.html#plotting-examples",
        "title": "Plotting examples",
        "section": "Plotting examples",
        "text": "These examples show how to use the ansys.dpf.core.plotter.DpfPlotter class.\nsphx_glr_examples_06-plotting_00-basic_plotting.py\nsphx_glr_examples_06-plotting_01-compare_results.py\nsphx_glr_examples_06-plotting_02-solution_combination.py\nsphx_glr_examples_06-plotting_03-labels.py\nsphx_glr_examples_06-plotting_04-plot_on_path.py\nsphx_glr_examples_06-plotting_05-plot_on_warped_mesh.py\nsphx_glr_examples_06-plotting_06-animate_results.py\nsphx_glr_examples_06-plotting_07-plot_on_geometries.py\nPlotting examples\nansys.dpf.core.plotter.DpfPlotter"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.from_field",
        "href": "api/ansys.dpf.core.operators.mesh.from_field.html#from_field",
        "title": "from_field",
        "section": "from_field",
        "text": "Autogenerated DPF operator classes.\nfrom_field"
    },
    {
        "objectID": "examples/13-streamlines/sg_execution_times",
        "href": "examples/13-streamlines/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:20.106 total execution time for 2 files from examples13-streamlines:\nExample\nTime\nMem (MB)\nsphx_glr_examples_13-streamlines_00_plot_3d_streamlines.py (00_plot_3d_streamlines.py)\n00:15.604\n0.0\nsphx_glr_examples_13-streamlines_01_plot_surface_streamlines.py (01_plot_surface_streamlines.py)\n00:04.502\n0.0\nComputation times\n00_plot_3d_streamlines.py\n01_plot_surface_streamlines.py"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.pow",
        "href": "api/ansys.dpf.core.operators.math.pow.html#pow",
        "title": "pow",
        "section": "pow",
        "text": "Autogenerated DPF operator classes.\npow"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.metadata.cyclic_mesh_expansion",
        "href": "api/ansys.dpf.core.operators.metadata.cyclic_mesh_expansion.html#cyclic_mesh_expansion",
        "title": "cyclic_mesh_expansion",
        "section": "cyclic_mesh_expansion",
        "text": "Autogenerated DPF operator classes.\ncyclic_mesh_expansion"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_invariant_terms_rbd",
        "href": "api/ansys.dpf.core.operators.result.compute_invariant_terms_rbd.html#compute_invariant_terms_rbd",
        "title": "compute_invariant_terms_rbd",
        "section": "compute_invariant_terms_rbd",
        "text": "Autogenerated DPF operator classes.\ncompute_invariant_terms_rbd"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.data_tree_to_json",
        "href": "api/ansys.dpf.core.operators.serialization.data_tree_to_json.html#data_tree_to_json",
        "title": "data_tree_to_json",
        "section": "data_tree_to_json",
        "text": "Autogenerated DPF operator classes.\ndata_tree_to_json"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.bind_support_fc",
        "href": "api/ansys.dpf.core.operators.utility.bind_support_fc.html#bind_support_fc",
        "title": "bind_support_fc",
        "section": "bind_support_fc",
        "text": "Autogenerated DPF operator classes.\nbind_support_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.nmisc",
        "href": "api/ansys.dpf.core.operators.result.nmisc.html#nmisc",
        "title": "nmisc",
        "section": "nmisc",
        "text": "Autogenerated DPF operator classes.\nnmisc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.meshes_container",
        "href": "api/ansys.dpf.core.operators.utility.meshes_container.html#meshes_container",
        "title": "meshes_container",
        "section": "meshes_container",
        "text": "Autogenerated DPF operator classes.\nmeshes_container"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_meshes",
        "href": "api/ansys.dpf.core.operators.utility.merge_meshes.html#merge_meshes",
        "title": "merge_meshes",
        "section": "merge_meshes",
        "text": "Autogenerated DPF operator classes.\nmerge_meshes"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_gap_distance",
        "href": "api/ansys.dpf.core.operators.result.contact_gap_distance.html#contact_gap_distance",
        "title": "contact_gap_distance",
        "section": "contact_gap_distance",
        "text": "Autogenerated DPF operator classes.\ncontact_gap_distance"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_pressure",
        "href": "api/ansys.dpf.core.operators.result.contact_pressure.html#contact_pressure",
        "title": "contact_pressure",
        "section": "contact_pressure",
        "text": "Autogenerated DPF operator classes.\ncontact_pressure"
    },
    {
        "objectID": "examples/12-fluids/00-fluids_model",
        "href": "examples/12-fluids/00-fluids_model.html#explore-fluids-models",
        "title": "Explore Fluids models",
        "section": "Explore Fluids models",
        "text": "This example demonstrates how to explore Ansys Fluent and Ansys CFX models employing\nthe MeshInfo and ResultInfo.\nThis example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nExplore Fluids models\nMeshInfo\nResultInfo"
    },
    {
        "objectID": "examples/12-fluids/00-fluids_model",
        "href": "examples/12-fluids/00-fluids_model.html#exploring-an-ansys-fluent-model",
        "title": "Explore Fluids models > Exploring an Ansys Fluent model",
        "section": "Exploring an Ansys Fluent model",
        "text": "The first part of the example demonstrates how you can explore an Ansys Fluent\nmodel. Import the result file and create a model.\nExploring an Ansys Fluent model"
    },
    {
        "objectID": "examples/12-fluids/00-fluids_model",
        "href": "examples/12-fluids/00-fluids_model.html#exploring-the-mesh",
        "title": "Explore Fluids models > Exploring the mesh",
        "section": "Exploring the mesh",
        "text": "Explore the mesh through the MeshInfo. The MeshInfo provides metadata\ninformation about the mesh. For fluid models, it is useful to know the cell and\nface zones, as well as the topological relationships between them. First get all\nthe available information in the MeshInfo .\nThen, get the bodies and their names in the model with the “body_names” StringField,\nwhich provides a relationship between body IDs and names. In this model there are two\nbodies.\nEach body is comprised of a set of cell zones. You can investigate the hierarchical\nrelationship between bodies and cell zones through the “body_cell_topology”\nPropertyField, which provides a relationship between the body IDs and the cell zone\nIDs. In this case, each body is only comprised of one cell zone.\nSimilarly, each body is limited by a set of face zones (generally representing\nboundary conditions). You can investigate the hierarchical relationship between\nbodies and face zones through the “body_face_topology” PropertyField, which\nprovides a relationship between the body IDs and the face zone IDs. In this case,\neach body is limited by several face zones.\nThe cell and face zone IDs shown in the previous PropertyFields can be mapped\nto their names through the “body_zone_names” and “face_zone_names” PropertyField.\nAs in this model there is a 1-1 correspondence between bodies and cell zones,\nthey have the same names and IDs.\nAll zone names (regardless of them being cell or face zones) are exported to\nthe “zone_names” StringField .\nHelpers are provided to quickly get a map of zone ID to zone name.\nAs well as a map of body ID to body name.\nTo facilitate the extraction of results, the body, cell and face zone Scoping\nare extracted. They can be used to scope results.\nExploring the mesh\nMeshInfo\nMeshInfo\nMeshInfo\nStringField\nPropertyField\nPropertyField\nPropertyField\nStringField\nScoping"
    },
    {
        "objectID": "examples/12-fluids/00-fluids_model",
        "href": "examples/12-fluids/00-fluids_model.html#exploring-the-results",
        "title": "Explore Fluids models > Exploring the results",
        "section": "Exploring the results",
        "text": "Explore the available results in the model through the ResultInfo. This is a Fluent model\nwhose native results are exported to either the centroid of the elements (like\nEnthalpy or RMS Temperature), the centroid of the faces (like the Mass Flow Rate)\nor the centroid of both elements and faces (like Static Pressure).\nEach result holds more detailed information while explored individually. Enthalpy\nis a scalar magnitude exported to the centroids of the elements (cells). Thus, it is\navailable for the two cell zones of the model (13 and 28). In addition, the model\nonly has one phase, and therefore the result can only be extracted for “phase-1”.\nStatic Pressure, however, is ElementalAndFaces, which means that it is exported\nat both the centroids of the cells and the centroids of the faces. Therefore, it is\navailable for all the cell and face zones of the model.\nExploring the results"
    },
    {
        "objectID": "examples/12-fluids/00-fluids_model",
        "href": "examples/12-fluids/00-fluids_model.html#exploring-an-ansys-cfx-model",
        "title": "Explore Fluids models > Exploring an Ansys CFX model",
        "section": "Exploring an Ansys CFX model",
        "text": "The second part of the example demonstrates how you can explore an Ansys CFX model.\nImport the result file and create a model.\nExploring an Ansys CFX model"
    },
    {
        "objectID": "examples/12-fluids/00-fluids_model",
        "href": "examples/12-fluids/00-fluids_model.html#exploring-the-mesh",
        "title": "Explore Fluids models > Exploring the mesh",
        "section": "Exploring the mesh",
        "text": "If once again we explore the MeshInfo, we can see that the same information is\nreadily available.\nIn this CFX model there are also two bodies.\nFor this model, each body is conformed by several cell zones. In this general\nsituation, the body ID corresponds to the highest cell zone ID of the one that\ncomprises it.\nYou can also explore the face zone IDs in each body.\nThe cell and face zone names are readily available.\nExploring the mesh"
    },
    {
        "objectID": "examples/12-fluids/00-fluids_model",
        "href": "examples/12-fluids/00-fluids_model.html#exploring-the-results",
        "title": "Explore Fluids models > Exploring the results",
        "section": "Exploring the results",
        "text": "By exploring the ResultInfo we can see that all CFX variables are exported to\nthe Nodes.\nHowever, in this model there are two distinct phases. To understand the phases\nat the model, you can explore the qualifiers of the ResultInfo. Thus, results\ncould potentially be scoped on “zone” and “phase”, with the ID and name of each\nphase shown below.\nEach result holds more detailed information while explored individually. Static\nPressure is only available for phase 1 (“<Mixture>”), and several cell and face\nzones.\nThermal conductivity, however, exists for phases 2 and 3 (“Copper” and “Water at 25 C”,\nrespectively), and several face and cell zones.\nTotal running time of the script: (0 minutes 6.069 seconds)\nDownload Jupyter notebook: 00-fluids_model.ipynb\nDownload Python source code: 00-fluids_model.py\nDownload zipped: 00-fluids_model.zip\nGallery generated by Sphinx-Gallery\nExploring the results\nDownload Jupyter notebook: 00-fluids_model.ipynb\nDownload Python source code: 00-fluids_model.py\nDownload zipped: 00-fluids_model.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.tangential_contact_moment",
        "href": "api/ansys.dpf.core.operators.result.tangential_contact_moment.html#tangential_contact_moment",
        "title": "tangential_contact_moment",
        "section": "tangential_contact_moment",
        "text": "Autogenerated DPF operator classes.\ntangential_contact_moment"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_rs_shear_stress",
        "href": "api/ansys.dpf.core.operators.result.beam_rs_shear_stress.html#beam_rs_shear_stress",
        "title": "beam_rs_shear_stress",
        "section": "beam_rs_shear_stress",
        "text": "Autogenerated DPF operator classes.\nbeam_rs_shear_stress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_nmisc",
        "href": "api/ansys.dpf.core.operators.result.cyclic_nmisc.html#cyclic_nmisc",
        "title": "cyclic_nmisc",
        "section": "cyclic_nmisc",
        "text": "Autogenerated DPF operator classes.\ncyclic_nmisc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.conjugate",
        "href": "api/ansys.dpf.core.operators.math.conjugate.html#conjugate",
        "title": "conjugate",
        "section": "conjugate",
        "text": "Autogenerated DPF operator classes.\nconjugate"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.extract_scoping",
        "href": "api/ansys.dpf.core.operators.utility.extract_scoping.html#extract_scoping",
        "title": "extract_scoping",
        "section": "extract_scoping",
        "text": "Autogenerated DPF operator classes.\nextract_scoping"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_joint_internal_energy",
        "href": "api/ansys.dpf.core.operators.result.global_joint_internal_energy.html#global_joint_internal_energy",
        "title": "global_joint_internal_energy",
        "section": "global_joint_internal_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_joint_internal_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility",
        "href": "api/ansys.dpf.core.operators.utility.html#ansysdpfcoreoperatorsutility-package",
        "title": "ansys.dpf.core.operators.utility package",
        "section": "ansys.dpf.core.operators.utility package",
        "text": "ansys.dpf.core.operators.utility package"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility",
        "href": "api/ansys.dpf.core.operators.utility.html#submodules",
        "title": "ansys.dpf.core.operators.utility package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility",
        "href": "api/ansys.dpf.core.operators.utility.html#module-contents",
        "title": "ansys.dpf.core.operators.utility package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_matrices_fc",
        "href": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_matrices_fc.html#assemble_scalars_to_matrices_fc",
        "title": "assemble_scalars_to_matrices_fc",
        "section": "assemble_scalars_to_matrices_fc",
        "text": "Autogenerated DPF operator classes.\nassemble_scalars_to_matrices_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.gauss_to_node",
        "href": "api/ansys.dpf.core.operators.geo.gauss_to_node.html#gauss_to_node",
        "title": "gauss_to_node",
        "section": "gauss_to_node",
        "text": "Autogenerated DPF operator classes.\ngauss_to_node"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.fft",
        "href": "api/ansys.dpf.core.operators.mapping.fft.html#fft",
        "title": "fft",
        "section": "fft",
        "text": "Autogenerated DPF operator classes.\nfft"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.abc_weightings",
        "href": "api/ansys.dpf.core.operators.filter.abc_weightings.html#abc_weightings",
        "title": "abc_weightings",
        "section": "abc_weightings",
        "text": "Autogenerated DPF operator classes.\nabc_weightings"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.average_over_label_fc",
        "href": "api/ansys.dpf.core.operators.math.average_over_label_fc.html#average_over_label_fc",
        "title": "average_over_label_fc",
        "section": "average_over_label_fc",
        "text": "Autogenerated DPF operator classes.\naverage_over_label_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.cyclic_expanded_displacement",
        "href": "api/ansys.dpf.core.operators.result.cyclic_expanded_displacement.html#cyclic_expanded_displacement",
        "title": "cyclic_expanded_displacement",
        "section": "cyclic_expanded_displacement",
        "text": "Autogenerated DPF operator classes.\ncyclic_expanded_displacement"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.incremental_energy",
        "href": "api/ansys.dpf.core.operators.result.incremental_energy.html#incremental_energy",
        "title": "incremental_energy",
        "section": "incremental_energy",
        "text": "Autogenerated DPF operator classes.\nincremental_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.plugins",
        "href": "api/ansys.dpf.core.plugins.html#python-dpf-plugins-utilities",
        "title": "Python DPF plugins utilities",
        "section": "Python DPF plugins utilities",
        "text": "Contains the utilities specific to installing and using Python DPF plugins.\nPython DPF plugins utilities"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.window_bartlett",
        "href": "api/ansys.dpf.core.operators.math.window_bartlett.html#window_bartlett",
        "title": "window_bartlett",
        "section": "window_bartlett",
        "text": "Autogenerated DPF operator classes.\nwindow_bartlett"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/03-cyclic_multi_stage",
        "href": "examples/11-cyclic-symmetry/03-cyclic_multi_stage.html#multi-stage-cyclic-symmetry-example",
        "title": "Multi-stage cyclic symmetry example",
        "section": "Multi-stage cyclic symmetry example",
        "text": "This example shows how to expand the mesh and results from a\nmulti-stage cyclic analysis.\nCreate the model and display the state of the result.\nMulti-stage cyclic symmetry example"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/03-cyclic_multi_stage",
        "href": "examples/11-cyclic-symmetry/03-cyclic_multi_stage.html#expand-displacement-results",
        "title": "Multi-stage cyclic symmetry example > Expand displacement results",
        "section": "Expand displacement results",
        "text": "This example expands displacement results, by default on all\nnodes and the first time step. Note that the displacements are expanded using\nthe read_cyclic\nproperty with 2 as an argument (1 would ignore the cyclic symmetry).\nExpand displacement results\nread_cyclic"
    },
    {
        "objectID": "examples/11-cyclic-symmetry/03-cyclic_multi_stage",
        "href": "examples/11-cyclic-symmetry/03-cyclic_multi_stage.html#expand-stresses-at-a-given-time-step",
        "title": "Multi-stage cyclic symmetry example > Expand stresses at a given time step",
        "section": "Expand stresses at a given time step",
        "text": "Total running time of the script: (0 minutes 3.266 seconds)\nDownload Jupyter notebook: 03-cyclic_multi_stage.ipynb\nDownload Python source code: 03-cyclic_multi_stage.py\nDownload zipped: 03-cyclic_multi_stage.zip\nGallery generated by Sphinx-Gallery\nExpand stresses at a given time step\nDownload Jupyter notebook: 03-cyclic_multi_stage.ipynb\nDownload Python source code: 03-cyclic_multi_stage.py\nDownload zipped: 03-cyclic_multi_stage.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.correlation",
        "href": "api/ansys.dpf.core.operators.math.correlation.html#correlation",
        "title": "correlation",
        "section": "correlation",
        "text": "Autogenerated DPF operator classes.\ncorrelation"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.raw_reaction_force",
        "href": "api/ansys.dpf.core.operators.result.raw_reaction_force.html#raw_reaction_force",
        "title": "raw_reaction_force",
        "section": "raw_reaction_force",
        "text": "Autogenerated DPF operator classes.\nraw_reaction_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.transpose",
        "href": "api/ansys.dpf.core.operators.scoping.transpose.html#transpose",
        "title": "transpose",
        "section": "transpose",
        "text": "Autogenerated DPF operator classes.\ntranspose"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_Y",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_Y.html#elastic_strain_y",
        "title": "elastic_strain_Y",
        "section": "elastic_strain_Y",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_Y"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.to_elemental_nodal_fc",
        "href": "api/ansys.dpf.core.operators.averaging.to_elemental_nodal_fc.html#to_elemental_nodal_fc",
        "title": "to_elemental_nodal_fc",
        "section": "to_elemental_nodal_fc",
        "text": "Autogenerated DPF operator classes.\nto_elemental_nodal_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.sweeping_phase_fc",
        "href": "api/ansys.dpf.core.operators.math.sweeping_phase_fc.html#sweeping_phase_fc",
        "title": "sweeping_phase_fc",
        "section": "sweeping_phase_fc",
        "text": "Autogenerated DPF operator classes.\nsweeping_phase_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_difference_fc",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_difference_fc.html#elemental_difference_fc",
        "title": "elemental_difference_fc",
        "section": "elemental_difference_fc",
        "text": "Autogenerated DPF operator classes.\nelemental_difference_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.part_internal_energy",
        "href": "api/ansys.dpf.core.operators.result.part_internal_energy.html#part_internal_energy",
        "title": "part_internal_energy",
        "section": "part_internal_energy",
        "text": "Autogenerated DPF operator classes.\npart_internal_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.hdf5dpf_custom_read",
        "href": "api/ansys.dpf.core.operators.serialization.hdf5dpf_custom_read.html#hdf5dpf_custom_read",
        "title": "hdf5dpf_custom_read",
        "section": "hdf5dpf_custom_read",
        "text": "Autogenerated DPF operator classes.\nhdf5dpf_custom_read"
    },
    {
        "objectID": "examples/05-file-IO/02-hdf5_serialize_and_read",
        "href": "examples/05-file-IO/02-hdf5_serialize_and_read.html#hdf5-export-and-import-operations",
        "title": "HDF5 export and import operations",
        "section": "HDF5 export and import operations",
        "text": "This example shows you how to use the HDF5 format to export results\nand meshed regions in an H5 file.\nIt also demonstrates how to read results and meshed regions from the\ncreated H5 file.\nFirst, it exports all the results for all time frequencies,\nthen it exports all the time sets for the results, per time set.\nFinally, it reads the results and compares them.\nFor the example to run correctly, ensure you do not have an existing H5 file.\nThis example requires DPF 7.0 (ansys-dpf-server-2024-1-pre0) or above.\nFor more information, see ref_compatibility.\nHDF5 export and import operations"
    },
    {
        "objectID": "examples/05-file-IO/02-hdf5_serialize_and_read",
        "href": "examples/05-file-IO/02-hdf5_serialize_and_read.html#import-modules-instantiate-model-and-create-temporary-folder",
        "title": "HDF5 export and import operations > Import modules, instantiate model and create temporary folder",
        "section": "Import modules, instantiate model and create temporary folder",
        "text": "Import the dpf-core module and its examples files.\nInstantiate the model and the provider operators:\nDefine a temporary folder for outputs:\nImport modules, instantiate model and create temporary folder\ndpf-core"
    },
    {
        "objectID": "examples/05-file-IO/02-hdf5_serialize_and_read",
        "href": "examples/05-file-IO/02-hdf5_serialize_and_read.html#use-h5-serialization-operator",
        "title": "HDF5 export and import operations > Use H5 serialization operator",
        "section": "Use H5 serialization operator",
        "text": "Export all results on all time frequencies:\nExport all the results, time set per time set:\nUse H5 serialization operator"
    },
    {
        "objectID": "examples/05-file-IO/02-hdf5_serialize_and_read",
        "href": "examples/05-file-IO/02-hdf5_serialize_and_read.html#use-h5-reading-operator",
        "title": "HDF5 export and import operations > Use H5 reading operator",
        "section": "Use H5 reading operator",
        "text": "Read the results from all time steps files:\nRead the meshed region from all time steps file:\nRead the results from the time set per set file:\nRead the meshed region from all time steps files:\nUse H5 reading operator"
    },
    {
        "objectID": "examples/05-file-IO/02-hdf5_serialize_and_read",
        "href": "examples/05-file-IO/02-hdf5_serialize_and_read.html#compare-results",
        "title": "HDF5 export and import operations > Compare results",
        "section": "Compare results",
        "text": "Print global data:\ncompare first result at second time set:\ncompare 4th result at 6 time set:\nTotal running time of the script: (0 minutes 13.100 seconds)\nDownload Jupyter notebook: 02-hdf5_serialize_and_read.ipynb\nDownload Python source code: 02-hdf5_serialize_and_read.py\nDownload zipped: 02-hdf5_serialize_and_read.zip\nGallery generated by Sphinx-Gallery\nCompare results\nDownload Jupyter notebook: 02-hdf5_serialize_and_read.ipynb\nDownload Python source code: 02-hdf5_serialize_and_read.py\nDownload zipped: 02-hdf5_serialize_and_read.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.integrate_over_elements",
        "href": "api/ansys.dpf.core.operators.geo.integrate_over_elements.html#integrate_over_elements",
        "title": "integrate_over_elements",
        "section": "integrate_over_elements",
        "text": "Autogenerated DPF operator classes.\nintegrate_over_elements"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_s_shear_force",
        "href": "api/ansys.dpf.core.operators.result.beam_s_shear_force.html#beam_s_shear_force",
        "title": "beam_s_shear_force",
        "section": "beam_s_shear_force",
        "text": "Autogenerated DPF operator classes.\nbeam_s_shear_force"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.extract_field",
        "href": "api/ansys.dpf.core.operators.utility.extract_field.html#extract_field",
        "title": "extract_field",
        "section": "extract_field",
        "text": "Autogenerated DPF operator classes.\nextract_field"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.invariant.principal_invariants_fc",
        "href": "api/ansys.dpf.core.operators.invariant.principal_invariants_fc.html#principal_invariants_fc",
        "title": "principal_invariants_fc",
        "section": "principal_invariants_fc",
        "text": "Autogenerated DPF operator classes.\nprincipal_invariants_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.rotate",
        "href": "api/ansys.dpf.core.operators.geo.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Autogenerated DPF operator classes.\nrotate"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.temperature",
        "href": "api/ansys.dpf.core.operators.result.temperature.html#temperature",
        "title": "temperature",
        "section": "temperature",
        "text": "Autogenerated DPF operator classes.\ntemperature"
    },
    {
        "objectID": "examples/00-basic/01-basic_operators",
        "href": "examples/00-basic/01-basic_operators.html#operators-overview",
        "title": "Operators overview",
        "section": "Operators overview",
        "text": "In DPF, operators provide the primary method for interacting with and extracting\nresults. Within DPF-Core, operators are directly exposed with\nthe Operators class as well as wrapped within several other\nconvenience classes.\nFor a list of all operators, see ref_dpf_operators_reference.\nThis example demonstrates how to work directly with operators and\ncompares this method to a wrapped approach.\nCreate a model object to establish a connection with an\nexample result file:\nNext, create a raw displacement operator \"U\".  Each operator\ncontains input and output pins that can be connected to\nvarious sources to include other operators. This allows operators\nto be “chained” to allow for highly efficient operations.\nTo print out the available inputs and outputs of the\ndisplacement operator:\nOperators overview\nOperators\n\"U\"\ninput\noutput"
    },
    {
        "objectID": "examples/00-basic/01-basic_operators",
        "href": "examples/00-basic/01-basic_operators.html#compute-the-maximum-normalized-displacement",
        "title": "Operators overview > Compute the maximum normalized displacement",
        "section": "Compute the maximum normalized displacement",
        "text": "This example demonstrate how to chain various operators. It connects the input\nof the operator to the data sources contained within the model object and\nthen the maximum of the norm of the operator.\nCompute the maximum normalized displacement\nmodel"
    },
    {
        "objectID": "examples/00-basic/01-basic_operators",
        "href": "examples/00-basic/01-basic_operators.html#wrapped-operators",
        "title": "Operators overview > Wrapped operators",
        "section": "Wrapped operators",
        "text": "The model.results property contains all the wrapped operators\navailable for a given result. This is provided out of convenience\nbecause all operators may not be available for a given result. Consequently,\nit is much easier to reference available operators by first running:\nCreate the displacement operator directly from the results property:\nPlot the displacement:\nWrapped operators\nmodel.results\nresults"
    },
    {
        "objectID": "examples/00-basic/01-basic_operators",
        "href": "examples/00-basic/01-basic_operators.html#scripting-operator-syntax",
        "title": "Operators overview > Scripting operator syntax",
        "section": "Scripting operator syntax",
        "text": "Because DPF provides a scripting syntax, knowing\nan operator’s “string name” is not mandatory.\nWhile this example is similar to the above script, it uses the DPF\nscripting syntax.\nInstead of using a model class instance, use a\nDdataSources object directly. The DataSources constructor input is a path.\nInstantiate the operators and connect them:\nGet the output and print the result data:\nTotal running time of the script: (0 minutes 1.829 seconds)\nDownload Jupyter notebook: 01-basic_operators.ipynb\nDownload Python source code: 01-basic_operators.py\nDownload zipped: 01-basic_operators.zip\nGallery generated by Sphinx-Gallery\nScripting operator syntax\nmodel\nDdataSources\nDataSources\nDownload Jupyter notebook: 01-basic_operators.ipynb\nDownload Python source code: 01-basic_operators.py\nDownload zipped: 01-basic_operators.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.animator",
        "href": "api/ansys.dpf.core.animator.html#animator",
        "title": "Animator",
        "section": "Animator",
        "text": "This module contains the DPF animator class.\nContains classes used to animate results based on workflows using PyVista.\nAnimator"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_kinetic_energy",
        "href": "api/ansys.dpf.core.operators.result.global_kinetic_energy.html#global_kinetic_energy",
        "title": "global_kinetic_energy",
        "section": "global_kinetic_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_kinetic_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.nodal_fraction_fc",
        "href": "api/ansys.dpf.core.operators.averaging.nodal_fraction_fc.html#nodal_fraction_fc",
        "title": "nodal_fraction_fc",
        "section": "nodal_fraction_fc",
        "text": "Autogenerated DPF operator classes.\nnodal_fraction_fc"
    },
    {
        "objectID": "examples/01-transient_analyses/01-transient_easy_time_scoping",
        "href": "examples/01-transient_analyses/01-transient_easy_time_scoping.html#choose-a-time-scoping-for-a-transient-analysis",
        "title": "Choose a time scoping for a transient analysis",
        "section": "Choose a time scoping for a transient analysis",
        "text": "This example shows how to use a model’s result to choose a time scoping.\nCreate the model and display the state of the result. This transient result\nfile contains several individual results, each at a different times.\nChoose a time scoping for a transient analysis"
    },
    {
        "objectID": "examples/01-transient_analyses/01-transient_easy_time_scoping",
        "href": "examples/01-transient_analyses/01-transient_easy_time_scoping.html#obtain-minimum-and-maximum-displacements-at-all-times",
        "title": "Choose a time scoping for a transient analysis > Obtain minimum and maximum displacements at all times",
        "section": "Obtain minimum and maximum displacements at all times",
        "text": "Create a displacement operator and set its time scoping request to\nthe entire time frequency support:\nPlot the minimum and maximum displacements over time:\nObtain minimum and maximum displacements at all times"
    },
    {
        "objectID": "examples/01-transient_analyses/01-transient_easy_time_scoping",
        "href": "examples/01-transient_analyses/01-transient_easy_time_scoping.html#use-time-extrapolation",
        "title": "Choose a time scoping for a transient analysis > Use time extrapolation",
        "section": "Use time extrapolation",
        "text": "A local maximum can be seen on the plot between 0.05 and 0.075 seconds.\nDisplacement is evaluated every 0.0005 seconds in this range\nto draw a nicer plot on this range.\nCreate a displacement operator and set its time scoping request:\nPlot the minimum and maximum displacements over time:\nTotal running time of the script: (0 minutes 0.858 seconds)\nDownload Jupyter notebook: 01-transient_easy_time_scoping.ipynb\nDownload Python source code: 01-transient_easy_time_scoping.py\nDownload zipped: 01-transient_easy_time_scoping.zip\nGallery generated by Sphinx-Gallery\nUse time extrapolation\nDownload Jupyter notebook: 01-transient_easy_time_scoping.ipynb\nDownload Python source code: 01-transient_easy_time_scoping.py\nDownload zipped: 01-transient_easy_time_scoping.zip"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.generalized_inner_product",
        "href": "api/ansys.dpf.core.operators.math.generalized_inner_product.html#generalized_inner_product",
        "title": "generalized_inner_product",
        "section": "generalized_inner_product",
        "text": "Autogenerated DPF operator classes.\ngeneralized_inner_product"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.unit_convert_fc",
        "href": "api/ansys.dpf.core.operators.math.unit_convert_fc.html#unit_convert_fc",
        "title": "unit_convert_fc",
        "section": "unit_convert_fc",
        "text": "Autogenerated DPF operator classes.\nunit_convert_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.element_nodal_forces",
        "href": "api/ansys.dpf.core.operators.result.element_nodal_forces.html#element_nodal_forces",
        "title": "element_nodal_forces",
        "section": "element_nodal_forces",
        "text": "Autogenerated DPF operator classes.\nelement_nodal_forces"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.artificial_hourglass_energy",
        "href": "api/ansys.dpf.core.operators.result.artificial_hourglass_energy.html#artificial_hourglass_energy",
        "title": "artificial_hourglass_energy",
        "section": "artificial_hourglass_energy",
        "text": "Autogenerated DPF operator classes.\nartificial_hourglass_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_matrices",
        "href": "api/ansys.dpf.core.operators.utility.assemble_scalars_to_matrices.html#assemble_scalars_to_matrices",
        "title": "assemble_scalars_to_matrices",
        "section": "assemble_scalars_to_matrices",
        "text": "Autogenerated DPF operator classes.\nassemble_scalars_to_matrices"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.logic.component_transformer",
        "href": "api/ansys.dpf.core.operators.logic.component_transformer.html#component_transformer",
        "title": "component_transformer",
        "section": "component_transformer",
        "text": "Autogenerated DPF operator classes.\ncomponent_transformer"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.invert",
        "href": "api/ansys.dpf.core.operators.math.invert.html#invert",
        "title": "invert",
        "section": "invert",
        "text": "Autogenerated DPF operator classes.\ninvert"
    },
    {
        "objectID": "user_guide/server_context",
        "href": "user_guide/server_context.html#server-context",
        "title": "Server context",
        "section": "Server context",
        "text": "The ServerContext class drives the\nlicensing logic a server starts with.\nThe server context is composed of the following information:\ncontext_type, a LicensingContextType\nclass object that defines whether DPF capabilities requiring a license checkout are allowed.\nxml_path, which sets DPF default operator capabilities.\nFor more information, see the AvailableServerContexts\nclass and user_guide_xmlfiles.\nTwo main licensing context type capabilities are available:\nPremium: This default context allows DPF to perform license checkouts,\nmaking licensed DPF operators available.\nEntry: This context does not allow DPF to perform any license checkout,\nmeaning that licensed DPF operators fail.\nFor the operator list for each licensing context type, see ref_dpf_operators_reference.\nThe Premium operators reference includes licensed DPF operators.\nThe Entry operators reference only includes unlicensed DPF operators.\nServer context\nServerContext\ncontext_type\nLicensingContextType\nxml_path\nAvailableServerContexts"
    },
    {
        "objectID": "user_guide/server_context",
        "href": "user_guide/server_context.html#change-server-context-from-entry-to-premium",
        "title": "Server context > Change server context from Entry to Premium",
        "section": "Change server context from Entry to Premium",
        "text": "Once a DPF Server is started in Entry context, it can be upgraded to the\nPremium context:\nChange server context from Entry to Premium"
    },
    {
        "objectID": "user_guide/server_context",
        "href": "user_guide/server_context.html#change-the-default-server-context",
        "title": "Server context > Change the default server context",
        "section": "Change the default server context",
        "text": "The default context for the server is Premium. You can change the context using\nthe ANSYS_DPF_SERVER_CONTEXT environment variable. For more information, see\nthe :module: <ansys.dpf.core.server_context> module). You can also change the server context\nwith this code:\nAs starting an InProcess server means linking the DPF binaries to your current Python\nprocess, you cannot start a new InProcess server. Thus, if your local InProcess server\nis already Premium, you cannot set it back as Entry.\nInProcess being the default server type, the proper commands to work as Entry should be\nset at the start of your script.\nChange the default server context\nANSYS_DPF_SERVER_CONTEXT\nInProcess\nInProcess\nInProcess\nInProcess"
    },
    {
        "objectID": "user_guide/server_context",
        "href": "user_guide/server_context.html#release-history",
        "title": "Server context > Release history",
        "section": "Release history",
        "text": "The Entry server context is available in server version 6.0\n(Ansys 2023 R2) and later.\nWith a server version earlier than 6.0, Premium is the default server\ncontext and all Premium ref_dpf_operators_reference\nare available, depending only on their release date.\nRelease history"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.forward",
        "href": "api/ansys.dpf.core.operators.utility.forward.html#forward",
        "title": "forward",
        "section": "forward",
        "text": "Autogenerated DPF operator classes.\nforward"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_mean",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_mean.html#elemental_mean",
        "title": "elemental_mean",
        "section": "elemental_mean",
        "text": "Autogenerated DPF operator classes.\nelemental_mean"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_XZ",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_XZ.html#plastic_strain_xz",
        "title": "plastic_strain_XZ",
        "section": "plastic_strain_XZ",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_XZ"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.compute_total_strain_Z",
        "href": "api/ansys.dpf.core.operators.result.compute_total_strain_Z.html#compute_total_strain_z",
        "title": "compute_total_strain_Z",
        "section": "compute_total_strain_Z",
        "text": "Autogenerated DPF operator classes.\ncompute_total_strain_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_fluid_penetration_pressure",
        "href": "api/ansys.dpf.core.operators.result.contact_fluid_penetration_pressure.html#contact_fluid_penetration_pressure",
        "title": "contact_fluid_penetration_pressure",
        "section": "contact_fluid_penetration_pressure",
        "text": "Autogenerated DPF operator classes.\ncontact_fluid_penetration_pressure"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.scoping.from_mesh",
        "href": "api/ansys.dpf.core.operators.scoping.from_mesh.html#from_mesh",
        "title": "from_mesh",
        "section": "from_mesh",
        "text": "Autogenerated DPF operator classes.\nfrom_mesh"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_eroded_kinetic_energy",
        "href": "api/ansys.dpf.core.operators.result.global_eroded_kinetic_energy.html#global_eroded_kinetic_energy",
        "title": "global_eroded_kinetic_energy",
        "section": "global_eroded_kinetic_energy",
        "text": "Autogenerated DPF operator classes.\nglobal_eroded_kinetic_energy"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.max_over_phase",
        "href": "api/ansys.dpf.core.operators.min_max.max_over_phase.html#max_over_phase",
        "title": "max_over_phase",
        "section": "max_over_phase",
        "text": "Autogenerated DPF operator classes.\nmax_over_phase"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.displacement",
        "href": "api/ansys.dpf.core.operators.result.displacement.html#displacement",
        "title": "displacement",
        "section": "displacement",
        "text": "Autogenerated DPF operator classes.\ndisplacement"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.plastic_strain_energy_density",
        "href": "api/ansys.dpf.core.operators.result.plastic_strain_energy_density.html#plastic_strain_energy_density",
        "title": "plastic_strain_energy_density",
        "section": "plastic_strain_energy_density",
        "text": "Autogenerated DPF operator classes.\nplastic_strain_energy_density"
    },
    {
        "objectID": "api/ansys.dpf.core",
        "href": "api/ansys.dpf.core.html#ansysdpfcore-package",
        "title": "ansys.dpf.core package",
        "section": "ansys.dpf.core package",
        "text": "ansys.dpf.core package"
    },
    {
        "objectID": "api/ansys.dpf.core",
        "href": "api/ansys.dpf.core.html#subpackages",
        "title": "ansys.dpf.core package > Subpackages",
        "section": "Subpackages",
        "text": "Subpackages"
    },
    {
        "objectID": "api/ansys.dpf.core",
        "href": "api/ansys.dpf.core.html#submodules",
        "title": "ansys.dpf.core package > Submodules",
        "section": "Submodules",
        "text": "Submodules"
    },
    {
        "objectID": "api/ansys.dpf.core",
        "href": "api/ansys.dpf.core.html#module-contents",
        "title": "ansys.dpf.core package > Module contents",
        "section": "Module contents",
        "text": "Module contents"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.filter.timescoping_low_pass",
        "href": "api/ansys.dpf.core.operators.filter.timescoping_low_pass.html#timescoping_low_pass",
        "title": "timescoping_low_pass",
        "section": "timescoping_low_pass",
        "text": "Autogenerated DPF operator classes.\ntimescoping_low_pass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.global_added_mass",
        "href": "api/ansys.dpf.core.operators.result.global_added_mass.html#global_added_mass",
        "title": "global_added_mass",
        "section": "global_added_mass",
        "text": "Autogenerated DPF operator classes.\nglobal_added_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_elemental",
        "href": "api/ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_elemental.html#elemental_nodal_to_nodal_elemental",
        "title": "elemental_nodal_to_nodal_elemental",
        "section": "elemental_nodal_to_nodal_elemental",
        "text": "Autogenerated DPF operator classes.\nelemental_nodal_to_nodal_elemental"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mapping.find_reduced_coordinates",
        "href": "api/ansys.dpf.core.operators.mapping.find_reduced_coordinates.html#find_reduced_coordinates",
        "title": "find_reduced_coordinates",
        "section": "find_reduced_coordinates",
        "text": "Autogenerated DPF operator classes.\nfind_reduced_coordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.for_each",
        "href": "api/ansys.dpf.core.operators.utility.for_each.html#for_each",
        "title": "for_each",
        "section": "for_each",
        "text": "Autogenerated DPF operator classes.\nfor_each"
    },
    {
        "objectID": "getting_started/dpf_server",
        "href": "getting_started/dpf_server.html#dpf-server",
        "title": "DPF Server",
        "section": "DPF Server",
        "text": "DPF provides numerical simulation users and engineers with a toolbox for accessing and transforming\nsimulation data. With DPF, you can perform complex preprocessing or postprocessing of large amounts of simulation data within a\nsimulation workflow.\nThe DPF Server is packaged within the Ansys installer in Ansys 2021 R1 and later.\nIt is also available as a standalone package that contains all the necessary files to run, enabling DPF capabilities.\nThe standalone DPF Server is available on the DPF Pre-Release page of the Ansys Customer Portal.\nThe first standalone version of DPF Server available is 6.0 (2023 R2).\nThe sections on this page describe how to install and use a standalone DPF Server.\nFor a quick start on using PyDPF, see ref_getting_started.\nFor more information on DPF and its use, see ref_user_guide.\nDPF Server"
    },
    {
        "objectID": "getting_started/dpf_server",
        "href": "getting_started/dpf_server.html#install-dpf-server",
        "title": "DPF Server > Install DPF Server",
        "section": "Install DPF Server",
        "text": "Download the ansys_dpf_server_win_v2025.1.pre0.zip or ansys_dpf_server_lin_v2025.1.pre0.zip file as appropriate.\nUnzip the package.\nOptional: download any other plugin ZIP file as appropriate and unzip the package. For example, to access the composites plugin for Linux,\ndownload ansys_dpf_composites_lin_v2025.1.pre0.zip and unzip the package in the same location as ansys_dpf_server_lin_v2025.1.pre0.zip.\nChange to the root folder (ansys_dpf_server_win_v2025.1.pre0) of the unzipped package.\nIn a Python environment, run this command:\nAs detailed in licensing, a standalone DPF Server is protected using the license terms specified in the\nDPFPreviewLicenseAgreement file, which is available on the DPF Pre-Release page\nof the Ansys Customer Portal.\nTo accept these terms, you must set this environment variable:\nTo use licensed DPF capabilities you must set the\nANSYSLMD_LICENSE_FILE environment variable to point to a valid local or remote license\nfollowing indications in configure_licensing.\nInstall DPF Server\nansys_dpf_server_win_v2025.1.pre0.zip\nansys_dpf_server_lin_v2025.1.pre0.zip\ncomposites\nansys_dpf_composites_lin_v2025.1.pre0.zip\nansys_dpf_server_lin_v2025.1.pre0.zip\nansys_dpf_server_win_v2025.1.pre0\nDPFPreviewLicenseAgreement\nANSYSLMD_LICENSE_FILE"
    },
    {
        "objectID": "getting_started/dpf_server",
        "href": "getting_started/dpf_server.html#use-dpf-server",
        "title": "DPF Server > Use DPF Server",
        "section": "Use DPF Server",
        "text": "DPF Server is protected using the license terms specified in the\nDPFPreviewLicenseAgreement file, which is available on the DPF Pre-Release page\nof the Ansys Customer Portal.\nUse DPF Server\nDPFPreviewLicenseAgreement"
    },
    {
        "objectID": "getting_started/dpf_server",
        "href": "getting_started/dpf_server.html#run-dpf-server-with-pydpf",
        "title": "DPF Server > Run DPF Server with PyDPF",
        "section": "Run DPF Server with PyDPF",
        "text": "PyDPF-Core is a Python client API communicating with a DPF Server, either\nthrough the network using gRPC or directly in the same process. PyDPF-Post is a Python\nmodule for postprocessing based on PyDPF-Core.\nBoth PyDPF-Core and PyDPF-Post can be used with DPF Server. Installation instructions\nfor PyDPF-Core are available in the PyDPF-Core Getting started.\nInstallation instructions for PyDPF-Post are available in the PyDPF-Post Getting started.\nWith PyDPF-Core and PyDPF-Post, the first creation of most DPF entities starts a DPF Server with the current default configuration and context.\nFor example, the following code automatically starts a DPF Server behind the scenes:\nWith PyDPF-Core, you can also explicitly start a DPF Server using this code:\nTo start a DPF Server from outside a Python environment, you can also use the execution script provided with your DPF Server package.\nOn Windows, start the DPF Server by running the Ans.Dpf.Grpc.bat file in the unzipped package.\nOn Linux, start the DPF Server by running the Ans.Dpf.Grpc.sh file in the unzipped package.\nRun DPF Server with PyDPF\nAns.Dpf.Grpc.bat\nAns.Dpf.Grpc.sh"
    },
    {
        "objectID": "getting_started/dpf_server",
        "href": "getting_started/dpf_server.html#manage-multiple-dpf-server-installations",
        "title": "DPF Server > Manage multiple DPF Server installations",
        "section": "Manage multiple DPF Server installations",
        "text": "PyDPF automatically starts a local instance of a DPF Server when you run a method requiring a\nconnection to a server, or when you use the start_local_server() method.\nThe start_local_server() method allows you to choose, if necessary, which DPF Server installation\nto use thanks to its ansys_path argument.\nPyDPF otherwise follows the logic below to automatically detect and choose which locally installed\nversion of DPF Server to run:\nit uses the ANSYS_DPF_PATH environment variable in priority if set and targeting a valid path to a DPF Server installation.\nit then checks the currently active Python environment for any installed standalone DPF Server, and uses the latest version available.\nit then checks for AWP_ROOTXXX environment variables, which are set by the Ansys installer, and uses the latest version available.\nif then raises an error if all of the steps above failed to return a valid path to a DPF Server installation.\nManage multiple DPF Server installations\nstart_local_server()\nstart_local_server()\nansys_path\nANSYS_DPF_PATH\nAWP_ROOTXXX"
    },
    {
        "objectID": "getting_started/dpf_server",
        "href": "getting_started/dpf_server.html#run-dpf-server-in-a-docker-container",
        "title": "DPF Server > Run DPF Server in a Docker container",
        "section": "Run DPF Server in a Docker container",
        "text": "DPF Server can be run in a Docker container.\nAlong with the ansys_dpf_server_lin_v2025.1.pre0.zip file mentioned earlier\nin Install DPF Server, download the Dockerfile file.\nOptional: download any other plugin ZIP file as appropriate. For example, to access the composites plugin for Linux,\ndownload ansys_dpf_composites_lin_v2025.1.pre0.zip.\nCopy all the ZIP files and Dockerfile file in a folder and navigate into that folder.\nTo build the DPF Docker container, run the following command:\nTo run the DPF Docker container, license it. For more information, see DPF Preview License Agreement.\nRun DPF Server in a Docker container\nansys_dpf_server_lin_v2025.1.pre0.zip\nDockerfile\ncomposites\nansys_dpf_composites_lin_v2025.1.pre0.zip\nDockerfile"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_XY",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_XY.html#elastic_strain_xy",
        "title": "elastic_strain_XY",
        "section": "elastic_strain_XY",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_XY"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.geo.to_polar_coordinates",
        "href": "api/ansys.dpf.core.operators.geo.to_polar_coordinates.html#to_polar_coordinates",
        "title": "to_polar_coordinates",
        "section": "to_polar_coordinates",
        "text": "Autogenerated DPF operator classes.\nto_polar_coordinates"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.component_wise_product_fc",
        "href": "api/ansys.dpf.core.operators.math.component_wise_product_fc.html#component_wise_product_fc",
        "title": "component_wise_product_fc",
        "section": "component_wise_product_fc",
        "text": "Autogenerated DPF operator classes.\ncomponent_wise_product_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.averaging.nodal_difference_fc",
        "href": "api/ansys.dpf.core.operators.averaging.nodal_difference_fc.html#nodal_difference_fc",
        "title": "nodal_difference_fc",
        "section": "nodal_difference_fc",
        "text": "Autogenerated DPF operator classes.\nnodal_difference_fc"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_intensity",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_intensity.html#elastic_strain_intensity",
        "title": "elastic_strain_intensity",
        "section": "elastic_strain_intensity",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_intensity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.serialization.migrate_to_vtu",
        "href": "api/ansys.dpf.core.operators.serialization.migrate_to_vtu.html#migrate_to_vtu",
        "title": "migrate_to_vtu",
        "section": "migrate_to_vtu",
        "text": "Autogenerated DPF operator classes.\nmigrate_to_vtu"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.beam_axial_plastic_strain",
        "href": "api/ansys.dpf.core.operators.result.beam_axial_plastic_strain.html#beam_axial_plastic_strain",
        "title": "beam_axial_plastic_strain",
        "section": "beam_axial_plastic_strain",
        "text": "Autogenerated DPF operator classes.\nbeam_axial_plastic_strain"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.contact_total_stress",
        "href": "api/ansys.dpf.core.operators.result.contact_total_stress.html#contact_total_stress",
        "title": "contact_total_stress",
        "section": "contact_total_stress",
        "text": "Autogenerated DPF operator classes.\ncontact_total_stress"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.merge_fields_by_label",
        "href": "api/ansys.dpf.core.operators.utility.merge_fields_by_label.html#merge_fields_by_label",
        "title": "merge_fields_by_label",
        "section": "merge_fields_by_label",
        "text": "Autogenerated DPF operator classes.\nmerge_fields_by_label"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.fft_multi_harmonic_minmax",
        "href": "api/ansys.dpf.core.operators.math.fft_multi_harmonic_minmax.html#fft_multi_harmonic_minmax",
        "title": "fft_multi_harmonic_minmax",
        "section": "fft_multi_harmonic_minmax",
        "text": "Autogenerated DPF operator classes.\nfft_multi_harmonic_minmax"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_extraction",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_extraction.html#mesh_extraction",
        "title": "mesh_extraction",
        "section": "mesh_extraction",
        "text": "Autogenerated DPF operator classes.\nmesh_extraction"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.delegate_to_operator",
        "href": "api/ansys.dpf.core.operators.utility.delegate_to_operator.html#delegate_to_operator",
        "title": "delegate_to_operator",
        "section": "delegate_to_operator",
        "text": "Autogenerated DPF operator classes.\ndelegate_to_operator"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.dynamic_viscosity",
        "href": "api/ansys.dpf.core.operators.result.dynamic_viscosity.html#dynamic_viscosity",
        "title": "dynamic_viscosity",
        "section": "dynamic_viscosity",
        "text": "Autogenerated DPF operator classes.\ndynamic_viscosity"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.math.cplx_divide",
        "href": "api/ansys.dpf.core.operators.math.cplx_divide.html#cplx_divide",
        "title": "cplx_divide",
        "section": "cplx_divide",
        "text": "Autogenerated DPF operator classes.\ncplx_divide"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.min_max.min_by_component",
        "href": "api/ansys.dpf.core.operators.min_max.min_by_component.html#min_by_component",
        "title": "min_by_component",
        "section": "min_by_component",
        "text": "Autogenerated DPF operator classes.\nmin_by_component"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.interface_contact_mass",
        "href": "api/ansys.dpf.core.operators.result.interface_contact_mass.html#interface_contact_mass",
        "title": "interface_contact_mass",
        "section": "interface_contact_mass",
        "text": "Autogenerated DPF operator classes.\ninterface_contact_mass"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.elastic_strain_Z",
        "href": "api/ansys.dpf.core.operators.result.elastic_strain_Z.html#elastic_strain_z",
        "title": "elastic_strain_Z",
        "section": "elastic_strain_Z",
        "text": "Autogenerated DPF operator classes.\nelastic_strain_Z"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.utility.overlap_fields",
        "href": "api/ansys.dpf.core.operators.utility.overlap_fields.html#overlap_fields",
        "title": "overlap_fields",
        "section": "overlap_fields",
        "text": "Autogenerated DPF operator classes.\noverlap_fields"
    },
    {
        "objectID": "api/ansys.dpf.core.property_field",
        "href": "api/ansys.dpf.core.property_field.html#propertyfield",
        "title": "PropertyField",
        "section": "PropertyField",
        "text": "PropertyField"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.mach_number",
        "href": "api/ansys.dpf.core.operators.result.mach_number.html#mach_number",
        "title": "mach_number",
        "section": "mach_number",
        "text": "Autogenerated DPF operator classes.\nmach_number"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.mesh.mesh_to_pyvista",
        "href": "api/ansys.dpf.core.operators.mesh.mesh_to_pyvista.html#mesh_to_pyvista",
        "title": "mesh_to_pyvista",
        "section": "mesh_to_pyvista",
        "text": "Autogenerated DPF operator classes.\nmesh_to_pyvista"
    },
    {
        "objectID": "api/ansys.dpf.core.operators.result.acceleration_Y",
        "href": "api/ansys.dpf.core.operators.result.acceleration_Y.html#acceleration_y",
        "title": "acceleration_Y",
        "section": "acceleration_Y",
        "text": "Autogenerated DPF operator classes.\nacceleration_Y"
    },
    {
        "objectID": "api/ansys.dpf",
        "href": "api/ansys.dpf.html#ansysdpf-namespace",
        "title": "ansys.dpf namespace",
        "section": "ansys.dpf namespace",
        "text": "ansys.dpf namespace"
    },
    {
        "objectID": "api/ansys.dpf",
        "href": "api/ansys.dpf.html#subpackages",
        "title": "ansys.dpf namespace > Subpackages",
        "section": "Subpackages",
        "text": "Subpackages"
    },
    {
        "objectID": "api/ansys.dpf.core.generic_support",
        "href": "api/ansys.dpf.core.generic_support.html#genericsupport",
        "title": "GenericSupport",
        "section": "GenericSupport",
        "text": "GenericSupport"
    },
    {
        "objectID": "examples/00-basic/index",
        "href": "examples/00-basic/index.html#basic-dpf-examples",
        "title": "Basic DPF examples",
        "section": "Basic DPF examples",
        "text": "These examples explain the basic concepts of DPF.\nsphx_glr_examples_00-basic_00-basic_example.py\nsphx_glr_examples_00-basic_01-basic_operators.py\nsphx_glr_examples_00-basic_02-basic_field_containers.py\nsphx_glr_examples_00-basic_03-create_entities.py\nsphx_glr_examples_00-basic_05-use_local_data.py\nsphx_glr_examples_00-basic_07-use_result_helpers.py\nsphx_glr_examples_00-basic_08-results_over_time_subset.py\nsphx_glr_examples_00-basic_09-results_over_space_subset.py\nsphx_glr_examples_00-basic_10-math_operations.py\nsphx_glr_examples_00-basic_12-get_material_properties.py\nBasic DPF examples"
    }
]