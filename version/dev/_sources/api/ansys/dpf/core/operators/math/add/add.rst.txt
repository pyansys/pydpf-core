





:class:`add`
============

.. py:class:: ansys.dpf.core.operators.math.add.add(fieldA=None, fieldB=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the sum of two fields. If one field's scoping has 'overall'
   location, then these field's values are applied on the entire
   other field. If one of the input field is empty, the remaining is
   forwarded to the output. When using a constant or 'work_by_index',
   it's possible to use 'inplace' to reuse one of the fields.

   :param fieldA: Field or fields container with only one field
                  is expected
   :type fieldA: Field or FieldsContainer or float
   :param fieldB: Field or fields container with only one field
                  is expected
   :type fieldB: Field or FieldsContainer or float

   :returns: **field**
   :rtype: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.math.add()

   >>> # Make input connections
   >>> my_fieldA = dpf.Field()
   >>> op.inputs.fieldA.connect(my_fieldA)
   >>> my_fieldB = dpf.Field()
   >>> op.inputs.fieldB.connect(my_fieldB)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.math.add(
   ...     fieldA=my_fieldA,
   ...     fieldB=my_fieldB,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: add

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.add import add

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsAdd

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsAdd




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





