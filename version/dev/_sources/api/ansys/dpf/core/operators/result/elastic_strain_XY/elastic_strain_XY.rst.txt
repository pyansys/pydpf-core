





:class:`elastic_strain_XY`
==========================

.. py:class:: ansys.dpf.core.operators.result.elastic_strain_XY.elastic_strain_XY(time_scoping=None, mesh_scoping=None, fields_container=None, streams_container=None, data_sources=None, bool_rotate_to_global=None, mesh=None, requested_location=None, read_cyclic=None, read_beams=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Read/compute element nodal component elastic strains XY shear
   component (01 component) by calling the readers defined by the
   datasources. Regarding the requested location and the input mesh
   scoping, the result location can be
   Nodal/ElementalNodal/Elemental.

   :param time_scoping: Time/freq values (use doubles or field),
                        time/freq set ids (use ints or
                        scoping) or time/freq step ids (use
                        scoping with timefreq_steps location)
                        required in output. to specify
                        time/freq values at specific load
                        steps, put a field (and not a list)
                        in input with a scoping located on
                        "timefreq_steps". linear time freq
                        intrapolation is performed if the
                        values are not in the result files
                        and the data at the max time or freq
                        is taken when time/freqs are higher
                        than available time/freqs in result
                        files.
   :type time_scoping: Scoping or int or float or Field, optional
   :param mesh_scoping: Nodes or elements scoping required in output.
                        the output fields will be scoped on
                        these node or element ids. to figure
                        out the ordering of the fields data,
                        look at their scoping ids as they
                        might not be ordered as the input
                        scoping was. the scoping's location
                        indicates whether nodes or elements
                        are asked for. using scopings
                        container allows you to split the
                        result fields container into domains
   :type mesh_scoping: ScopingsContainer or Scoping, optional
   :param fields_container: Fieldscontainer already allocated modified
                            inplace
   :type fields_container: FieldsContainer, optional
   :param streams_container: Result file container allowed to be kept open
                             to cache data
   :type streams_container: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set
   :type data_sources: DataSources
   :param bool_rotate_to_global: If true the field is rotated to global
                                 coordinate system (default true)
   :type bool_rotate_to_global: bool, optional
   :param mesh: Prevents from reading the mesh in the result
                files
   :type mesh: MeshedRegion or MeshesContainer, optional
   :param requested_location: Requested location, default is nodal
   :type requested_location: str, optional
   :param read_cyclic: If 0 cyclic symmetry is ignored, if 1 cyclic
                       sector is read, if 2 cyclic expansion
                       is done, if 3 cyclic expansion is
                       done and stages are merged (default
                       is 1)
   :type read_cyclic: int, optional
   :param read_beams: Elemental nodal beam results are read if this
                      pin is set to true (default is false)
   :type read_beams: bool, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.elastic_strain_XY()

   >>> # Make input connections
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.ScopingsContainer()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_bool_rotate_to_global = bool()
   >>> op.inputs.bool_rotate_to_global.connect(my_bool_rotate_to_global)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_read_cyclic = int()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> my_read_beams = bool()
   >>> op.inputs.read_beams.connect(my_read_beams)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.elastic_strain_XY(
   ...     time_scoping=my_time_scoping,
   ...     mesh_scoping=my_mesh_scoping,
   ...     fields_container=my_fields_container,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ...     bool_rotate_to_global=my_bool_rotate_to_global,
   ...     mesh=my_mesh,
   ...     requested_location=my_requested_location,
   ...     read_cyclic=my_read_cyclic,
   ...     read_beams=my_read_beams,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: elastic_strain_XY

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.elastic_strain_XY import elastic_strain_XY

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsElasticStrainXy

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsElasticStrainXy




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





