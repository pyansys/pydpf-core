





:class:`merge_property_fields`
==============================

.. py:class:: ansys.dpf.core.operators.utility.merge_property_fields.merge_property_fields(naive_merge=None, property_fields1=None, property_fields2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Assembles a set of property fields into a unique one.

   :param naive_merge: If true, merge the input property fields
                       assuming that there is no repetition
                       in their scoping ids. default is
                       false.
   :type naive_merge: bool
   :param property_fields1: Either a property fields container, a vector
                            of property fields to merge or
                            property fields from pin 0 to ...
   :type property_fields1: PropertyField or PropertyFieldsContainer
   :param property_fields2: Either a property fields container, a vector
                            of property fields to merge or
                            property fields from pin 0 to ...
   :type property_fields2: PropertyField or PropertyFieldsContainer

   :returns: **property_field**
   :rtype: PropertyField

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.merge_property_fields()

   >>> # Make input connections
   >>> my_naive_merge = bool()
   >>> op.inputs.naive_merge.connect(my_naive_merge)
   >>> my_property_fields1 = dpf.PropertyField()
   >>> op.inputs.property_fields1.connect(my_property_fields1)
   >>> my_property_fields2 = dpf.PropertyField()
   >>> op.inputs.property_fields2.connect(my_property_fields2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.merge_property_fields(
   ...     naive_merge=my_naive_merge,
   ...     property_fields1=my_property_fields1,
   ...     property_fields2=my_property_fields2,
   ... )

   >>> # Get output data
   >>> result_property_field = op.outputs.property_field()




.. py:currentmodule:: merge_property_fields

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_property_fields import merge_property_fields

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMergePropertyFields

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMergePropertyFields




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





