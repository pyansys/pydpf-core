





:class:`elemental_nodal_to_nodal_fc`
====================================

.. py:class:: ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_fc.elemental_nodal_to_nodal_fc(fields_container=None, mesh=None, should_average=None, scoping=None, extend_to_mid_nodes=None, extend_weights_to_mid_nodes=None, merge_solid_shell=None, shell_layer=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Transforms Elemental Nodal fields into Nodal fields using an averaging
   process. The result is computed on a given node's scoping. If the
   input fields are mixed shell/solid, then the fields are split by
   element shape and the output fields container has an elshape
   label.

   :param fields_container:
   :type fields_container: FieldsContainer
   :param mesh: The mesh region in this pin is used to
                perform the averaging. it is used if
                there is no fields support.
   :type mesh: MeshedRegion or MeshesContainer, optional
   :param should_average: Each nodal value is divided by the number of
                          elements linked to this node (default
                          is true for discrete quantities).
   :type should_average: bool, optional
   :param scoping: Average only on these nodes. if it is a
                   scoping container, the label must
                   correspond to the one of the fields
                   containers.
   :type scoping: Scoping or ScopingsContainer, optional
   :param extend_to_mid_nodes: Compute mid nodes (when available) by
                               averaging the neighbour primary
                               nodes.
   :type extend_to_mid_nodes: bool, optional
   :param extend_weights_to_mid_nodes: Extends weights to mid nodes (when
                                       available). default is false.
   :type extend_weights_to_mid_nodes: bool, optional
   :param merge_solid_shell: For shell/solid mixed field, gather in one
                             field all solids and shells (only on
                             one layer, false by default).
   :type merge_solid_shell: bool, optional
   :param shell_layer: If merge_solid_shell pin set to true, user
                       have to choose a shell layer. for
                       shell/solid mixed field, gather in
                       one field all solids and shells (only
                       on one layer).
   :type shell_layer: int, optional

   :returns: * **fields_container** (*FieldsContainer*)
             * **weights** (*Class Dataprocessing::Dpftypecollection&lt;Class*) -- Dataprocessing::Cpropertyfield&gt;
               Gives for each node, the number of times it
               was found in the elemental nodal
               field. can be used to average later.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_should_average = bool()
   >>> op.inputs.should_average.connect(my_should_average)
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> my_extend_to_mid_nodes = bool()
   >>> op.inputs.extend_to_mid_nodes.connect(my_extend_to_mid_nodes)
   >>> my_extend_weights_to_mid_nodes = bool()
   >>> op.inputs.extend_weights_to_mid_nodes.connect(my_extend_weights_to_mid_nodes)
   >>> my_merge_solid_shell = bool()
   >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
   >>> my_shell_layer = int()
   >>> op.inputs.shell_layer.connect(my_shell_layer)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal_fc(
   ...     fields_container=my_fields_container,
   ...     mesh=my_mesh,
   ...     should_average=my_should_average,
   ...     scoping=my_scoping,
   ...     extend_to_mid_nodes=my_extend_to_mid_nodes,
   ...     extend_weights_to_mid_nodes=my_extend_weights_to_mid_nodes,
   ...     merge_solid_shell=my_merge_solid_shell,
   ...     shell_layer=my_shell_layer,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()
   >>> result_weights = op.outputs.weights()




.. py:currentmodule:: elemental_nodal_to_nodal_fc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal_fc import elemental_nodal_to_nodal_fc

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsElementalNodalToNodalFc

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsElementalNodalToNodalFc




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





