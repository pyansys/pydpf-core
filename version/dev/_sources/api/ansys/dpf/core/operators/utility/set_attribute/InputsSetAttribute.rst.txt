





:class:`InputsSetAttribute`
===========================

.. py:class:: ansys.dpf.core.operators.utility.set_attribute.InputsSetAttribute(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   set_attribute operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.set_attribute()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_identifier = dict()
   >>> op.inputs.property_identifier.connect(my_property_identifier)



.. py:currentmodule:: InputsSetAttribute

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~property_name`
            - Allows to connect property_name input to the operator.
          * - :py:attr:`~property_identifier`
            - Allows to connect property_identifier input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.set_attribute import InputsSetAttribute

Property detail
---------------

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.set_attribute()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: property_name

   Allows to connect property_name input to the operator.

   Supported property names are: "labels".

   :param my_property_name:
   :type my_property_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.set_attribute()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> # or
   >>> op.inputs.property_name(my_property_name)

.. py:property:: property_identifier

   Allows to connect property_identifier input to the operator.

   Value of the property to be set : vector of
   string or labelspace for "labels".

   :param my_property_identifier:
   :type my_property_identifier: dict

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.set_attribute()
   >>> op.inputs.property_identifier.connect(my_property_identifier)
   >>> # or
   >>> op.inputs.property_identifier(my_property_identifier)






