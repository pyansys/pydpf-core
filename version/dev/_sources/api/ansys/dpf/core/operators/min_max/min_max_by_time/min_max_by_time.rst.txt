





:class:`min_max_by_time`
========================

.. py:class:: ansys.dpf.core.operators.min_max.min_max_by_time.min_max_by_time(fields_container=None, compute_absolute_value=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Evaluates minimum, maximum by time or frequency over all the entities
   of each field

   :param fields_container:
   :type fields_container: FieldsContainer
   :param compute_absolute_value: Calculate the absolute value of field
                                  entities before computing the
                                  min/max.
   :type compute_absolute_value: bool, optional

   :returns: * **min** (*FieldsContainer*)
             * **max** (*FieldsContainer*)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.min_max.min_max_by_time()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_compute_absolute_value = bool()
   >>> op.inputs.compute_absolute_value.connect(my_compute_absolute_value)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.min_max.min_max_by_time(
   ...     fields_container=my_fields_container,
   ...     compute_absolute_value=my_compute_absolute_value,
   ... )

   >>> # Get output data
   >>> result_min = op.outputs.min()
   >>> result_max = op.outputs.max()




.. py:currentmodule:: min_max_by_time

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.min_max.min_max_by_time import min_max_by_time

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMinMaxByTime

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMinMaxByTime




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





