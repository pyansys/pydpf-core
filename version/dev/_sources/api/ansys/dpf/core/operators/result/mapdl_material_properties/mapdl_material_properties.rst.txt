





:class:`mapdl_material_properties`
==================================

.. py:class:: ansys.dpf.core.operators.result.mapdl_material_properties.mapdl_material_properties(properties_name=None, materials=None, streams_container=None, data_sources=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Read the values of the properties of a material for a given materials
   property field (property field that contains materials information
   for each element of a mesh).It returns a fields container
   containing a field for each material property, with only one value
   per material. The following keys can be used: Young's modulus
   (keys: EX, EY, EZ), Poisson's ratio (keys: NUXY, NUYZ, NUXZ),
   Shear Modulus (keys: GXY, GYZ, GXZ), Coefficient of Thermal
   Expansion (keys: ALPX, ALPY, ALPZ), Volumic Mass (key: DENS),
   second Lame's coefficient (key: MU), Damping coefficient (key:
   DAMP), thermal Conductivity (keys: KXX, KYY, KZZ), Resistivity
   (keys: RSVX, RSVY, RSVZ), Specific heat in constant volume (key:
   C), Film coefficient (key: HF), Viscosity (key: VISC), Emissivity
   (key: EMIS).

   :param properties_name:
   :type properties_name: str
   :param materials: Property field that contains a material id
                     per element.
   :type materials: PropertyField
   :param streams_container:
   :type streams_container: StreamsContainer
   :param data_sources:
   :type data_sources: DataSources

   :returns: **properties_value**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.mapdl_material_properties()

   >>> # Make input connections
   >>> my_properties_name = str()
   >>> op.inputs.properties_name.connect(my_properties_name)
   >>> my_materials = dpf.PropertyField()
   >>> op.inputs.materials.connect(my_materials)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.mapdl_material_properties(
   ...     properties_name=my_properties_name,
   ...     materials=my_materials,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ... )

   >>> # Get output data
   >>> result_properties_value = op.outputs.properties_value()




.. py:currentmodule:: mapdl_material_properties

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.mapdl_material_properties import mapdl_material_properties

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMapdlMaterialProperties

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMapdlMaterialProperties




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





