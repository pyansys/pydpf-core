





:class:`InputsFilteringMaxOverTime`
===================================

.. py:class:: ansys.dpf.core.operators.filter.filtering_max_over_time.InputsFilteringMaxOverTime(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   filtering_max_over_time operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.filtering_max_over_time()
   >>> my_invariant_fc_operator = str()
   >>> op.inputs.invariant_fc_operator.connect(my_invariant_fc_operator)
   >>> my_output_pin = int()
   >>> op.inputs.output_pin.connect(my_output_pin)
   >>> my_list_of_results = str()
   >>> op.inputs.list_of_results.connect(my_list_of_results)
   >>> my_threshold = float()
   >>> op.inputs.threshold.connect(my_threshold)



.. py:currentmodule:: InputsFilteringMaxOverTime

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~invariant_fc_operator`
            - Allows to connect invariant_fc_operator input to the operator.
          * - :py:attr:`~output_pin`
            - Allows to connect output_pin input to the operator.
          * - :py:attr:`~list_of_results`
            - Allows to connect list_of_results input to the operator.
          * - :py:attr:`~threshold`
            - Allows to connect threshold input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.filter.filtering_max_over_time import InputsFilteringMaxOverTime

Property detail
---------------

.. py:property:: invariant_fc_operator

   Allows to connect invariant_fc_operator input to the operator.

   Name of the invariant operator to be used to
   calculate filter (available: eqv_fc,
   invariants_deriv_fc, invariants_fc).

   :param my_invariant_fc_operator:
   :type my_invariant_fc_operator: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.filtering_max_over_time()
   >>> op.inputs.invariant_fc_operator.connect(my_invariant_fc_operator)
   >>> # or
   >>> op.inputs.invariant_fc_operator(my_invariant_fc_operator)

.. py:property:: output_pin

   Allows to connect output_pin input to the operator.

   Output pin of the invariant operator. default
   = 0.

   :param my_output_pin:
   :type my_output_pin: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.filtering_max_over_time()
   >>> op.inputs.output_pin.connect(my_output_pin)
   >>> # or
   >>> op.inputs.output_pin(my_output_pin)

.. py:property:: list_of_results

   Allows to connect list_of_results input to the operator.

   If no result is given, filter will be applied
   on stresses and strains

   :param my_list_of_results:
   :type my_list_of_results: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.filtering_max_over_time()
   >>> op.inputs.list_of_results.connect(my_list_of_results)
   >>> # or
   >>> op.inputs.list_of_results(my_list_of_results)

.. py:property:: threshold

   Allows to connect threshold input to the operator.

   Threshold from which the operator will
   filter.

   :param my_threshold:
   :type my_threshold: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.filtering_max_over_time()
   >>> op.inputs.threshold.connect(my_threshold)
   >>> # or
   >>> op.inputs.threshold(my_threshold)






