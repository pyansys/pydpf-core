





:class:`change_cs`
==================

.. py:class:: ansys.dpf.core.operators.mesh.change_cs.change_cs(meshes=None, coordinate_system=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Applies a transformation (rotation and displacement) matrix on a mesh
   or meshes container.

   :param meshes:
   :type meshes: MeshedRegion or MeshesContainer
   :param coordinate_system: 3-3 rotation matrix + 3 translations (x, y,
                             z)
   :type coordinate_system: Field

   :returns: **meshed_region**
   :rtype: MeshedRegion or MeshesContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.change_cs()

   >>> # Make input connections
   >>> my_meshes = dpf.MeshedRegion()
   >>> op.inputs.meshes.connect(my_meshes)
   >>> my_coordinate_system = dpf.Field()
   >>> op.inputs.coordinate_system.connect(my_coordinate_system)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.change_cs(
   ...     meshes=my_meshes,
   ...     coordinate_system=my_coordinate_system,
   ... )

   >>> # Get output data
   >>> result_meshed_region = op.outputs.meshed_region()




.. py:currentmodule:: change_cs

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.change_cs import change_cs

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsChangeCs

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsChangeCs




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





