





:class:`gauss_to_node_fc`
=========================

.. py:class:: ansys.dpf.core.operators.averaging.gauss_to_node_fc.gauss_to_node_fc(fields_container=None, mesh=None, scoping=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Extrapolates results available at Gauss or quadrature points to nodal
   points for a field container. The available elements are: Linear
   quadrangle, parabolic quadrangle, linear hexagonal, quadratic
   hexagonal, linear tetrahedral, and quadratic tetrahedral.

   :param fields_container:
   :type fields_container: FieldsContainer
   :param mesh: The mesh region in this pin is used for
                extrapolating results available at
                gauss or quadrature points to nodal
                points.
   :type mesh: MeshedRegion or MeshesContainer, optional
   :param scoping: Extrapolating results on the selected
                   scoping. if it is a scoping
                   container, the label must correspond
                   to the one of the fields containers.
   :type scoping: Scoping, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.averaging.gauss_to_node_fc()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.averaging.gauss_to_node_fc(
   ...     fields_container=my_fields_container,
   ...     mesh=my_mesh,
   ...     scoping=my_scoping,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: gauss_to_node_fc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.gauss_to_node_fc import gauss_to_node_fc

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsGaussToNodeFc

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsGaussToNodeFc




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





