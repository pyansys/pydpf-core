





:class:`InputsTotalMass`
========================

.. py:class:: ansys.dpf.core.operators.result.total_mass.InputsTotalMass(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   total_mass operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.total_mass()
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)



.. py:currentmodule:: InputsTotalMass

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.total_mass import InputsTotalMass

Property detail
---------------

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Data sources (must contain at least one mode
   file).

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.total_mass()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)






