





:class:`InputsConvertnumOp`
===========================

.. py:class:: ansys.dpf.core.operators.invariant.convertnum_op.InputsConvertnumOp(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   convertnum_op operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> my_input_ordering = int()
   >>> op.inputs.input_ordering.connect(my_input_ordering)
   >>> my_output_ordering = int()
   >>> op.inputs.output_ordering.connect(my_output_ordering)
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)



.. py:currentmodule:: InputsConvertnumOp

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~input_ordering`
            - Allows to connect input_ordering input to the operator.
          * - :py:attr:`~output_ordering`
            - Allows to connect output_ordering input to the operator.
          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.invariant.convertnum_op import InputsConvertnumOp

Property detail
---------------

.. py:property:: input_ordering

   Allows to connect input_ordering input to the operator.

   Input ordering number

   :param my_input_ordering:
   :type my_input_ordering: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.input_ordering.connect(my_input_ordering)
   >>> # or
   >>> op.inputs.input_ordering(my_input_ordering)

.. py:property:: output_ordering

   Allows to connect output_ordering input to the operator.

   Output ordering number

   :param my_output_ordering:
   :type my_output_ordering: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.output_ordering.connect(my_output_ordering)
   >>> # or
   >>> op.inputs.output_ordering(my_output_ordering)

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   Expect fields container

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Data_sources (must contain the full file).

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.invariant.convertnum_op()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)






