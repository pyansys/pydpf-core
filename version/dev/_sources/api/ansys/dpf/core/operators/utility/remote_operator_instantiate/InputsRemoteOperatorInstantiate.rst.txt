





:class:`InputsRemoteOperatorInstantiate`
========================================

.. py:class:: ansys.dpf.core.operators.utility.remote_operator_instantiate.InputsRemoteOperatorInstantiate(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   remote_operator_instantiate operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.remote_operator_instantiate()
   >>> my_operator_to_send = int()
   >>> op.inputs.operator_to_send.connect(my_operator_to_send)
   >>> my_output_pin = int()
   >>> op.inputs.output_pin.connect(my_output_pin)
   >>> my_streams_to_remote = dpf.StreamsContainer()
   >>> op.inputs.streams_to_remote.connect(my_streams_to_remote)
   >>> my_data_sources_to_remote = dpf.DataSources()
   >>> op.inputs.data_sources_to_remote.connect(my_data_sources_to_remote)
   >>> my_output_name = str()
   >>> op.inputs.output_name.connect(my_output_name)



.. py:currentmodule:: InputsRemoteOperatorInstantiate

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~operator_to_send`
            - Allows to connect operator_to_send input to the operator.
          * - :py:attr:`~output_pin`
            - Allows to connect output_pin input to the operator.
          * - :py:attr:`~streams_to_remote`
            - Allows to connect streams_to_remote input to the operator.
          * - :py:attr:`~data_sources_to_remote`
            - Allows to connect data_sources_to_remote input to the operator.
          * - :py:attr:`~output_name`
            - Allows to connect output_name input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.remote_operator_instantiate import InputsRemoteOperatorInstantiate

Property detail
---------------

.. py:property:: operator_to_send

   Allows to connect operator_to_send input to the operator.

   Local workflow to push to a remote or id of a
   remote workflow

   :param my_operator_to_send:
   :type my_operator_to_send: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.remote_operator_instantiate()
   >>> op.inputs.operator_to_send.connect(my_operator_to_send)
   >>> # or
   >>> op.inputs.operator_to_send(my_operator_to_send)

.. py:property:: output_pin

   Allows to connect output_pin input to the operator.

   Pin number of the output to name

   :param my_output_pin:
   :type my_output_pin: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.remote_operator_instantiate()
   >>> op.inputs.output_pin.connect(my_output_pin)
   >>> # or
   >>> op.inputs.output_pin(my_output_pin)

.. py:property:: streams_to_remote

   Allows to connect streams_to_remote input to the operator.

   :param my_streams_to_remote:
   :type my_streams_to_remote: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.remote_operator_instantiate()
   >>> op.inputs.streams_to_remote.connect(my_streams_to_remote)
   >>> # or
   >>> op.inputs.streams_to_remote(my_streams_to_remote)

.. py:property:: data_sources_to_remote

   Allows to connect data_sources_to_remote input to the operator.

   :param my_data_sources_to_remote:
   :type my_data_sources_to_remote: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.remote_operator_instantiate()
   >>> op.inputs.data_sources_to_remote.connect(my_data_sources_to_remote)
   >>> # or
   >>> op.inputs.data_sources_to_remote(my_data_sources_to_remote)

.. py:property:: output_name

   Allows to connect output_name input to the operator.

   Output's name of the workflow to return

   :param my_output_name:
   :type my_output_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.remote_operator_instantiate()
   >>> op.inputs.output_name.connect(my_output_name)
   >>> # or
   >>> op.inputs.output_name(my_output_name)






