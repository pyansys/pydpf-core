





:class:`export_symbolic_workflow`
=================================

.. py:class:: ansys.dpf.core.operators.serialization.export_symbolic_workflow.export_symbolic_workflow(workflow=None, path=None, format=None, options=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Transforms a Workflow into a symbolic Workflow and writes it to a file
   (if a path is set in input) or string

   :param workflow:
   :type workflow: Workflow
   :param path:
   :type path: str, optional
   :param format: 0 is ascii format and 1 is binary, default is
                  0.
   :type format: int, optional
   :param options: 1 copies connections with its data, 2
                   forwards named inputs and outputs
                   names, 7 copies connections of named
                   inputs and ouputs with their data.
                   default is 7.
   :type options: int, optional

   :returns: **data_sources**
   :rtype: DataSources or str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.serialization.export_symbolic_workflow()

   >>> # Make input connections
   >>> my_workflow = dpf.Workflow()
   >>> op.inputs.workflow.connect(my_workflow)
   >>> my_path = str()
   >>> op.inputs.path.connect(my_path)
   >>> my_format = int()
   >>> op.inputs.format.connect(my_format)
   >>> my_options = int()
   >>> op.inputs.options.connect(my_options)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.serialization.export_symbolic_workflow(
   ...     workflow=my_workflow,
   ...     path=my_path,
   ...     format=my_format,
   ...     options=my_options,
   ... )

   >>> # Get output data
   >>> result_data_sources = op.outputs.data_sources()




.. py:currentmodule:: export_symbolic_workflow

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.export_symbolic_workflow import export_symbolic_workflow

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsExportSymbolicWorkflow

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsExportSymbolicWorkflow




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





