





:class:`mesh_to_tetra`
======================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_to_tetra.mesh_to_tetra(mesh=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Converts 3D meshes of arbitrary 3D element types into a tetrahedral
   mesh, output at pin (0). Non 3D elements are ignored. Scopings
   providing the mapping from resulting nodes & elements to their
   original ID in the input mesh are provided, output pins (1) & (2)
   respectively.

   :param mesh: Mesh with arbitrary element types.
   :type mesh: MeshedRegion

   :returns: * **mesh** (*MeshedRegion*) -- Tetrahedralized mesh.
             * **node_mapping** (*Scoping*) -- Node mapping.
             * **element_mapping** (*Scoping*) -- Element mapping.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.mesh_to_tetra()

   >>> # Make input connections
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.mesh_to_tetra(
   ...     mesh=my_mesh,
   ... )

   >>> # Get output data
   >>> result_mesh = op.outputs.mesh()
   >>> result_node_mapping = op.outputs.node_mapping()
   >>> result_element_mapping = op.outputs.element_mapping()




.. py:currentmodule:: mesh_to_tetra

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_to_tetra import mesh_to_tetra

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMeshToTetra

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMeshToTetra




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





