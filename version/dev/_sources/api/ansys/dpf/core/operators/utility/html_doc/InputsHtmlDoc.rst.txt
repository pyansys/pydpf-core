





:class:`InputsHtmlDoc`
======================

.. py:class:: ansys.dpf.core.operators.utility.html_doc.InputsHtmlDoc(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   html_doc operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.html_doc()
   >>> my_output_path = str()
   >>> op.inputs.output_path.connect(my_output_path)
   >>> my_exposure_level = int()
   >>> op.inputs.exposure_level.connect(my_exposure_level)



.. py:currentmodule:: InputsHtmlDoc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~output_path`
            - Allows to connect output_path input to the operator.
          * - :py:attr:`~exposure_level`
            - Allows to connect exposure_level input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.html_doc import InputsHtmlDoc

Property detail
---------------

.. py:property:: output_path

   Allows to connect output_path input to the operator.

   Default is {working
   directory}/dataprocessingdoc.html

   :param my_output_path:
   :type my_output_path: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.html_doc()
   >>> op.inputs.output_path.connect(my_output_path)
   >>> # or
   >>> op.inputs.output_path(my_output_path)

.. py:property:: exposure_level

   Allows to connect exposure_level input to the operator.

   Generate the documentation depending on
   exposure level : 0 (default) for
   public operators, 1 includes hidden
   operator, 2 includes private
   operator, 3 includes operator without
   specifications.

   :param my_exposure_level:
   :type my_exposure_level: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.html_doc()
   >>> op.inputs.exposure_level.connect(my_exposure_level)
   >>> # or
   >>> op.inputs.exposure_level(my_exposure_level)






