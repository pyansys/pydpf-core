





:class:`mapdl_split_to_acmo_facet_indices`
==========================================

.. py:class:: ansys.dpf.core.operators.result.mapdl_split_to_acmo_facet_indices.mapdl_split_to_acmo_facet_indices(fields_container=None, property_fields_container_element_types=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   This will retain the already existing labels from the input FC and
   will change the facet label to now mean ACMO facet indices.Each
   Field in the input will be split/merged into several Fields,
   redistributing the data to the appropriate entity.

   :param fields_container: Fields container to split, with generic
                            number of labels (e.g. time, zone,
                            complex...), 'facet' label is
                            compulsory.the fields of the
                            fieldscontainer will have location
                            elemental and the scoping ids will be
                            the element ids on the skin mesh.
   :type fields_container: FieldsContainer
   :param property_fields_container_element_types: It should only have the 'facet' label. for
                                                   each facet, it stores a propertyfield
                                                   with the element types of the
                                                   corresponding elements.the scoping
                                                   should be the same as the scoping of
                                                   the corresponding field in input 0.
   :type property_fields_container_element_types: PropertyFieldsContainer

   :returns: **fields_container** -- Output splitted fields containter
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_property_fields_container_element_types = dpf.PropertyFieldsContainer()
   >>> op.inputs.property_fields_container_element_types.connect(my_property_fields_container_element_types)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.mapdl_split_to_acmo_facet_indices(
   ...     fields_container=my_fields_container,
   ...     property_fields_container_element_types=my_property_fields_container_element_types,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: mapdl_split_to_acmo_facet_indices

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.mapdl_split_to_acmo_facet_indices import mapdl_split_to_acmo_facet_indices

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMapdlSplitToAcmoFacetIndices

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMapdlSplitToAcmoFacetIndices




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





