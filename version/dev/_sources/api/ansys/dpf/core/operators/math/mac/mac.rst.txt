





:class:`mac`
============

.. py:class:: ansys.dpf.core.operators.math.mac.mac(fields_containerA=None, fields_containerB=None, ponderation=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes MAC Matrix between two fields container, both for real and
   complex cases. For mixed cases (real-complex and complex) only the
   real part is considered. Providing inputs with the same component
   scoping is an user responsability.

   :param fields_containerA: Fields container a.
   :type fields_containerA: FieldsContainer
   :param fields_containerB: Fields container b.
   :type fields_containerB: FieldsContainer
   :param ponderation: Field m, optional weighting for mac matrix
                       computation.
   :type ponderation: Field

   :returns: **field** -- Mac matrix for all the combinations between
             mode fields of field container a and
             field container b. results listed row
             by row.
   :rtype: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.math.mac()

   >>> # Make input connections
   >>> my_fields_containerA = dpf.FieldsContainer()
   >>> op.inputs.fields_containerA.connect(my_fields_containerA)
   >>> my_fields_containerB = dpf.FieldsContainer()
   >>> op.inputs.fields_containerB.connect(my_fields_containerB)
   >>> my_ponderation = dpf.Field()
   >>> op.inputs.ponderation.connect(my_ponderation)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.math.mac(
   ...     fields_containerA=my_fields_containerA,
   ...     fields_containerB=my_fields_containerB,
   ...     ponderation=my_ponderation,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: mac

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.mac import mac

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMac

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMac




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





