





:class:`InputsComputeInvariantTermsMotion`
==========================================

.. py:class:: ansys.dpf.core.operators.result.compute_invariant_terms_motion.InputsComputeInvariantTermsMotion(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   compute_invariant_terms_motion operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_motion()
   >>> my_rom_matrices = dpf.FieldsContainer()
   >>> op.inputs.rom_matrices.connect(my_rom_matrices)
   >>> my_mode_shapes = dpf.FieldsContainer()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> my_lumped_mass = dpf.FieldsContainer()
   >>> op.inputs.lumped_mass.connect(my_lumped_mass)
   >>> my_model_data = dpf.FieldsContainer()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> my_field_coordinates = dpf.Field()
   >>> op.inputs.field_coordinates.connect(my_field_coordinates)
   >>> my_nod = dpf.()
   >>> op.inputs.nod.connect(my_nod)



.. py:currentmodule:: InputsComputeInvariantTermsMotion

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~rom_matrices`
            - Allows to connect rom_matrices input to the operator.
          * - :py:attr:`~mode_shapes`
            - Allows to connect mode_shapes input to the operator.
          * - :py:attr:`~lumped_mass`
            - Allows to connect lumped_mass input to the operator.
          * - :py:attr:`~model_data`
            - Allows to connect model_data input to the operator.
          * - :py:attr:`~field_coordinates`
            - Allows to connect field_coordinates input to the operator.
          * - :py:attr:`~nod`
            - Allows to connect nod input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.compute_invariant_terms_motion import InputsComputeInvariantTermsMotion

Property detail
---------------

.. py:property:: rom_matrices

   Allows to connect rom_matrices input to the operator.

   Fieldscontainers containing the reduced
   matrices

   :param my_rom_matrices:
   :type my_rom_matrices: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_motion()
   >>> op.inputs.rom_matrices.connect(my_rom_matrices)
   >>> # or
   >>> op.inputs.rom_matrices(my_rom_matrices)

.. py:property:: mode_shapes

   Allows to connect mode_shapes input to the operator.

   Fieldscontainers containing the mode shapes,
   which are cst and nor for the cms
   method

   :param my_mode_shapes:
   :type my_mode_shapes: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_motion()
   >>> op.inputs.mode_shapes.connect(my_mode_shapes)
   >>> # or
   >>> op.inputs.mode_shapes(my_mode_shapes)

.. py:property:: lumped_mass

   Allows to connect lumped_mass input to the operator.

   Fieldscontainers containing the lumped mass

   :param my_lumped_mass:
   :type my_lumped_mass: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_motion()
   >>> op.inputs.lumped_mass.connect(my_lumped_mass)
   >>> # or
   >>> op.inputs.lumped_mass(my_lumped_mass)

.. py:property:: model_data

   Allows to connect model_data input to the operator.

   Data describing the finite element model

   :param my_model_data:
   :type my_model_data: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_motion()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> # or
   >>> op.inputs.model_data(my_model_data)

.. py:property:: field_coordinates

   Allows to connect field_coordinates input to the operator.

   Coordinates of all nodes

   :param my_field_coordinates:
   :type my_field_coordinates: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_motion()
   >>> op.inputs.field_coordinates.connect(my_field_coordinates)
   >>> # or
   >>> op.inputs.field_coordinates(my_field_coordinates)

.. py:property:: nod

   Allows to connect nod input to the operator.

   :param my_nod:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_invariant_terms_motion()
   >>> op.inputs.nod.connect(my_nod)
   >>> # or
   >>> op.inputs.nod(my_nod)






