





:class:`kmeans_clustering`
==========================

.. py:class:: ansys.dpf.core.operators.compression.kmeans_clustering.kmeans_clustering(clusters_number=None, formula=None, fields_container=None, component_number=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Apply kMeans clustering to group data depending on the data's non-
   linearity.

   :param clusters_number: Number of the clusters (dafault is 3)
   :type clusters_number: int, optional
   :param formula: Formula ('dist'/'dotprod'), default is 'dist'
   :type formula: str, optional
   :param fields_container: An iunput fields container containing the
                            data which will be used for the
                            clustering
   :type fields_container: FieldsContainer
   :param component_number: Component number as an int (default is 0), ex
                            '0' for x-displacement, '1' for
                            y-displacement,...
   :type component_number: int, optional

   :returns: **scoping_clusters** -- Scopings container with the space scoping
             (entities' ids) corresponding to each
             of k-clusters
   :rtype: ScopingsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.compression.kmeans_clustering()

   >>> # Make input connections
   >>> my_clusters_number = int()
   >>> op.inputs.clusters_number.connect(my_clusters_number)
   >>> my_formula = str()
   >>> op.inputs.formula.connect(my_formula)
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_component_number = int()
   >>> op.inputs.component_number.connect(my_component_number)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.compression.kmeans_clustering(
   ...     clusters_number=my_clusters_number,
   ...     formula=my_formula,
   ...     fields_container=my_fields_container,
   ...     component_number=my_component_number,
   ... )

   >>> # Get output data
   >>> result_scoping_clusters = op.outputs.scoping_clusters()




.. py:currentmodule:: kmeans_clustering

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.compression.kmeans_clustering import kmeans_clustering

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsKmeansClustering

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsKmeansClustering




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





