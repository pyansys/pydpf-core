





:class:`InputsMergeResultInfos`
===============================

.. py:class:: ansys.dpf.core.operators.utility.merge_result_infos.InputsMergeResultInfos(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   merge_result_infos operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_result_infos()
   >>> my_result_infos1 = dpf.ResultInfo()
   >>> op.inputs.result_infos1.connect(my_result_infos1)
   >>> my_result_infos2 = dpf.ResultInfo()
   >>> op.inputs.result_infos2.connect(my_result_infos2)



.. py:currentmodule:: InputsMergeResultInfos

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~result_infos1`
            - Allows to connect result_infos1 input to the operator.
          * - :py:attr:`~result_infos2`
            - Allows to connect result_infos2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_result_infos import InputsMergeResultInfos

Property detail
---------------

.. py:property:: result_infos1

   Allows to connect result_infos1 input to the operator.

   A vector of result info containers to merge
   or result infos from pin 0 to ...

   :param my_result_infos1:
   :type my_result_infos1: ResultInfo

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_result_infos()
   >>> op.inputs.result_infos1.connect(my_result_infos1)
   >>> # or
   >>> op.inputs.result_infos1(my_result_infos1)

.. py:property:: result_infos2

   Allows to connect result_infos2 input to the operator.

   A vector of result info containers to merge
   or result infos from pin 0 to ...

   :param my_result_infos2:
   :type my_result_infos2: ResultInfo

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_result_infos()
   >>> op.inputs.result_infos2.connect(my_result_infos2)
   >>> # or
   >>> op.inputs.result_infos2(my_result_infos2)






