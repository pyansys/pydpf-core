





:class:`on_named_selection`
===========================

.. py:class:: ansys.dpf.core.operators.scoping.on_named_selection.on_named_selection(requested_location=None, named_selection_name=None, int_inclusive=None, streams_container=None, data_sources=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   provides a scoping at a given location based on a given named
   selection

   :param requested_location:
   :type requested_location: str
   :param named_selection_name: The string is expected to be in upper case
   :type named_selection_name: str
   :param int_inclusive: If element scoping is requested on a nodal
                         named selection, if inclusive == 1
                         then add all the elements adjacent to
                         the nodes.if inclusive == 0, only the
                         elements which have all their nodes
                         in the named selection are included
   :type int_inclusive: int, optional
   :param streams_container:
   :type streams_container: StreamsContainer, optional
   :param data_sources:
   :type data_sources: DataSources

   :returns: **mesh_scoping**
   :rtype: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.scoping.on_named_selection()

   >>> # Make input connections
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_named_selection_name = str()
   >>> op.inputs.named_selection_name.connect(my_named_selection_name)
   >>> my_int_inclusive = int()
   >>> op.inputs.int_inclusive.connect(my_int_inclusive)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.scoping.on_named_selection(
   ...     requested_location=my_requested_location,
   ...     named_selection_name=my_named_selection_name,
   ...     int_inclusive=my_int_inclusive,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ... )

   >>> # Get output data
   >>> result_mesh_scoping = op.outputs.mesh_scoping()




.. py:currentmodule:: on_named_selection

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.on_named_selection import on_named_selection

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsOnNamedSelection

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsOnNamedSelection




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





