





:class:`mesh_cut`
=================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_cut.mesh_cut(field=None, iso_value=None, closed_surface=None, mesh=None, slice_surfaces=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Extracts a skin of the mesh in triangles in a new meshed region.

   :param field: Field containing the values for the iso-
                 surface computation. the mesh can be
                 retrieved from this field's support
                 or through pin 2.
   :type field: Field
   :param iso_value: Iso value
   :type iso_value: float
   :param closed_surface: 1: closed surface, 0: iso surface.
   :type closed_surface: int
   :param mesh: Mesh to compute the iso-surface from. used
                when not given through the support of
                the field in pin 0.
   :type mesh: MeshedRegion, optional
   :param slice_surfaces: True: slicing will also take into account
                          shell and skin elements. false:
                          slicing will ignore shell and skin
                          elements. the default is true.
   :type slice_surfaces: bool

   :returns: **mesh**
   :rtype: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.mesh_cut()

   >>> # Make input connections
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_iso_value = float()
   >>> op.inputs.iso_value.connect(my_iso_value)
   >>> my_closed_surface = int()
   >>> op.inputs.closed_surface.connect(my_closed_surface)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_slice_surfaces = bool()
   >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.mesh_cut(
   ...     field=my_field,
   ...     iso_value=my_iso_value,
   ...     closed_surface=my_closed_surface,
   ...     mesh=my_mesh,
   ...     slice_surfaces=my_slice_surfaces,
   ... )

   >>> # Get output data
   >>> result_mesh = op.outputs.mesh()




.. py:currentmodule:: mesh_cut

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_cut import mesh_cut

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMeshCut

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMeshCut




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





