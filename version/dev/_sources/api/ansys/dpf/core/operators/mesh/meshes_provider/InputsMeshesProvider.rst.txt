





:class:`InputsMeshesProvider`
=============================

.. py:class:: ansys.dpf.core.operators.mesh.meshes_provider.InputsMeshesProvider(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   meshes_provider operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.meshes_provider()
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_read_cyclic = int()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> my_region_scoping = dpf.Scoping()
   >>> op.inputs.region_scoping.connect(my_region_scoping)



.. py:currentmodule:: InputsMeshesProvider

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~read_cyclic`
            - Allows to connect read_cyclic input to the operator.
          * - :py:attr:`~region_scoping`
            - Allows to connect region_scoping input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.meshes_provider import InputsMeshesProvider

Property detail
---------------

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   Time/frequency set ids required in output.

   :param my_time_scoping:
   :type my_time_scoping: Scoping or int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.meshes_provider()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   Result file container allowed to be kept open
   to cache data

   :param my_streams_container:
   :type my_streams_container: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.meshes_provider()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Result file path container, used if no
   streams are set

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.meshes_provider()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: read_cyclic

   Allows to connect read_cyclic input to the operator.

   If 1, cyclic symmetry is ignored. if 2,
   cyclic expansion is done (default is
   1).

   :param my_read_cyclic:
   :type my_read_cyclic: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.meshes_provider()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> # or
   >>> op.inputs.read_cyclic(my_read_cyclic)

.. py:property:: region_scoping

   Allows to connect region_scoping input to the operator.

   Region id (integer) or vector of region ids
   (vector) or region scoping (scoping)
   of the model (region corresponds to
   zone for fluid results or part for
   lsdyna results).

   :param my_region_scoping:
   :type my_region_scoping: Scoping or int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.meshes_provider()
   >>> op.inputs.region_scoping.connect(my_region_scoping)
   >>> # or
   >>> op.inputs.region_scoping(my_region_scoping)






