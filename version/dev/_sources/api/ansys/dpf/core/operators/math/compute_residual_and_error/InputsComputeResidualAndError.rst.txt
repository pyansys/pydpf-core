





:class:`InputsComputeResidualAndError`
======================================

.. py:class:: ansys.dpf.core.operators.math.compute_residual_and_error.InputsComputeResidualAndError(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   compute_residual_and_error operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.compute_residual_and_error()
   >>> my_field_or_fields_container1 = dpf.Field()
   >>> op.inputs.field_or_fields_container1.connect(my_field_or_fields_container1)
   >>> my_normalization_type = int()
   >>> op.inputs.normalization_type.connect(my_normalization_type)
   >>> my_norm_calculation_type = int()
   >>> op.inputs.norm_calculation_type.connect(my_norm_calculation_type)
   >>> my_field_reference = int()
   >>> op.inputs.field_reference.connect(my_field_reference)
   >>> my_field_or_fields_container2 = dpf.Field()
   >>> op.inputs.field_or_fields_container2.connect(my_field_or_fields_container2)



.. py:currentmodule:: InputsComputeResidualAndError

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field_or_fields_container1`
            - Allows to connect field_or_fields_container1 input to the operator.
          * - :py:attr:`~normalization_type`
            - Allows to connect normalization_type input to the operator.
          * - :py:attr:`~norm_calculation_type`
            - Allows to connect norm_calculation_type input to the operator.
          * - :py:attr:`~field_reference`
            - Allows to connect field_reference input to the operator.
          * - :py:attr:`~field_or_fields_container2`
            - Allows to connect field_or_fields_container2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.compute_residual_and_error import InputsComputeResidualAndError

Property detail
---------------

.. py:property:: field_or_fields_container1

   Allows to connect field_or_fields_container1 input to the operator.

   Field or fields container - compulsory

   :param my_field_or_fields_container1:
   :type my_field_or_fields_container1: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.compute_residual_and_error()
   >>> op.inputs.field_or_fields_container1.connect(my_field_or_fields_container1)
   >>> # or
   >>> op.inputs.field_or_fields_container1(my_field_or_fields_container1)

.. py:property:: normalization_type

   Allows to connect normalization_type input to the operator.

   Type of normalization applied to the
   residuals and norm  calculation
   (optional, defaut: absolute):
   0 for absolute,
   1 for relative to the first entry at
   a given time step,
   2 for normalized by the max at a
   given time step of the first entry or
   residuals depending on the reference
   field option,
   3 for normalized by the max over all
   time steps of the first entry or
   residuals depending on the reference
   field option

   :param my_normalization_type:
   :type my_normalization_type: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.compute_residual_and_error()
   >>> op.inputs.normalization_type.connect(my_normalization_type)
   >>> # or
   >>> op.inputs.normalization_type(my_normalization_type)

.. py:property:: norm_calculation_type

   Allows to connect norm_calculation_type input to the operator.

   Type for norm calculation (optional, default:
   l2) - it is normalized depending on
   pin2 selection
   1 for l1, ie sum(abs(xi)),
   2 for l2, ie sqrt(sum((xi^2))

   :param my_norm_calculation_type:
   :type my_norm_calculation_type: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.compute_residual_and_error()
   >>> op.inputs.norm_calculation_type.connect(my_norm_calculation_type)
   >>> # or
   >>> op.inputs.norm_calculation_type(my_norm_calculation_type)

.. py:property:: field_reference

   Allows to connect field_reference input to the operator.

   Field reference for the normalization step,
   default: 0 for entry 1, 1 for
   residuals - optional

   :param my_field_reference:
   :type my_field_reference: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.compute_residual_and_error()
   >>> op.inputs.field_reference.connect(my_field_reference)
   >>> # or
   >>> op.inputs.field_reference(my_field_reference)

.. py:property:: field_or_fields_container2

   Allows to connect field_or_fields_container2 input to the operator.

   Field or fields container of same
   dimensionality as entry 1 - optional

   :param my_field_or_fields_container2:
   :type my_field_or_fields_container2: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.compute_residual_and_error()
   >>> op.inputs.field_or_fields_container2.connect(my_field_or_fields_container2)
   >>> # or
   >>> op.inputs.field_or_fields_container2(my_field_or_fields_container2)






