





:class:`InputsFieldToCsv`
=========================

.. py:class:: ansys.dpf.core.operators.serialization.field_to_csv.InputsFieldToCsv(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   field_to_csv operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.field_to_csv()
   >>> my_field_or_fields_container = dpf.FieldsContainer()
   >>> op.inputs.field_or_fields_container.connect(my_field_or_fields_container)
   >>> my_file_path = str()
   >>> op.inputs.file_path.connect(my_file_path)
   >>> my_storage_type = int()
   >>> op.inputs.storage_type.connect(my_storage_type)



.. py:currentmodule:: InputsFieldToCsv

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field_or_fields_container`
            - Allows to connect field_or_fields_container input to the operator.
          * - :py:attr:`~file_path`
            - Allows to connect file_path input to the operator.
          * - :py:attr:`~storage_type`
            - Allows to connect storage_type input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.field_to_csv import InputsFieldToCsv

Property detail
---------------

.. py:property:: field_or_fields_container

   Allows to connect field_or_fields_container input to the operator.

   Field_or_fields_container

   :param my_field_or_fields_container:
   :type my_field_or_fields_container: FieldsContainer or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.field_to_csv()
   >>> op.inputs.field_or_fields_container.connect(my_field_or_fields_container)
   >>> # or
   >>> op.inputs.field_or_fields_container(my_field_or_fields_container)

.. py:property:: file_path

   Allows to connect file_path input to the operator.

   :param my_file_path:
   :type my_file_path: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.field_to_csv()
   >>> op.inputs.file_path.connect(my_file_path)
   >>> # or
   >>> op.inputs.file_path(my_file_path)

.. py:property:: storage_type

   Allows to connect storage_type input to the operator.

   Storage type : if matrices (without any
   particularity) are included in the
   fields container, the storage format
   can be chosen. 0 : flat/line format,
   1 : ranked format. if 1 is chosen,
   the csv can not be read by "csv to
   field" operator anymore. default : 0.

   :param my_storage_type:
   :type my_storage_type: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.field_to_csv()
   >>> op.inputs.storage_type.connect(my_storage_type)
   >>> # or
   >>> op.inputs.storage_type(my_storage_type)






