





:class:`boundary_condition_provider`
====================================

.. py:class:: ansys.dpf.core.operators.metadata.boundary_condition_provider.boundary_condition_provider(streams_container=None, data_sources=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Reads boundary conditions from the results files contained in the
   streams or data sources.

   :param streams_container:
   :type streams_container: StreamsContainer, optional
   :param data_sources:
   :type data_sources: DataSources

   :returns: **results_info** -- Results info
   :rtype: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.metadata.boundary_condition_provider()

   >>> # Make input connections
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.metadata.boundary_condition_provider(
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ... )

   >>> # Get output data
   >>> result_results_info = op.outputs.results_info()




.. py:currentmodule:: boundary_condition_provider

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.metadata.boundary_condition_provider import boundary_condition_provider

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsBoundaryConditionProvider

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsBoundaryConditionProvider




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





