





:class:`InputsSplitInForEachRange`
==================================

.. py:class:: ansys.dpf.core.operators.utility.split_in_for_each_range.InputsSplitInForEachRange(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   split_in_for_each_range operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.split_in_for_each_range()
   >>> my_iterable = dpf.()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> my_operator_to_iterate = dpf.Operator()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> my_pin_index = int()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> my_chunk_size = int()
   >>> op.inputs.chunk_size.connect(my_chunk_size)



.. py:currentmodule:: InputsSplitInForEachRange

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~iterable`
            - Allows to connect iterable input to the operator.
          * - :py:attr:`~operator_to_iterate`
            - Allows to connect operator_to_iterate input to the operator.
          * - :py:attr:`~pin_index`
            - Allows to connect pin_index input to the operator.
          * - :py:attr:`~scoping`
            - Allows to connect scoping input to the operator.
          * - :py:attr:`~chunk_size`
            - Allows to connect chunk_size input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.split_in_for_each_range import InputsSplitInForEachRange

Property detail
---------------

.. py:property:: iterable

   Allows to connect iterable input to the operator.

   Iterable that can be combined with the one
   currently generated.

   :param my_iterable:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.split_in_for_each_range()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> # or
   >>> op.inputs.iterable(my_iterable)

.. py:property:: operator_to_iterate

   Allows to connect operator_to_iterate input to the operator.

   Operator that must be reconnected with the
   range values.

   :param my_operator_to_iterate:
   :type my_operator_to_iterate: Operator

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.split_in_for_each_range()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> # or
   >>> op.inputs.operator_to_iterate(my_operator_to_iterate)

.. py:property:: pin_index

   Allows to connect pin_index input to the operator.

   :param my_pin_index:
   :type my_pin_index: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.split_in_for_each_range()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> # or
   >>> op.inputs.pin_index(my_pin_index)

.. py:property:: scoping

   Allows to connect scoping input to the operator.

   :param my_scoping:
   :type my_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.split_in_for_each_range()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> # or
   >>> op.inputs.scoping(my_scoping)

.. py:property:: chunk_size

   Allows to connect chunk_size input to the operator.

   :param my_chunk_size:
   :type my_chunk_size: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.split_in_for_each_range()
   >>> op.inputs.chunk_size.connect(my_chunk_size)
   >>> # or
   >>> op.inputs.chunk_size(my_chunk_size)






