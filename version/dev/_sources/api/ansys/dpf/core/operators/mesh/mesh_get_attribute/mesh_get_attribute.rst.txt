





:class:`mesh_get_attribute`
===========================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_get_attribute.mesh_get_attribute(abstract_meshed_region=None, property_name=None, property_identifier=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Uses the MeshedRegion APIs to return a given attribute of the mesh in
   input.

   :param abstract_meshed_region:
   :type abstract_meshed_region: MeshedRegion
   :param property_name: Supported property names are: "connectivity",
                         "reverse_connectivity", "mat",
                         "faces_nodes_connectivity",
                         "elements_faces_connectivity" (or any
                         mesh's property field),
                         "coordinates", "named_selection",
                         "num_named_selections",
                         "named_selection_names",
                         "named_selection_locations",
                         "node_scoping", "element_scoping",
                         "face_scoping"...
   :type property_name: str
   :param property_identifier: Can be used to get a property at a given
                               index, example: a named selection's
                               number or by name, example: a named
                               selection's name.
   :type property_identifier: int or str, optional

   :returns: **property** -- Returns a property field for properties:
             "connectivity",
             "reverse_connectivity", "mat",
             "faces_nodes_connectivity",
             "elements_faces_connectivity" (or any
             mesh's property field), a field for
             property: "coordinates", a scoping
             for properties:"named_selection",
             "node_scoping", "element_scoping",
             "face_scoping", a string field for
             properties: "named_selection_names",
             "named_selection_locations" and an
             int for property:
             "num_named_selections".
   :rtype: Scoping or Field or PropertyField or int or StringField

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.mesh_get_attribute()

   >>> # Make input connections
   >>> my_abstract_meshed_region = dpf.MeshedRegion()
   >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_identifier = int()
   >>> op.inputs.property_identifier.connect(my_property_identifier)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.mesh_get_attribute(
   ...     abstract_meshed_region=my_abstract_meshed_region,
   ...     property_name=my_property_name,
   ...     property_identifier=my_property_identifier,
   ... )

   >>> # Get output data
   >>> result_property = op.outputs.property()




.. py:currentmodule:: mesh_get_attribute

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_get_attribute import mesh_get_attribute

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMeshGetAttribute

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMeshGetAttribute




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





