





:class:`cgns_result_provider`
=============================

.. py:class:: ansys.dpf.core.operators.result.cgns_result_provider.cgns_result_provider(time_scoping=None, mesh_scoping=None, streams_container=None, data_sources=None, result_name=None, region_scoping=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Read/compute names result from result streams.

   :param time_scoping: Time/freq (use doubles or field), time/freq
                        set ids (use ints or scoping) or
                        time/freq step ids (use scoping with
                        timefreq_steps location) required in
                        output
   :type time_scoping: Scoping, optional
   :param mesh_scoping: Nodes or elements scoping required in output.
                        the scoping's location indicates
                        whether nodes or elements are asked.
                        using scopings container enables to
                        split the result fields container in
                        domains
   :type mesh_scoping: Scoping or ScopingsContainer, optional
   :param streams_container: Result file container allowed to be kept open
                             to cache data
   :type streams_container: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set
   :type data_sources: DataSources
   :param result_name: Name of the result to read. by default the
                       name of the operator is taken.
   :type result_name: str, optional
   :param region_scoping: Optional zone name/id of the mesh.
   :type region_scoping: Scoping or int, optional

   :returns: **fields** -- Results
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.cgns_result_provider()

   >>> # Make input connections
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_result_name = str()
   >>> op.inputs.result_name.connect(my_result_name)
   >>> my_region_scoping = dpf.Scoping()
   >>> op.inputs.region_scoping.connect(my_region_scoping)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.cgns_result_provider(
   ...     time_scoping=my_time_scoping,
   ...     mesh_scoping=my_mesh_scoping,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ...     result_name=my_result_name,
   ...     region_scoping=my_region_scoping,
   ... )

   >>> # Get output data
   >>> result_fields = op.outputs.fields()




.. py:currentmodule:: cgns_result_provider

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.cgns_result_provider import cgns_result_provider

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsCgnsResultProvider

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsCgnsResultProvider




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





