





:class:`decimate_mesh`
======================

.. py:class:: ansys.dpf.core.operators.mesh.decimate_mesh.decimate_mesh(mesh=None, preservation_ratio=None, aggressiveness=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Decimate a meshed region

   :param mesh: Mesh to decimate
   :type mesh: MeshedRegion
   :param preservation_ratio: Target ratio of elements to preserve, the
                              actual number of elements preserved
                              might differ. default value is 0.5.
   :type preservation_ratio: float, optional
   :param aggressiveness: Quality measure for the resulting decimated
                          mesh. lower aggresiveness will
                          provide a higher quality mesh with
                          the tradeoff of higher execution
                          time. value range is 0 to 150,
                          default is 0.
   :type aggressiveness: int, optional

   :returns: **mesh** -- Decimated mesh with triangle elements
   :rtype: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.decimate_mesh()

   >>> # Make input connections
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_preservation_ratio = float()
   >>> op.inputs.preservation_ratio.connect(my_preservation_ratio)
   >>> my_aggressiveness = int()
   >>> op.inputs.aggressiveness.connect(my_aggressiveness)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.decimate_mesh(
   ...     mesh=my_mesh,
   ...     preservation_ratio=my_preservation_ratio,
   ...     aggressiveness=my_aggressiveness,
   ... )

   >>> # Get output data
   >>> result_mesh = op.outputs.mesh()




.. py:currentmodule:: decimate_mesh

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.decimate_mesh import decimate_mesh

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsDecimateMesh

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsDecimateMesh




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





