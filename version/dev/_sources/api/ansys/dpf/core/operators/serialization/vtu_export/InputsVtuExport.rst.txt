





:class:`InputsVtuExport`
========================

.. py:class:: ansys.dpf.core.operators.serialization.vtu_export.InputsVtuExport(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   vtu_export operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> my_directory = str()
   >>> op.inputs.directory.connect(my_directory)
   >>> my_base_name = str()
   >>> op.inputs.base_name.connect(my_base_name)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_fields1 = dpf.Field()
   >>> op.inputs.fields1.connect(my_fields1)
   >>> my_fields2 = dpf.Field()
   >>> op.inputs.fields2.connect(my_fields2)
   >>> my_write_mode = str()
   >>> op.inputs.write_mode.connect(my_write_mode)
   >>> my_as_point_cloud = bool()
   >>> op.inputs.as_point_cloud.connect(my_as_point_cloud)
   >>> my_export_faces = bool()
   >>> op.inputs.export_faces.connect(my_export_faces)
   >>> my_mesh_properties = dpf.StringField()
   >>> op.inputs.mesh_properties.connect(my_mesh_properties)



.. py:currentmodule:: InputsVtuExport

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~directory`
            - Allows to connect directory input to the operator.
          * - :py:attr:`~base_name`
            - Allows to connect base_name input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~fields1`
            - Allows to connect fields1 input to the operator.
          * - :py:attr:`~fields2`
            - Allows to connect fields2 input to the operator.
          * - :py:attr:`~write_mode`
            - Allows to connect write_mode input to the operator.
          * - :py:attr:`~as_point_cloud`
            - Allows to connect as_point_cloud input to the operator.
          * - :py:attr:`~export_faces`
            - Allows to connect export_faces input to the operator.
          * - :py:attr:`~mesh_properties`
            - Allows to connect mesh_properties input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.vtu_export import InputsVtuExport

Property detail
---------------

.. py:property:: directory

   Allows to connect directory input to the operator.

   Directory path

   :param my_directory:
   :type my_directory: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.directory.connect(my_directory)
   >>> # or
   >>> op.inputs.directory(my_directory)

.. py:property:: base_name

   Allows to connect base_name input to the operator.

   Vtu base file name, (default is file)

   :param my_base_name:
   :type my_base_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.base_name.connect(my_base_name)
   >>> # or
   >>> op.inputs.base_name(my_base_name)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   Mesh

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: fields1

   Allows to connect fields1 input to the operator.

   Nodal, face, or elemental field, fields
   container (over time), or property
   field to export. when there is no
   support available in the exported
   mesh, that data is ignored.

   :param my_fields1:
   :type my_fields1: Field or FieldsContainer or PropertyField

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.fields1.connect(my_fields1)
   >>> # or
   >>> op.inputs.fields1(my_fields1)

.. py:property:: fields2

   Allows to connect fields2 input to the operator.

   Nodal, face, or elemental field, fields
   container (over time), or property
   field to export. when there is no
   support available in the exported
   mesh, that data is ignored.

   :param my_fields2:
   :type my_fields2: Field or FieldsContainer or PropertyField

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.fields2.connect(my_fields2)
   >>> # or
   >>> op.inputs.fields2(my_fields2)

.. py:property:: write_mode

   Allows to connect write_mode input to the operator.

   Available are rawbinarycompressed, rawbinary,
   base64appended, base64inline, ascii,
   default is (rawbinarycompressed)

   :param my_write_mode:
   :type my_write_mode: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.write_mode.connect(my_write_mode)
   >>> # or
   >>> op.inputs.write_mode(my_write_mode)

.. py:property:: as_point_cloud

   Allows to connect as_point_cloud input to the operator.

   Whether to export the mesh as a point cloud.
   default is false.

   :param my_as_point_cloud:
   :type my_as_point_cloud: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.as_point_cloud.connect(my_as_point_cloud)
   >>> # or
   >>> op.inputs.as_point_cloud(my_as_point_cloud)

.. py:property:: export_faces

   Allows to connect export_faces input to the operator.

   Whether to also export faces as shell
   elements when the mesh contains
   cells. default is false.

   :param my_export_faces:
   :type my_export_faces: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.export_faces.connect(my_export_faces)
   >>> # or
   >>> op.inputs.export_faces(my_export_faces)

.. py:property:: mesh_properties

   Allows to connect mesh_properties input to the operator.

   List of names of mesh properties to export.

   :param my_mesh_properties:
   :type my_mesh_properties: StringField

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtu_export()
   >>> op.inputs.mesh_properties.connect(my_mesh_properties)
   >>> # or
   >>> op.inputs.mesh_properties(my_mesh_properties)






