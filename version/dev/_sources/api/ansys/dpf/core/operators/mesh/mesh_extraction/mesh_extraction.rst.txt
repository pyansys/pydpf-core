





:class:`mesh_extraction`
========================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_extraction.mesh_extraction(mesh=None, mesh_scoping=None, extension=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Take a mesh and a scoping (elemental or nodal) and create a new mesh
   that contains this selection only.

   :param mesh:
   :type mesh: MeshedRegion
   :param mesh_scoping:
   :type mesh_scoping: Scoping
   :param extension: Number of extension layer
   :type extension: int, optional

   :returns: **abstract_meshed_region**
   :rtype: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.mesh_extraction()

   >>> # Make input connections
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_extension = int()
   >>> op.inputs.extension.connect(my_extension)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.mesh_extraction(
   ...     mesh=my_mesh,
   ...     mesh_scoping=my_mesh_scoping,
   ...     extension=my_extension,
   ... )

   >>> # Get output data
   >>> result_abstract_meshed_region = op.outputs.abstract_meshed_region()




.. py:currentmodule:: mesh_extraction

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_extraction import mesh_extraction

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMeshExtraction

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMeshExtraction




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





