





:class:`accumulation_per_scoping`
=================================

.. py:class:: ansys.dpf.core.operators.math.accumulation_per_scoping.accumulation_per_scoping(fields_container=None, mesh_scoping=None, data_sources=None, scopings_container=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   This operator calculates the sum and the percentage of total sum of
   the input fields container for each scoping of the scopings
   container.

   :param fields_container:
   :type fields_container: FieldsContainer
   :param mesh_scoping: Master scoping. all scopings in the scopings
                        container will be intersected with
                        this scoping.
   :type mesh_scoping: Scoping, optional
   :param data_sources:
   :type data_sources: DataSources
   :param scopings_container: The intersection between the of the first
                              will be used.
   :type scopings_container: ScopingsContainer

   :returns: * **accumulation_per_scoping** (*FieldsContainer*)
             * **accumulation_per_scoping_percentage** (*FieldsContainer*)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.math.accumulation_per_scoping()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_scopings_container = dpf.ScopingsContainer()
   >>> op.inputs.scopings_container.connect(my_scopings_container)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.math.accumulation_per_scoping(
   ...     fields_container=my_fields_container,
   ...     mesh_scoping=my_mesh_scoping,
   ...     data_sources=my_data_sources,
   ...     scopings_container=my_scopings_container,
   ... )

   >>> # Get output data
   >>> result_accumulation_per_scoping = op.outputs.accumulation_per_scoping()
   >>> result_accumulation_per_scoping_percentage = op.outputs.accumulation_per_scoping_percentage()




.. py:currentmodule:: accumulation_per_scoping

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.accumulation_per_scoping import accumulation_per_scoping

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsAccumulationPerScoping

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsAccumulationPerScoping




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





