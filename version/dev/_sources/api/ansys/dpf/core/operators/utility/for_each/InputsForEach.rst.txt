





:class:`InputsForEach`
======================

.. py:class:: ansys.dpf.core.operators.utility.for_each.InputsForEach(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   for_each operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.for_each()
   >>> my_iterable = dpf.()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> my_iterable_values = dpf.()
   >>> op.inputs.iterable_values.connect(my_iterable_values)
   >>> my_pin_index = int()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> my_forward1 = dpf.()
   >>> op.inputs.forward1.connect(my_forward1)
   >>> my_forward2 = dpf.()
   >>> op.inputs.forward2.connect(my_forward2)



.. py:currentmodule:: InputsForEach

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~iterable`
            - Allows to connect iterable input to the operator.
          * - :py:attr:`~iterable_values`
            - Allows to connect iterable_values input to the operator.
          * - :py:attr:`~pin_index`
            - Allows to connect pin_index input to the operator.
          * - :py:attr:`~forward1`
            - Allows to connect forward1 input to the operator.
          * - :py:attr:`~forward2`
            - Allows to connect forward2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.for_each import InputsForEach

Property detail
---------------

.. py:property:: iterable

   Allows to connect iterable input to the operator.

   Either the result of the make_iterable_info
   operator, or the operator that must
   be incremented.

   :param my_iterable:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.for_each()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> # or
   >>> op.inputs.iterable(my_iterable)

.. py:property:: iterable_values

   Allows to connect iterable_values input to the operator.

   :param my_iterable_values:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.for_each()
   >>> op.inputs.iterable_values.connect(my_iterable_values)
   >>> # or
   >>> op.inputs.iterable_values(my_iterable_values)

.. py:property:: pin_index

   Allows to connect pin_index input to the operator.

   :param my_pin_index:
   :type my_pin_index: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.for_each()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> # or
   >>> op.inputs.pin_index(my_pin_index)

.. py:property:: forward1

   Allows to connect forward1 input to the operator.

   :param my_forward1:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.for_each()
   >>> op.inputs.forward1.connect(my_forward1)
   >>> # or
   >>> op.inputs.forward1(my_forward1)

.. py:property:: forward2

   Allows to connect forward2 input to the operator.

   :param my_forward2:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.for_each()
   >>> op.inputs.forward2.connect(my_forward2)
   >>> # or
   >>> op.inputs.forward2(my_forward2)






