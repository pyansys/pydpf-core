





:class:`InputsElementalNodalToNodal`
====================================

.. py:class:: ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal.InputsElementalNodalToNodal(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   elemental_nodal_to_nodal operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_should_average = bool()
   >>> op.inputs.should_average.connect(my_should_average)
   >>> my_extend_to_mid_nodes = bool()
   >>> op.inputs.extend_to_mid_nodes.connect(my_extend_to_mid_nodes)
   >>> my_extend_weights_to_mid_nodes = bool()
   >>> op.inputs.extend_weights_to_mid_nodes.connect(my_extend_weights_to_mid_nodes)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)



.. py:currentmodule:: InputsElementalNodalToNodal

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field`
            - Allows to connect field input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~should_average`
            - Allows to connect should_average input to the operator.
          * - :py:attr:`~extend_to_mid_nodes`
            - Allows to connect extend_to_mid_nodes input to the operator.
          * - :py:attr:`~extend_weights_to_mid_nodes`
            - Allows to connect extend_weights_to_mid_nodes input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal import InputsElementalNodalToNodal

Property detail
---------------

.. py:property:: field

   Allows to connect field input to the operator.

   Field or fields container with only one field
   is expected

   :param my_field:
   :type my_field: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()
   >>> op.inputs.field.connect(my_field)
   >>> # or
   >>> op.inputs.field(my_field)

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   Average only on these entities

   :param my_mesh_scoping:
   :type my_mesh_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: should_average

   Allows to connect should_average input to the operator.

   Each nodal value is divided by the number of
   elements linked to this node (default
   is true for discrete quantities).

   :param my_should_average:
   :type my_should_average: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()
   >>> op.inputs.should_average.connect(my_should_average)
   >>> # or
   >>> op.inputs.should_average(my_should_average)

.. py:property:: extend_to_mid_nodes

   Allows to connect extend_to_mid_nodes input to the operator.

   Compute mid nodes (when available) by
   averaging the neighbour primary
   nodes.

   :param my_extend_to_mid_nodes:
   :type my_extend_to_mid_nodes: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()
   >>> op.inputs.extend_to_mid_nodes.connect(my_extend_to_mid_nodes)
   >>> # or
   >>> op.inputs.extend_to_mid_nodes(my_extend_to_mid_nodes)

.. py:property:: extend_weights_to_mid_nodes

   Allows to connect extend_weights_to_mid_nodes input to the operator.

   Extends weights to mid nodes (when
   available). default is false.

   :param my_extend_weights_to_mid_nodes:
   :type my_extend_weights_to_mid_nodes: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()
   >>> op.inputs.extend_weights_to_mid_nodes.connect(my_extend_weights_to_mid_nodes)
   >>> # or
   >>> op.inputs.extend_weights_to_mid_nodes(my_extend_weights_to_mid_nodes)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)






