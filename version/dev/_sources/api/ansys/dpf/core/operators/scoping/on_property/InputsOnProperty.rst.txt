





:class:`InputsOnProperty`
=========================

.. py:class:: ansys.dpf.core.operators.scoping.on_property.InputsOnProperty(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   on_property operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_property()
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_id = int()
   >>> op.inputs.property_id.connect(my_property_id)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_inclusive = int()
   >>> op.inputs.inclusive.connect(my_inclusive)



.. py:currentmodule:: InputsOnProperty

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.
          * - :py:attr:`~property_name`
            - Allows to connect property_name input to the operator.
          * - :py:attr:`~property_id`
            - Allows to connect property_id input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~inclusive`
            - Allows to connect inclusive input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.on_property import InputsOnProperty

Property detail
---------------

.. py:property:: requested_location

   Allows to connect requested_location input to the operator.

   Nodal or elemental location are expected

   :param my_requested_location:
   :type my_requested_location: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_property()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)

.. py:property:: property_name

   Allows to connect property_name input to the operator.

   Ex "mapdl_element_type",
   "mapdl_element_type_id",
   "apdl_type_index", "mapdl_type_id",
   "material", "apdl_section_id",
   "apdl_real_id", "apdl_esys_id",
   "shell_axi", "volume_axi"...

   :param my_property_name:
   :type my_property_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_property()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> # or
   >>> op.inputs.property_name(my_property_name)

.. py:property:: property_id

   Allows to connect property_id input to the operator.

   :param my_property_id:
   :type my_property_id: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_property()
   >>> op.inputs.property_id.connect(my_property_id)
   >>> # or
   >>> op.inputs.property_id(my_property_id)

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   :param my_streams_container:
   :type my_streams_container: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_property()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_property()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: inclusive

   Allows to connect inclusive input to the operator.

   If element scoping is requested on a nodal
   named selection, if inclusive == 1
   then all the elements/faces adjacent
   to the nodes/faces ids in input are
   added, if inclusive == 0, only the
   elements/faces which have all their
   nodes/faces in the scoping are
   included

   :param my_inclusive:
   :type my_inclusive: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_property()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> # or
   >>> op.inputs.inclusive(my_inclusive)






