





:class:`on_coordinates`
=======================

.. py:class:: ansys.dpf.core.operators.mapping.on_coordinates.on_coordinates(fields_container=None, coordinates=None, create_support=None, mapping_on_scoping=None, mesh=None, use_quadratic_elements=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Evaluates a result on specified coordinates (interpolates results
   inside elements with shape functions).

   :param fields_container:
   :type fields_container: FieldsContainer
   :param coordinates:
   :type coordinates: Field or FieldsContainer or MeshedRegion or MeshesContainer
   :param create_support: If this pin is set to true, then, a support
                          associated to the fields consisting
                          of points is created
   :type create_support: bool, optional
   :param mapping_on_scoping: If this pin is set to true, then the mapping
                              between the coordinates and the
                              fields is created only on the first
                              field scoping
   :type mapping_on_scoping: bool, optional
   :param mesh: If the first field in input has no mesh in
                support, then the mesh in this pin is
                expected (default is false), if a
                meshes container with several meshes
                is set, it should be on the same
                label spaces as the coordinates
                fields container
   :type mesh: MeshedRegion or MeshesContainer, optional
   :param use_quadratic_elements: If this pin is set to true, the element
                                  search for each coordinate is
                                  computed on the quadratic element if
                                  the element is quadratic (more
                                  precise but less performant). default
                                  is false.
   :type use_quadratic_elements: bool, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mapping.on_coordinates()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_coordinates = dpf.Field()
   >>> op.inputs.coordinates.connect(my_coordinates)
   >>> my_create_support = bool()
   >>> op.inputs.create_support.connect(my_create_support)
   >>> my_mapping_on_scoping = bool()
   >>> op.inputs.mapping_on_scoping.connect(my_mapping_on_scoping)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_use_quadratic_elements = bool()
   >>> op.inputs.use_quadratic_elements.connect(my_use_quadratic_elements)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mapping.on_coordinates(
   ...     fields_container=my_fields_container,
   ...     coordinates=my_coordinates,
   ...     create_support=my_create_support,
   ...     mapping_on_scoping=my_mapping_on_scoping,
   ...     mesh=my_mesh,
   ...     use_quadratic_elements=my_use_quadratic_elements,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: on_coordinates

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mapping.on_coordinates import on_coordinates

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsOnCoordinates

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsOnCoordinates




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





