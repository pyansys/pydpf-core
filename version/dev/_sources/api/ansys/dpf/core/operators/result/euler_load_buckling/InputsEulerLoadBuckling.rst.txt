





:class:`InputsEulerLoadBuckling`
================================

.. py:class:: ansys.dpf.core.operators.result.euler_load_buckling.InputsEulerLoadBuckling(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   euler_load_buckling operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.euler_load_buckling()
   >>> my_field_beam_end_condition = dpf.DataSources()
   >>> op.inputs.field_beam_end_condition.connect(my_field_beam_end_condition)
   >>> my_field_beam_moment_inertia = dpf.Field()
   >>> op.inputs.field_beam_moment_inertia.connect(my_field_beam_moment_inertia)
   >>> my_field_beam_young_modulus = dpf.Field()
   >>> op.inputs.field_beam_young_modulus.connect(my_field_beam_young_modulus)
   >>> my_field_beam_length = dpf.Field()
   >>> op.inputs.field_beam_length.connect(my_field_beam_length)



.. py:currentmodule:: InputsEulerLoadBuckling

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field_beam_end_condition`
            - Allows to connect field_beam_end_condition input to the operator.
          * - :py:attr:`~field_beam_moment_inertia`
            - Allows to connect field_beam_moment_inertia input to the operator.
          * - :py:attr:`~field_beam_young_modulus`
            - Allows to connect field_beam_young_modulus input to the operator.
          * - :py:attr:`~field_beam_length`
            - Allows to connect field_beam_length input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.euler_load_buckling import InputsEulerLoadBuckling

Property detail
---------------

.. py:property:: field_beam_end_condition

   Allows to connect field_beam_end_condition input to the operator.

   This pin contains file csv or field of beam's
   end condition added by the user. if
   there's no file added, it would take
   value of all beam's end condition as
   1.

   :param my_field_beam_end_condition:
   :type my_field_beam_end_condition: DataSources or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.euler_load_buckling()
   >>> op.inputs.field_beam_end_condition.connect(my_field_beam_end_condition)
   >>> # or
   >>> op.inputs.field_beam_end_condition(my_field_beam_end_condition)

.. py:property:: field_beam_moment_inertia

   Allows to connect field_beam_moment_inertia input to the operator.

   Field of beam's moment inertia

   :param my_field_beam_moment_inertia:
   :type my_field_beam_moment_inertia: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.euler_load_buckling()
   >>> op.inputs.field_beam_moment_inertia.connect(my_field_beam_moment_inertia)
   >>> # or
   >>> op.inputs.field_beam_moment_inertia(my_field_beam_moment_inertia)

.. py:property:: field_beam_young_modulus

   Allows to connect field_beam_young_modulus input to the operator.

   Field of beam's young modulus

   :param my_field_beam_young_modulus:
   :type my_field_beam_young_modulus: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.euler_load_buckling()
   >>> op.inputs.field_beam_young_modulus.connect(my_field_beam_young_modulus)
   >>> # or
   >>> op.inputs.field_beam_young_modulus(my_field_beam_young_modulus)

.. py:property:: field_beam_length

   Allows to connect field_beam_length input to the operator.

   Field of beam's length

   :param my_field_beam_length:
   :type my_field_beam_length: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.euler_load_buckling()
   >>> op.inputs.field_beam_length.connect(my_field_beam_length)
   >>> # or
   >>> op.inputs.field_beam_length(my_field_beam_length)






