





:class:`serializer`
===================

.. py:class:: ansys.dpf.core.operators.serialization.serializer.serializer(stream_type=None, file_path=None, any_input1=None, any_input2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Take any input and serialize them in a file.

   :param stream_type: 0 for ascii (default), and 1 for binary
   :type stream_type: int
   :param file_path:
   :type file_path: str
   :param any_input1: Any input
   :type any_input1: Any
   :param any_input2: Any input
   :type any_input2: Any

   :returns: **file_path**
   :rtype: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.serialization.serializer()

   >>> # Make input connections
   >>> my_stream_type = int()
   >>> op.inputs.stream_type.connect(my_stream_type)
   >>> my_file_path = str()
   >>> op.inputs.file_path.connect(my_file_path)
   >>> my_any_input1 = dpf.Any()
   >>> op.inputs.any_input1.connect(my_any_input1)
   >>> my_any_input2 = dpf.Any()
   >>> op.inputs.any_input2.connect(my_any_input2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.serialization.serializer(
   ...     stream_type=my_stream_type,
   ...     file_path=my_file_path,
   ...     any_input1=my_any_input1,
   ...     any_input2=my_any_input2,
   ... )

   >>> # Get output data
   >>> result_file_path = op.outputs.file_path()




.. py:currentmodule:: serializer

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.serializer import serializer

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsSerializer

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsSerializer




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





