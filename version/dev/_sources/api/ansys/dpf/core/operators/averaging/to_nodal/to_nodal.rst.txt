





:class:`to_nodal`
=================

.. py:class:: ansys.dpf.core.operators.averaging.to_nodal.to_nodal(field=None, mesh_scoping=None, merge_solid_shell=None, shell_layer=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Transforms a field into a Nodal field using an averaging process. The
   result is computed on a given node's scoping.

   :param field: Field or fields container with only one field
                 is expected
   :type field: Field or FieldsContainer
   :param mesh_scoping:
   :type mesh_scoping: Scoping, optional
   :param merge_solid_shell: For shell/solid mixed field, gather in one
                             field all solids and shells (only on
                             one layer, false by default).
   :type merge_solid_shell: bool, optional
   :param shell_layer: If merge_solid_shell pin set to true, user
                       have to choose a shell layer. for
                       shell/solid mixed field, gather in
                       one field all solids and shells (only
                       on one layer).
   :type shell_layer: int, optional

   :returns: **field**
   :rtype: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.averaging.to_nodal()

   >>> # Make input connections
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_merge_solid_shell = bool()
   >>> op.inputs.merge_solid_shell.connect(my_merge_solid_shell)
   >>> my_shell_layer = int()
   >>> op.inputs.shell_layer.connect(my_shell_layer)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.averaging.to_nodal(
   ...     field=my_field,
   ...     mesh_scoping=my_mesh_scoping,
   ...     merge_solid_shell=my_merge_solid_shell,
   ...     shell_layer=my_shell_layer,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: to_nodal

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.to_nodal import to_nodal

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsToNodal

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsToNodal




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





