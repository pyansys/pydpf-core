





:class:`compute_residual_and_error`
===================================

.. py:class:: ansys.dpf.core.operators.math.compute_residual_and_error.compute_residual_and_error(field_or_fields_container1=None, normalization_type=None, norm_calculation_type=None, field_reference=None, field_or_fields_container2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the Lp-norm of a field or a field container.
   When a second entry is provided, the residual (the difference
   between the first and second entry) is calculated along with the
   error as the Lp-norm of the difference.
   When a second input is not provided, the calculation is only
   completed for the first entry.
   The type of calculation performed is based on the specifications
   provided for pin 1, pin 2 defines the type of error norm (L1 vs
   L2), and
   pin 3 which entity to use as a reference

   :param field_or_fields_container1: Field or fields container - compulsory
   :type field_or_fields_container1: Field or FieldsContainer
   :param normalization_type: Type of normalization applied to the
                              residuals and norm  calculation
                              (optional, defaut: absolute):
                              0 for absolute,
                              1 for relative to the first entry at
                              a given time step,
                              2 for normalized by the max at a
                              given time step of the first entry or
                              residuals depending on the reference
                              field option,
                              3 for normalized by the max over all
                              time steps of the first entry or
                              residuals depending on the reference
                              field option
   :type normalization_type: int, optional
   :param norm_calculation_type: Type for norm calculation (optional, default:
                                 l2) - it is normalized depending on
                                 pin2 selection
                                 1 for l1, ie sum(abs(xi)),
                                 2 for l2, ie sqrt(sum((xi^2))
   :type norm_calculation_type: int, optional
   :param field_reference: Field reference for the normalization step,
                           default: 0 for entry 1, 1 for
                           residuals - optional
   :type field_reference: int, optional
   :param field_or_fields_container2: Field or fields container of same
                                      dimensionality as entry 1 - optional
   :type field_or_fields_container2: Field or FieldsContainer, optional

   :returns: * **residuals** (*Field or FieldsContainer*) -- 0: normalized residuals (aka field 1 - field
               2) as a field or field container,
               normalized depending on the
               normalization type
             * **error** (*Field or FieldsContainer*) -- 1: error as a field or a field container
               depending on the entry's type.
             * **residuals_normalization_factor** (*Field or FieldsContainer*) -- 2: factor used for residual normalization
             * **error_normalization_factor** (*Field or FieldsContainer*) -- 3: factor used for error norm normalization

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.math.compute_residual_and_error()

   >>> # Make input connections
   >>> my_field_or_fields_container1 = dpf.Field()
   >>> op.inputs.field_or_fields_container1.connect(my_field_or_fields_container1)
   >>> my_normalization_type = int()
   >>> op.inputs.normalization_type.connect(my_normalization_type)
   >>> my_norm_calculation_type = int()
   >>> op.inputs.norm_calculation_type.connect(my_norm_calculation_type)
   >>> my_field_reference = int()
   >>> op.inputs.field_reference.connect(my_field_reference)
   >>> my_field_or_fields_container2 = dpf.Field()
   >>> op.inputs.field_or_fields_container2.connect(my_field_or_fields_container2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.math.compute_residual_and_error(
   ...     field_or_fields_container1=my_field_or_fields_container1,
   ...     normalization_type=my_normalization_type,
   ...     norm_calculation_type=my_norm_calculation_type,
   ...     field_reference=my_field_reference,
   ...     field_or_fields_container2=my_field_or_fields_container2,
   ... )

   >>> # Get output data
   >>> result_residuals = op.outputs.residuals()
   >>> result_error = op.outputs.error()
   >>> result_residuals_normalization_factor = op.outputs.residuals_normalization_factor()
   >>> result_error_normalization_factor = op.outputs.error_normalization_factor()




.. py:currentmodule:: compute_residual_and_error

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.compute_residual_and_error import compute_residual_and_error

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsComputeResidualAndError

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsComputeResidualAndError




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





