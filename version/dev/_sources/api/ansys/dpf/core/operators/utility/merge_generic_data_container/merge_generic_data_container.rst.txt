





:class:`merge_generic_data_container`
=====================================

.. py:class:: ansys.dpf.core.operators.utility.merge_generic_data_container.merge_generic_data_container(generic_data_container1=None, generic_data_container2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Merges a list of generic data container. For each data entry, the
   merge operation is forwarded to the correct merge Operator.
   Primitive types cannot be merged, first instance found will be
   maintained in the result.

   :param generic_data_container1: Either a vector of generic data containers
                                   (sharing the same data types) or
                                   generic data containers from pin 0 to
                                   ... to merge. supported types rely on
                                   existing type specific merge
                                   operators.
   :type generic_data_container1: GenericDataContainer
   :param generic_data_container2: Either a vector of generic data containers
                                   (sharing the same data types) or
                                   generic data containers from pin 0 to
                                   ... to merge. supported types rely on
                                   existing type specific merge
                                   operators.
   :type generic_data_container2: GenericDataContainer

   :returns: **generic_data_container**
   :rtype: GenericDataContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.merge_generic_data_container()

   >>> # Make input connections
   >>> my_generic_data_container1 = dpf.GenericDataContainer()
   >>> op.inputs.generic_data_container1.connect(my_generic_data_container1)
   >>> my_generic_data_container2 = dpf.GenericDataContainer()
   >>> op.inputs.generic_data_container2.connect(my_generic_data_container2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.merge_generic_data_container(
   ...     generic_data_container1=my_generic_data_container1,
   ...     generic_data_container2=my_generic_data_container2,
   ... )

   >>> # Get output data
   >>> result_generic_data_container = op.outputs.generic_data_container()




.. py:currentmodule:: merge_generic_data_container

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_generic_data_container import merge_generic_data_container

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMergeGenericDataContainer

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMergeGenericDataContainer




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





