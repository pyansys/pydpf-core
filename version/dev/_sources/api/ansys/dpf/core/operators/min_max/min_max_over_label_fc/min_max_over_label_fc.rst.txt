





:class:`min_max_over_label_fc`
==============================

.. py:class:: ansys.dpf.core.operators.min_max.min_max_over_label_fc.min_max_over_label_fc(fields_container=None, label=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Create two fields (0 min 1 max) by looping over the fields container
   in input and taking the min/max value by component through all the
   fields having the same id for the label set in input (in pin 1).
   If no label is specified or if the specified label doesn't exist,
   the operation is done over all the fields. The fields out are
   located on the label set in input, so their scoping are the labels
   ids.For each min max value, the label id for one other fields
   container labels is kept and returned in a scoping in pin 2 (min)
   and 3 (max).The field's scoping ids of the value kept in min max
   are also returned in the scopings in pin 4 (min) and 5 (max).

   :param fields_container:
   :type fields_container: FieldsContainer
   :param label: Label name from the fields container
   :type label: str

   :returns: * **field_min** (*Field*)
             * **field_max** (*Field*)
             * **domain_ids_min** (*Scoping, optional*)
             * **domain_ids_max** (*Scoping, optional*)
             * **scoping_ids_min** (*Scoping*)
             * **scoping_ids_max** (*Scoping*)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.min_max.min_max_over_label_fc()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_label = str()
   >>> op.inputs.label.connect(my_label)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.min_max.min_max_over_label_fc(
   ...     fields_container=my_fields_container,
   ...     label=my_label,
   ... )

   >>> # Get output data
   >>> result_field_min = op.outputs.field_min()
   >>> result_field_max = op.outputs.field_max()
   >>> result_domain_ids_min = op.outputs.domain_ids_min()
   >>> result_domain_ids_max = op.outputs.domain_ids_max()
   >>> result_scoping_ids_min = op.outputs.scoping_ids_min()
   >>> result_scoping_ids_max = op.outputs.scoping_ids_max()




.. py:currentmodule:: min_max_over_label_fc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.min_max.min_max_over_label_fc import min_max_over_label_fc

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMinMaxOverLabelFc

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMinMaxOverLabelFc




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





