





:class:`delegate_to_operator`
=============================

.. py:class:: ansys.dpf.core.operators.utility.delegate_to_operator.delegate_to_operator(operator_name=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Delegate the run to an Operator instantiated by the name in input
   (forwards all the input of this Operator to the sub Operator).

   :param operator_name:
   :type operator_name: str

   :returns: * **any1** (*Any*) -- Inputs
             * **any2** (*Any*) -- Inputs

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.delegate_to_operator()

   >>> # Make input connections
   >>> my_operator_name = str()
   >>> op.inputs.operator_name.connect(my_operator_name)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.delegate_to_operator(
   ...     operator_name=my_operator_name,
   ... )

   >>> # Get output data
   >>> result_any1 = op.outputs.any1()
   >>> result_any2 = op.outputs.any2()




.. py:currentmodule:: delegate_to_operator

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.delegate_to_operator import delegate_to_operator

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsDelegateToOperator

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsDelegateToOperator




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





