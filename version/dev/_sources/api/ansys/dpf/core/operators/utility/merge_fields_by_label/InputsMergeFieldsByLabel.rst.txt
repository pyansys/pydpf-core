





:class:`InputsMergeFieldsByLabel`
=================================

.. py:class:: ansys.dpf.core.operators.utility.merge_fields_by_label.InputsMergeFieldsByLabel(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   merge_fields_by_label operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_by_label()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_label = str()
   >>> op.inputs.label.connect(my_label)
   >>> my_merged_field_support = dpf.AbstractFieldSupport()
   >>> op.inputs.merged_field_support.connect(my_merged_field_support)
   >>> my_sum_merge = bool()
   >>> op.inputs.sum_merge.connect(my_sum_merge)



.. py:currentmodule:: InputsMergeFieldsByLabel

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~label`
            - Allows to connect label input to the operator.
          * - :py:attr:`~merged_field_support`
            - Allows to connect merged_field_support input to the operator.
          * - :py:attr:`~sum_merge`
            - Allows to connect sum_merge input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_fields_by_label import InputsMergeFieldsByLabel

Property detail
---------------

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_by_label()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: label

   Allows to connect label input to the operator.

   Label identifier that should be merged.

   :param my_label:
   :type my_label: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_by_label()
   >>> op.inputs.label.connect(my_label)
   >>> # or
   >>> op.inputs.label(my_label)

.. py:property:: merged_field_support

   Allows to connect merged_field_support input to the operator.

   The fieldscontainer's support that has
   already been merged.

   :param my_merged_field_support:
   :type my_merged_field_support: AbstractFieldSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_by_label()
   >>> op.inputs.merged_field_support.connect(my_merged_field_support)
   >>> # or
   >>> op.inputs.merged_field_support(my_merged_field_support)

.. py:property:: sum_merge

   Allows to connect sum_merge input to the operator.

   Default is false. if true, redundant
   quantities are summed instead of
   being ignored.

   :param my_sum_merge:
   :type my_sum_merge: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.merge_fields_by_label()
   >>> op.inputs.sum_merge.connect(my_sum_merge)
   >>> # or
   >>> op.inputs.sum_merge(my_sum_merge)






