





:class:`elements_facets_surfaces_over_time`
===========================================

.. py:class:: ansys.dpf.core.operators.geo.elements_facets_surfaces_over_time.elements_facets_surfaces_over_time(scoping=None, displacement=None, mesh=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Calculates for a mesh, the surface of each element's facet over time
   for each specified time step. The output is a new mesh made with
   only surface elements.

   :param scoping:
   :type scoping: Scoping, optional
   :param displacement: Displacement field's container.
   :type displacement: FieldsContainer, optional
   :param mesh: Mesh must be defined if the displacement
                field's container does not contain
                it, or if there is no displacement.
   :type mesh: MeshedRegion, optional

   :returns: * **fields_container** (*FieldsContainer*) -- Surfaces field.
             * **mesh** (*MeshedRegion*) -- Mesh made of surface elements only.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.geo.elements_facets_surfaces_over_time()

   >>> # Make input connections
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> my_displacement = dpf.FieldsContainer()
   >>> op.inputs.displacement.connect(my_displacement)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.geo.elements_facets_surfaces_over_time(
   ...     scoping=my_scoping,
   ...     displacement=my_displacement,
   ...     mesh=my_mesh,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()
   >>> result_mesh = op.outputs.mesh()




.. py:currentmodule:: elements_facets_surfaces_over_time

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.geo.elements_facets_surfaces_over_time import elements_facets_surfaces_over_time

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsElementsFacetsSurfacesOverTime

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsElementsFacetsSurfacesOverTime




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





