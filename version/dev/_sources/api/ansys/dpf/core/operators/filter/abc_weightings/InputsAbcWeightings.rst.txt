





:class:`InputsAbcWeightings`
============================

.. py:class:: ansys.dpf.core.operators.filter.abc_weightings.InputsAbcWeightings(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   abc_weightings operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.abc_weightings()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_weighting_type = int()
   >>> op.inputs.weighting_type.connect(my_weighting_type)
   >>> my_shape_by_tf_scoping = bool()
   >>> op.inputs.shape_by_tf_scoping.connect(my_shape_by_tf_scoping)



.. py:currentmodule:: InputsAbcWeightings

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~weighting_type`
            - Allows to connect weighting_type input to the operator.
          * - :py:attr:`~shape_by_tf_scoping`
            - Allows to connect shape_by_tf_scoping input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.filter.abc_weightings import InputsAbcWeightings

Property detail
---------------

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   Data to be weighted in db units.

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.abc_weightings()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: weighting_type

   Allows to connect weighting_type input to the operator.

   If this pin is set to 0, the a-weighting is
   computed, 1 the b-weigting is
   computed and 2 the c-weightings is
   computed.

   :param my_weighting_type:
   :type my_weighting_type: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.abc_weightings()
   >>> op.inputs.weighting_type.connect(my_weighting_type)
   >>> # or
   >>> op.inputs.weighting_type(my_weighting_type)

.. py:property:: shape_by_tf_scoping

   Allows to connect shape_by_tf_scoping input to the operator.

   If this pin is set to true, each field of the
   input fields container is defined by
   time freq scoping and not by ids.
   default is false

   :param my_shape_by_tf_scoping:
   :type my_shape_by_tf_scoping: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.abc_weightings()
   >>> op.inputs.shape_by_tf_scoping.connect(my_shape_by_tf_scoping)
   >>> # or
   >>> op.inputs.shape_by_tf_scoping(my_shape_by_tf_scoping)






