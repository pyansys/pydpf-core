





:class:`elastic_strain_rotation_by_euler_nodes`
===============================================

.. py:class:: ansys.dpf.core.operators.result.elastic_strain_rotation_by_euler_nodes.elastic_strain_rotation_by_euler_nodes(fields_container=None, streams_container=None, data_sources=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   read Euler angles on elements from the result file and rotate the
   fields in the fieldsContainer.

   :param fields_container:
   :type fields_container: FieldsContainer, optional
   :param streams_container: Dataprocessing::Crstfilewrapper, optional
   :type streams_container: StreamsContainer or Stream or Class
   :param data_sources:
   :type data_sources: DataSources

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.elastic_strain_rotation_by_euler_nodes()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.elastic_strain_rotation_by_euler_nodes(
   ...     fields_container=my_fields_container,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: elastic_strain_rotation_by_euler_nodes

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.elastic_strain_rotation_by_euler_nodes import elastic_strain_rotation_by_euler_nodes

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsElasticStrainRotationByEulerNodes

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsElasticStrainRotationByEulerNodes




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





