





:class:`InputsUnitConvert`
==========================

.. py:class:: ansys.dpf.core.operators.math.unit_convert.InputsUnitConvert(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   unit_convert operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.unit_convert()
   >>> my_entity_to_convert = dpf.Field()
   >>> op.inputs.entity_to_convert.connect(my_entity_to_convert)
   >>> my_unit_name = str()
   >>> op.inputs.unit_name.connect(my_unit_name)



.. py:currentmodule:: InputsUnitConvert

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~entity_to_convert`
            - Allows to connect entity_to_convert input to the operator.
          * - :py:attr:`~unit_name`
            - Allows to connect unit_name input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.unit_convert import InputsUnitConvert

Property detail
---------------

.. py:property:: entity_to_convert

   Allows to connect entity_to_convert input to the operator.

   :param my_entity_to_convert:
   :type my_entity_to_convert: Field or FieldsContainer or MeshedRegion or MeshesContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.unit_convert()
   >>> op.inputs.entity_to_convert.connect(my_entity_to_convert)
   >>> # or
   >>> op.inputs.entity_to_convert(my_entity_to_convert)

.. py:property:: unit_name

   Allows to connect unit_name input to the operator.

   Unit as a string, ex 'm' for meter, 'pa' for
   pascal,... or ansys unit system's id,
   or a field from which expected unit
   will be extracted.

   :param my_unit_name:
   :type my_unit_name: str or int or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.unit_convert()
   >>> op.inputs.unit_name.connect(my_unit_name)
   >>> # or
   >>> op.inputs.unit_name(my_unit_name)






