





:class:`transient_rayleigh_integration`
=======================================

.. py:class:: ansys.dpf.core.operators.result.transient_rayleigh_integration.transient_rayleigh_integration(fields_container=None, mesh=None, time_scoping=None, field=None, observation_mesh=None, mass_density=None, speed_of_sound=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the transient Rayleigh integral

   :param fields_container: The input field container expects
                            acceleration fields
   :type fields_container: FieldsContainer
   :param mesh: The meshes region in this pin has to be
                boundary or skin mesh. this is the
                source meshes.
   :type mesh: MeshedRegion or MeshesContainer
   :param time_scoping: Load step number (if it's specified, the
                        transient rayleigh integration is
                        computed only on the substeps of this
                        step) or time scoping
   :type time_scoping: int or Scoping
   :param field: The field represents the coordinates of the
                 observation position. it should be
                 specified if not observation mesh is
                 provided.
   :type field: Field
   :param observation_mesh: This is the observation mesh region
   :type observation_mesh: MeshedRegion
   :param mass_density: Mass density (if it's not specified, default
                        value of the air is applied).
   :type mass_density: float
   :param speed_of_sound: Speed of sound (if it's not specified,
                          default value of the speed of sound
                          in the air is applied).
   :type speed_of_sound: float

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.transient_rayleigh_integration()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_time_scoping = int()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_observation_mesh = dpf.MeshedRegion()
   >>> op.inputs.observation_mesh.connect(my_observation_mesh)
   >>> my_mass_density = float()
   >>> op.inputs.mass_density.connect(my_mass_density)
   >>> my_speed_of_sound = float()
   >>> op.inputs.speed_of_sound.connect(my_speed_of_sound)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.transient_rayleigh_integration(
   ...     fields_container=my_fields_container,
   ...     mesh=my_mesh,
   ...     time_scoping=my_time_scoping,
   ...     field=my_field,
   ...     observation_mesh=my_observation_mesh,
   ...     mass_density=my_mass_density,
   ...     speed_of_sound=my_speed_of_sound,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: transient_rayleigh_integration

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.transient_rayleigh_integration import transient_rayleigh_integration

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsTransientRayleighIntegration

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsTransientRayleighIntegration




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





