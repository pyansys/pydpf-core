





:class:`InputsPythonGenerator`
==============================

.. py:class:: ansys.dpf.core.operators.utility.python_generator.InputsPythonGenerator(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   python_generator operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.python_generator()
   >>> my_dll_source_path = str()
   >>> op.inputs.dll_source_path.connect(my_dll_source_path)
   >>> my_output_path = str()
   >>> op.inputs.output_path.connect(my_output_path)
   >>> my_load_symbol = str()
   >>> op.inputs.load_symbol.connect(my_load_symbol)
   >>> my_library_key = str()
   >>> op.inputs.library_key.connect(my_library_key)



.. py:currentmodule:: InputsPythonGenerator

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~dll_source_path`
            - Allows to connect dll_source_path input to the operator.
          * - :py:attr:`~output_path`
            - Allows to connect output_path input to the operator.
          * - :py:attr:`~load_symbol`
            - Allows to connect load_symbol input to the operator.
          * - :py:attr:`~library_key`
            - Allows to connect library_key input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.python_generator import InputsPythonGenerator

Property detail
---------------

.. py:property:: dll_source_path

   Allows to connect dll_source_path input to the operator.

   :param my_dll_source_path:
   :type my_dll_source_path: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.python_generator()
   >>> op.inputs.dll_source_path.connect(my_dll_source_path)
   >>> # or
   >>> op.inputs.dll_source_path(my_dll_source_path)

.. py:property:: output_path

   Allows to connect output_path input to the operator.

   :param my_output_path:
   :type my_output_path: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.python_generator()
   >>> op.inputs.output_path.connect(my_output_path)
   >>> # or
   >>> op.inputs.output_path(my_output_path)

.. py:property:: load_symbol

   Allows to connect load_symbol input to the operator.

   :param my_load_symbol:
   :type my_load_symbol: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.python_generator()
   >>> op.inputs.load_symbol.connect(my_load_symbol)
   >>> # or
   >>> op.inputs.load_symbol(my_load_symbol)

.. py:property:: library_key

   Allows to connect library_key input to the operator.

   :param my_library_key:
   :type my_library_key: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.python_generator()
   >>> op.inputs.library_key.connect(my_library_key)
   >>> # or
   >>> op.inputs.library_key(my_library_key)






