





:class:`InputsVtkExport`
========================

.. py:class:: ansys.dpf.core.operators.serialization.vtk_export.InputsVtkExport(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   vtk_export operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_export()
   >>> my_export_type = int()
   >>> op.inputs.export_type.connect(my_export_type)
   >>> my_file_path = str()
   >>> op.inputs.file_path.connect(my_file_path)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_fields1 = dpf.FieldsContainer()
   >>> op.inputs.fields1.connect(my_fields1)
   >>> my_fields2 = dpf.FieldsContainer()
   >>> op.inputs.fields2.connect(my_fields2)



.. py:currentmodule:: InputsVtkExport

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~export_type`
            - Allows to connect export_type input to the operator.
          * - :py:attr:`~file_path`
            - Allows to connect file_path input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~fields1`
            - Allows to connect fields1 input to the operator.
          * - :py:attr:`~fields2`
            - Allows to connect fields2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.vtk_export import InputsVtkExport

Property detail
---------------

.. py:property:: export_type

   Allows to connect export_type input to the operator.

   Either export volume elements in the mesh
   with their fields with value 0 or
   faces elements in the mesh with their
   fields with value 1 (default is 0)

   :param my_export_type:
   :type my_export_type: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_export()
   >>> op.inputs.export_type.connect(my_export_type)
   >>> # or
   >>> op.inputs.export_type(my_export_type)

.. py:property:: file_path

   Allows to connect file_path input to the operator.

   Path with vtk extension were the export
   occurs

   :param my_file_path:
   :type my_file_path: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_export()
   >>> op.inputs.file_path.connect(my_file_path)
   >>> # or
   >>> op.inputs.file_path(my_file_path)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   Necessary if the first field or fields
   container don't have a mesh in their
   support

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_export()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: fields1

   Allows to connect fields1 input to the operator.

   Fields exported

   :param my_fields1:
   :type my_fields1: FieldsContainer or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_export()
   >>> op.inputs.fields1.connect(my_fields1)
   >>> # or
   >>> op.inputs.fields1(my_fields1)

.. py:property:: fields2

   Allows to connect fields2 input to the operator.

   Fields exported

   :param my_fields2:
   :type my_fields2: FieldsContainer or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_export()
   >>> op.inputs.fields2.connect(my_fields2)
   >>> # or
   >>> op.inputs.fields2(my_fields2)






