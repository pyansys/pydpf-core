





:class:`InputsWorkflowEnergyPerComponent`
=========================================

.. py:class:: ansys.dpf.core.operators.result.workflow_energy_per_component.InputsWorkflowEnergyPerComponent(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   workflow_energy_per_component operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.workflow_energy_per_component()
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_energy_type = int()
   >>> op.inputs.energy_type.connect(my_energy_type)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_named_selection1 = str()
   >>> op.inputs.named_selection1.connect(my_named_selection1)
   >>> my_named_selection2 = str()
   >>> op.inputs.named_selection2.connect(my_named_selection2)



.. py:currentmodule:: InputsWorkflowEnergyPerComponent

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~energy_type`
            - Allows to connect energy_type input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~named_selection1`
            - Allows to connect named_selection1 input to the operator.
          * - :py:attr:`~named_selection2`
            - Allows to connect named_selection2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.workflow_energy_per_component import InputsWorkflowEnergyPerComponent

Property detail
---------------

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   :param my_time_scoping:
   :type my_time_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.workflow_energy_per_component()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   When the input is a scoping, it is treated as
   the master scoping. all named
   selections will intersect with it.
   when the input is a scopings
   container, named selections will not
   be needed.

   :param my_mesh_scoping:
   :type my_mesh_scoping: Scoping or ScopingsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.workflow_energy_per_component()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: energy_type

   Allows to connect energy_type input to the operator.

   Type of energy to be processed: (0: strain +
   kinetic energy (default), 1: strain
   energy, 2: kinetic energy, 3: all
   energy types)

   :param my_energy_type:
   :type my_energy_type: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.workflow_energy_per_component()
   >>> op.inputs.energy_type.connect(my_energy_type)
   >>> # or
   >>> op.inputs.energy_type(my_energy_type)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.workflow_energy_per_component()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: named_selection1

   Allows to connect named_selection1 input to the operator.

   Named selections. intersection of all  named
   selections with the master scoping
   will be done.

   :param my_named_selection1:
   :type my_named_selection1: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.workflow_energy_per_component()
   >>> op.inputs.named_selection1.connect(my_named_selection1)
   >>> # or
   >>> op.inputs.named_selection1(my_named_selection1)

.. py:property:: named_selection2

   Allows to connect named_selection2 input to the operator.

   Named selections. intersection of all  named
   selections with the master scoping
   will be done.

   :param my_named_selection2:
   :type my_named_selection2: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.workflow_energy_per_component()
   >>> op.inputs.named_selection2.connect(my_named_selection2)
   >>> # or
   >>> op.inputs.named_selection2(my_named_selection2)






