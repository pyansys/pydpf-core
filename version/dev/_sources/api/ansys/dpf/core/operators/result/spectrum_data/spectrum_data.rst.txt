





:class:`spectrum_data`
======================

.. py:class:: ansys.dpf.core.operators.result.spectrum_data.spectrum_data(streams=None, data_sources=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Read spectral data from the result files contained in the streams or
   data sources.

   :param streams: Result file container allowed to be kept open
                   to cache data.
   :type streams: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set.
   :type data_sources: DataSources

   :returns: * **participation_factors** (*FieldsContainer*) -- Fields container holding participation
               factors.
             * **mode_coefficients** (*FieldsContainer*) -- Fields container holding mode coefficients
               (prs file).
             * **damping_ratios** (*FieldsContainer*) -- Fields container holding damping ratios (prs
               file).
             * **global_damping** (*FieldsContainer*) -- Fields container holding for each spectrum:
               global damping ratio, damping
               stiffness coefficient & damping mass
               coefficient (prs file).
             * **missing_mass** (*FieldsContainer*) -- Fields container holding for each spectrum:
               missing mass mode (0: none, 1:
               active), missing mass effect zpa (prs
               file).
             * **rigid_response** (*FieldsContainer*) -- Fields container holding for each spectrum:
               rigid response mode (0: none, 1:
               gupta, 2: lindley), freq begin
               (gupta) / zpa (lindley), freq end
               (gupta) (prs file).

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.spectrum_data()

   >>> # Make input connections
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.spectrum_data(
   ...     streams=my_streams,
   ...     data_sources=my_data_sources,
   ... )

   >>> # Get output data
   >>> result_participation_factors = op.outputs.participation_factors()
   >>> result_mode_coefficients = op.outputs.mode_coefficients()
   >>> result_damping_ratios = op.outputs.damping_ratios()
   >>> result_global_damping = op.outputs.global_damping()
   >>> result_missing_mass = op.outputs.missing_mass()
   >>> result_rigid_response = op.outputs.rigid_response()




.. py:currentmodule:: spectrum_data

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.spectrum_data import spectrum_data

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsSpectrumData

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsSpectrumData




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





