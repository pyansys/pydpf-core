





:class:`InputsCentroidFc`
=========================

.. py:class:: ansys.dpf.core.operators.math.centroid_fc.InputsCentroidFc(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   centroid_fc operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.centroid_fc()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_time_freq = float()
   >>> op.inputs.time_freq.connect(my_time_freq)
   >>> my_step = int()
   >>> op.inputs.step.connect(my_step)
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)



.. py:currentmodule:: InputsCentroidFc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~time_freq`
            - Allows to connect time_freq input to the operator.
          * - :py:attr:`~step`
            - Allows to connect step input to the operator.
          * - :py:attr:`~time_freq_support`
            - Allows to connect time_freq_support input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.centroid_fc import InputsCentroidFc

Property detail
---------------

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.centroid_fc()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: time_freq

   Allows to connect time_freq input to the operator.

   :param my_time_freq:
   :type my_time_freq: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.centroid_fc()
   >>> op.inputs.time_freq.connect(my_time_freq)
   >>> # or
   >>> op.inputs.time_freq(my_time_freq)

.. py:property:: step

   Allows to connect step input to the operator.

   :param my_step:
   :type my_step: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.centroid_fc()
   >>> op.inputs.step.connect(my_step)
   >>> # or
   >>> op.inputs.step(my_step)

.. py:property:: time_freq_support

   Allows to connect time_freq_support input to the operator.

   :param my_time_freq_support:
   :type my_time_freq_support: TimeFreqSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.centroid_fc()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> # or
   >>> op.inputs.time_freq_support(my_time_freq_support)






