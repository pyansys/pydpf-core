





:class:`InputsScaleFc`
======================

.. py:class:: ansys.dpf.core.operators.math.scale_fc.InputsScaleFc(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   scale_fc operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.scale_fc()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_ponderation = float()
   >>> op.inputs.ponderation.connect(my_ponderation)
   >>> my_boolean = bool()
   >>> op.inputs.boolean.connect(my_boolean)
   >>> my_algorithm = int()
   >>> op.inputs.algorithm.connect(my_algorithm)



.. py:currentmodule:: InputsScaleFc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~ponderation`
            - Allows to connect ponderation input to the operator.
          * - :py:attr:`~boolean`
            - Allows to connect boolean input to the operator.
          * - :py:attr:`~algorithm`
            - Allows to connect algorithm input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.scale_fc import InputsScaleFc

Property detail
---------------

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   Fields container to be scaled

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.scale_fc()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: ponderation

   Allows to connect ponderation input to the operator.

   Double/vector of
   doubles/field/fieldscontainer. when
   scoped on overall, same value(s)
   applied on all the data, when scoped
   elsewhere, corresponding values will
   be multiplied due to the scoping

   :param my_ponderation:
   :type my_ponderation: float or Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.scale_fc()
   >>> op.inputs.ponderation.connect(my_ponderation)
   >>> # or
   >>> op.inputs.ponderation(my_ponderation)

.. py:property:: boolean

   Allows to connect boolean input to the operator.

   Default is false. if set to true, output of
   scale is made dimensionless

   :param my_boolean:
   :type my_boolean: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.scale_fc()
   >>> op.inputs.boolean.connect(my_boolean)
   >>> # or
   >>> op.inputs.boolean(my_boolean)

.. py:property:: algorithm

   Allows to connect algorithm input to the operator.

   Default is 0 use mkl. if set to 1, don't

   :param my_algorithm:
   :type my_algorithm: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.scale_fc()
   >>> op.inputs.algorithm.connect(my_algorithm)
   >>> # or
   >>> op.inputs.algorithm(my_algorithm)






