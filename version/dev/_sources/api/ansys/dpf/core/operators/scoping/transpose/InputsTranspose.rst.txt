





:class:`InputsTranspose`
========================

.. py:class:: ansys.dpf.core.operators.scoping.transpose.InputsTranspose(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   transpose operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.transpose()
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_meshed_region = dpf.MeshedRegion()
   >>> op.inputs.meshed_region.connect(my_meshed_region)
   >>> my_inclusive = int()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)



.. py:currentmodule:: InputsTranspose

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~meshed_region`
            - Allows to connect meshed_region input to the operator.
          * - :py:attr:`~inclusive`
            - Allows to connect inclusive input to the operator.
          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.transpose import InputsTranspose

Property detail
---------------

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   Scoping or scopings container (the input type
   is the output type)

   :param my_mesh_scoping:
   :type my_mesh_scoping: Scoping or ScopingsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.transpose()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: meshed_region

   Allows to connect meshed_region input to the operator.

   :param my_meshed_region:
   :type my_meshed_region: MeshedRegion or MeshesContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.transpose()
   >>> op.inputs.meshed_region.connect(my_meshed_region)
   >>> # or
   >>> op.inputs.meshed_region(my_meshed_region)

.. py:property:: inclusive

   Allows to connect inclusive input to the operator.

   If inclusive == 1 then all the elements/faces
   adjacent to the nodes/faces ids in
   input are added, if inclusive == 0,
   only the elements/faces which have
   all their nodes/faces in the scoping
   are included

   :param my_inclusive:
   :type my_inclusive: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.transpose()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> # or
   >>> op.inputs.inclusive(my_inclusive)

.. py:property:: requested_location

   Allows to connect requested_location input to the operator.

   Output scoping location for meshes with
   nodes, faces and elements. by
   default, elemental and faces scopings
   transpose to nodal, and nodal
   scopings transpose to elemental.

   :param my_requested_location:
   :type my_requested_location: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.transpose()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)






