





:class:`InputsSkin`
===================

.. py:class:: ansys.dpf.core.operators.mesh.skin.InputsSkin(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   skin operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.skin()
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_duplicate_shell = bool()
   >>> op.inputs.duplicate_shell.connect(my_duplicate_shell)
   >>> my_add_beam = bool()
   >>> op.inputs.add_beam.connect(my_add_beam)



.. py:currentmodule:: InputsSkin

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~duplicate_shell`
            - Allows to connect duplicate_shell input to the operator.
          * - :py:attr:`~add_beam`
            - Allows to connect add_beam input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.skin import InputsSkin

Property detail
---------------

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.skin()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   Nodal scoping to restrict the skin extraction
   to a set of nodes. if provided, a
   skin element is added to the skin
   mesh if all its nodes are in the
   scoping.

   :param my_mesh_scoping:
   :type my_mesh_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.skin()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: duplicate_shell

   Allows to connect duplicate_shell input to the operator.

   If input mesh contains shell elements, output
   mesh shell elements (boolean = 1) are
   duplicated, one per each orientation,
   or (boolean = 0) remain unchanged.

   :param my_duplicate_shell:
   :type my_duplicate_shell: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.skin()
   >>> op.inputs.duplicate_shell.connect(my_duplicate_shell)
   >>> # or
   >>> op.inputs.duplicate_shell(my_duplicate_shell)

.. py:property:: add_beam

   Allows to connect add_beam input to the operator.

   If input mesh contains beam elements, output
   mesh beam elements (boolean = 1) are
   added or (boolean = 0) are ignored.

   :param my_add_beam:
   :type my_add_beam: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.skin()
   >>> op.inputs.add_beam.connect(my_add_beam)
   >>> # or
   >>> op.inputs.add_beam(my_add_beam)






