





:class:`InputsMeshProvider`
===========================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_provider.InputsMeshProvider(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   mesh_provider operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_provider()
   >>> my_time_scoping = int()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_read_cyclic = int()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> my_region_scoping = dpf.Scoping()
   >>> op.inputs.region_scoping.connect(my_region_scoping)
   >>> my_laziness = dpf.DataTree()
   >>> op.inputs.laziness.connect(my_laziness)



.. py:currentmodule:: InputsMeshProvider

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~read_cyclic`
            - Allows to connect read_cyclic input to the operator.
          * - :py:attr:`~region_scoping`
            - Allows to connect region_scoping input to the operator.
          * - :py:attr:`~laziness`
            - Allows to connect laziness input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_provider import InputsMeshProvider

Property detail
---------------

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   Optional time/frequency set id of the mesh,
   supported for adaptative meshes.

   :param my_time_scoping:
   :type my_time_scoping: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_provider()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   Result file container allowed to be kept open
   to cache data

   :param my_streams_container:
   :type my_streams_container: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_provider()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Result file path container, used if no
   streams are set

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_provider()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: read_cyclic

   Allows to connect read_cyclic input to the operator.

   If 1, cyclic symmetry is ignored. if 2,
   cyclic expansion is done (default is
   1).

   :param my_read_cyclic:
   :type my_read_cyclic: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_provider()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> # or
   >>> op.inputs.read_cyclic(my_read_cyclic)

.. py:property:: region_scoping

   Allows to connect region_scoping input to the operator.

   Region id (integer) or vector of region ids
   with one entity (vector) or region
   scoping with one id (scoping) (region
   corresponds to zone for fluid results
   or part for lsdyna results).

   :param my_region_scoping:
   :type my_region_scoping: Scoping or int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_provider()
   >>> op.inputs.region_scoping.connect(my_region_scoping)
   >>> # or
   >>> op.inputs.region_scoping(my_region_scoping)

.. py:property:: laziness

   Allows to connect laziness input to the operator.

   Configurate whether lazy evaluation can be
   performed and to what extent.
   supported attributes are:  -
   "num_named_selections"->num named
   selection to read (-1 is all, int32,
   default si -1), careful: the other
   named selections will not be
   available, use mesh_property_provider
   operator to read them. - all mesh
   property fields "mat",
   "named_selection",
   "apdl_element_type", "section"-> if
   set to 1 these properties will not be
   read and a workflow will be bounded
   to the properties to be evaluated on
   demand, with 0 they are read (default
   is 0). - "all_available_properties"
   option set to 0 will return all
   possible properties

   :param my_laziness:
   :type my_laziness: DataTree

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_provider()
   >>> op.inputs.laziness.connect(my_laziness)
   >>> # or
   >>> op.inputs.laziness(my_laziness)






