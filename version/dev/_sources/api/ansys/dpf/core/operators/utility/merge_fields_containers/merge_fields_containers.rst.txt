





:class:`merge_fields_containers`
================================

.. py:class:: ansys.dpf.core.operators.utility.merge_fields_containers.merge_fields_containers(should_merge_named_selections=None, sum_merge=None, merged_fields_support=None, merged_fields_containers_support=None, fields_containers1=None, fields_containers2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Assembles a set of fields containers into a unique one.

   :param should_merge_named_selections: For some result files (such as rst), the
                                         scoping on names selection is
                                         duplicated through all the
                                         distributed files.if this pin is
                                         false, the merging process is
                                         skipped. if it is true, this scoping
                                         is merged. default is true.
   :type should_merge_named_selections: bool, optional
   :param sum_merge: Default is false. if true, redundant
                     quantities are summed instead of
                     being ignored.
   :type sum_merge: bool, optional
   :param merged_fields_support: Already merged field support.
   :type merged_fields_support: AbstractFieldSupport, optional
   :param merged_fields_containers_support: Already merged fields containers support.
   :type merged_fields_containers_support: AbstractFieldSupport, optional
   :param fields_containers1: A vector of fields containers to merge or
                              fields containers from pin 0 to ...
   :type fields_containers1: FieldsContainer
   :param fields_containers2: A vector of fields containers to merge or
                              fields containers from pin 0 to ...
   :type fields_containers2: FieldsContainer

   :returns: **merged_fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.merge_fields_containers()

   >>> # Make input connections
   >>> my_should_merge_named_selections = bool()
   >>> op.inputs.should_merge_named_selections.connect(my_should_merge_named_selections)
   >>> my_sum_merge = bool()
   >>> op.inputs.sum_merge.connect(my_sum_merge)
   >>> my_merged_fields_support = dpf.AbstractFieldSupport()
   >>> op.inputs.merged_fields_support.connect(my_merged_fields_support)
   >>> my_merged_fields_containers_support = dpf.AbstractFieldSupport()
   >>> op.inputs.merged_fields_containers_support.connect(my_merged_fields_containers_support)
   >>> my_fields_containers1 = dpf.FieldsContainer()
   >>> op.inputs.fields_containers1.connect(my_fields_containers1)
   >>> my_fields_containers2 = dpf.FieldsContainer()
   >>> op.inputs.fields_containers2.connect(my_fields_containers2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.merge_fields_containers(
   ...     should_merge_named_selections=my_should_merge_named_selections,
   ...     sum_merge=my_sum_merge,
   ...     merged_fields_support=my_merged_fields_support,
   ...     merged_fields_containers_support=my_merged_fields_containers_support,
   ...     fields_containers1=my_fields_containers1,
   ...     fields_containers2=my_fields_containers2,
   ... )

   >>> # Get output data
   >>> result_merged_fields_container = op.outputs.merged_fields_container()




.. py:currentmodule:: merge_fields_containers

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_fields_containers import merge_fields_containers

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMergeFieldsContainers

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMergeFieldsContainers




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





