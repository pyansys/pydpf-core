





:class:`assemble_scalars_to_matrices`
=====================================

.. py:class:: ansys.dpf.core.operators.utility.assemble_scalars_to_matrices.assemble_scalars_to_matrices(xx=None, yy=None, zz=None, xy=None, yz=None, xz=None, yx=None, zy=None, zx=None, symmetrical=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Take nine scalar fields and assemble them as a 3x3 matrix field. If
   the 'symmetrical' input is set to true, only six scalar fields are
   required (xx, yy, zz, xy, xz and yz).

   :param xx:
   :type xx: Field, optional
   :param yy:
   :type yy: Field, optional
   :param zz:
   :type zz: Field, optional
   :param xy:
   :type xy: Field, optional
   :param yz:
   :type yz: Field, optional
   :param xz:
   :type xz: Field, optional
   :param yx:
   :type yx: Field, optional
   :param zy:
   :type zy: Field, optional
   :param zx:
   :type zx: Field, optional
   :param symmetrical:
   :type symmetrical: bool, optional

   :returns: **field**
   :rtype: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.assemble_scalars_to_matrices()

   >>> # Make input connections
   >>> my_xx = dpf.Field()
   >>> op.inputs.xx.connect(my_xx)
   >>> my_yy = dpf.Field()
   >>> op.inputs.yy.connect(my_yy)
   >>> my_zz = dpf.Field()
   >>> op.inputs.zz.connect(my_zz)
   >>> my_xy = dpf.Field()
   >>> op.inputs.xy.connect(my_xy)
   >>> my_yz = dpf.Field()
   >>> op.inputs.yz.connect(my_yz)
   >>> my_xz = dpf.Field()
   >>> op.inputs.xz.connect(my_xz)
   >>> my_yx = dpf.Field()
   >>> op.inputs.yx.connect(my_yx)
   >>> my_zy = dpf.Field()
   >>> op.inputs.zy.connect(my_zy)
   >>> my_zx = dpf.Field()
   >>> op.inputs.zx.connect(my_zx)
   >>> my_symmetrical = bool()
   >>> op.inputs.symmetrical.connect(my_symmetrical)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.assemble_scalars_to_matrices(
   ...     xx=my_xx,
   ...     yy=my_yy,
   ...     zz=my_zz,
   ...     xy=my_xy,
   ...     yz=my_yz,
   ...     xz=my_xz,
   ...     yx=my_yx,
   ...     zy=my_zy,
   ...     zx=my_zx,
   ...     symmetrical=my_symmetrical,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: assemble_scalars_to_matrices

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.assemble_scalars_to_matrices import assemble_scalars_to_matrices

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsAssembleScalarsToMatrices

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsAssembleScalarsToMatrices




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





