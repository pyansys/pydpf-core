





:class:`InputsApplySvd`
=======================

.. py:class:: ansys.dpf.core.operators.compression.apply_svd.InputsApplySvd(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   apply_svd operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> my_field_contaner_to_compress = dpf.FieldsContainer()
   >>> op.inputs.field_contaner_to_compress.connect(my_field_contaner_to_compress)
   >>> my_scalar_int = int()
   >>> op.inputs.scalar_int.connect(my_scalar_int)
   >>> my_scalar_double = float()
   >>> op.inputs.scalar_double.connect(my_scalar_double)
   >>> my_boolean = bool()
   >>> op.inputs.boolean.connect(my_boolean)



.. py:currentmodule:: InputsApplySvd

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field_contaner_to_compress`
            - Allows to connect field_contaner_to_compress input to the operator.
          * - :py:attr:`~scalar_int`
            - Allows to connect scalar_int input to the operator.
          * - :py:attr:`~scalar_double`
            - Allows to connect scalar_double input to the operator.
          * - :py:attr:`~boolean`
            - Allows to connect boolean input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.compression.apply_svd import InputsApplySvd

Property detail
---------------

.. py:property:: field_contaner_to_compress

   Allows to connect field_contaner_to_compress input to the operator.

   Fields container to be compressed

   :param my_field_contaner_to_compress:
   :type my_field_contaner_to_compress: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.field_contaner_to_compress.connect(my_field_contaner_to_compress)
   >>> # or
   >>> op.inputs.field_contaner_to_compress(my_field_contaner_to_compress)

.. py:property:: scalar_int

   Allows to connect scalar_int input to the operator.

   Number of vectors (r) to keep for the future
   reconstraction of the matrix a, ex.
   a[m,n]=coef[m,r]*vt[r,n], where
   coef=u*sigma

   :param my_scalar_int:
   :type my_scalar_int: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.scalar_int.connect(my_scalar_int)
   >>> # or
   >>> op.inputs.scalar_int(my_scalar_int)

.. py:property:: scalar_double

   Allows to connect scalar_double input to the operator.

   Threshold (precision) as a double, default
   value is 1e-7

   :param my_scalar_double:
   :type my_scalar_double: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.scalar_double.connect(my_scalar_double)
   >>> # or
   >>> op.inputs.scalar_double(my_scalar_double)

.. py:property:: boolean

   Allows to connect boolean input to the operator.

   Apply svd on the initial input data (true) or
   transposed (square matrix), default
   value is false

   :param my_boolean:
   :type my_boolean: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.compression.apply_svd()
   >>> op.inputs.boolean.connect(my_boolean)
   >>> # or
   >>> op.inputs.boolean(my_boolean)






