





:class:`InputsOnNamedSelection`
===============================

.. py:class:: ansys.dpf.core.operators.scoping.on_named_selection.InputsOnNamedSelection(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   on_named_selection operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_named_selection()
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_named_selection_name = str()
   >>> op.inputs.named_selection_name.connect(my_named_selection_name)
   >>> my_int_inclusive = int()
   >>> op.inputs.int_inclusive.connect(my_int_inclusive)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)



.. py:currentmodule:: InputsOnNamedSelection

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.
          * - :py:attr:`~named_selection_name`
            - Allows to connect named_selection_name input to the operator.
          * - :py:attr:`~int_inclusive`
            - Allows to connect int_inclusive input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.on_named_selection import InputsOnNamedSelection

Property detail
---------------

.. py:property:: requested_location

   Allows to connect requested_location input to the operator.

   :param my_requested_location:
   :type my_requested_location: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_named_selection()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)

.. py:property:: named_selection_name

   Allows to connect named_selection_name input to the operator.

   The string is expected to be in upper case

   :param my_named_selection_name:
   :type my_named_selection_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_named_selection()
   >>> op.inputs.named_selection_name.connect(my_named_selection_name)
   >>> # or
   >>> op.inputs.named_selection_name(my_named_selection_name)

.. py:property:: int_inclusive

   Allows to connect int_inclusive input to the operator.

   If element scoping is requested on a nodal
   named selection, if inclusive == 1
   then add all the elements adjacent to
   the nodes.if inclusive == 0, only the
   elements which have all their nodes
   in the named selection are included

   :param my_int_inclusive:
   :type my_int_inclusive: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_named_selection()
   >>> op.inputs.int_inclusive.connect(my_int_inclusive)
   >>> # or
   >>> op.inputs.int_inclusive(my_int_inclusive)

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   :param my_streams_container:
   :type my_streams_container: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_named_selection()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_named_selection()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)






