





:class:`InputsAccumulationPerScoping`
=====================================

.. py:class:: ansys.dpf.core.operators.math.accumulation_per_scoping.InputsAccumulationPerScoping(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   accumulation_per_scoping operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulation_per_scoping()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_scopings_container = dpf.ScopingsContainer()
   >>> op.inputs.scopings_container.connect(my_scopings_container)



.. py:currentmodule:: InputsAccumulationPerScoping

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~scopings_container`
            - Allows to connect scopings_container input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.accumulation_per_scoping import InputsAccumulationPerScoping

Property detail
---------------

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulation_per_scoping()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   Master scoping. all scopings in the scopings
   container will be intersected with
   this scoping.

   :param my_mesh_scoping:
   :type my_mesh_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulation_per_scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulation_per_scoping()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: scopings_container

   Allows to connect scopings_container input to the operator.

   The intersection between the of the first
   will be used.

   :param my_scopings_container:
   :type my_scopings_container: ScopingsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulation_per_scoping()
   >>> op.inputs.scopings_container.connect(my_scopings_container)
   >>> # or
   >>> op.inputs.scopings_container(my_scopings_container)






