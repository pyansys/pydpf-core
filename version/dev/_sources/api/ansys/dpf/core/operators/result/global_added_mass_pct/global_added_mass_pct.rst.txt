





:class:`global_added_mass_pct`
==============================

.. py:class:: ansys.dpf.core.operators.result.global_added_mass_pct.global_added_mass_pct(streams_container=None, data_sources=None, unit_system=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Read Global Added Mass (percentage) (LSDyna) by calling the readers
   defined by the datasources.

   :param streams_container: Result file container allowed to be kept open
                             to cache data
   :type streams_container: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set
   :type data_sources: DataSources
   :param unit_system: Unit system id (int), semicolon-separated
                       list of base unit strings (str) or
                       unitsystem instance
   :type unit_system: int or str or UnitSystem, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.global_added_mass_pct()

   >>> # Make input connections
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_unit_system = int()
   >>> op.inputs.unit_system.connect(my_unit_system)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.global_added_mass_pct(
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ...     unit_system=my_unit_system,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: global_added_mass_pct

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.global_added_mass_pct import global_added_mass_pct

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsGlobalAddedMassPct

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsGlobalAddedMassPct




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





