





:class:`InputsPrepSamplingFft`
==============================

.. py:class:: ansys.dpf.core.operators.mapping.prep_sampling_fft.InputsPrepSamplingFft(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   prep_sampling_fft operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mapping.prep_sampling_fft()
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> my_cutoff_frequency = float()
   >>> op.inputs.cutoff_frequency.connect(my_cutoff_frequency)
   >>> my_number_sampling_point = int()
   >>> op.inputs.number_sampling_point.connect(my_number_sampling_point)



.. py:currentmodule:: InputsPrepSamplingFft

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_freq_support`
            - Allows to connect time_freq_support input to the operator.
          * - :py:attr:`~cutoff_frequency`
            - Allows to connect cutoff_frequency input to the operator.
          * - :py:attr:`~number_sampling_point`
            - Allows to connect number_sampling_point input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mapping.prep_sampling_fft import InputsPrepSamplingFft

Property detail
---------------

.. py:property:: time_freq_support

   Allows to connect time_freq_support input to the operator.

   Initial time domain timefreqsupport.

   :param my_time_freq_support:
   :type my_time_freq_support: TimeFreqSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mapping.prep_sampling_fft()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> # or
   >>> op.inputs.time_freq_support(my_time_freq_support)

.. py:property:: cutoff_frequency

   Allows to connect cutoff_frequency input to the operator.

   Cutoff frequency. in this case, number of
   points is calculated computing
   (time_range * cutoff_freq * 2) and
   taking the next power of 2 (optimum
   for fft calculation).

   :param my_cutoff_frequency:
   :type my_cutoff_frequency: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mapping.prep_sampling_fft()
   >>> op.inputs.cutoff_frequency.connect(my_cutoff_frequency)
   >>> # or
   >>> op.inputs.cutoff_frequency(my_cutoff_frequency)

.. py:property:: number_sampling_point

   Allows to connect number_sampling_point input to the operator.

   For number of sampling point (calculation
   with cutoff_frequency is ignored).

   :param my_number_sampling_point:
   :type my_number_sampling_point: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mapping.prep_sampling_fft()
   >>> op.inputs.number_sampling_point.connect(my_number_sampling_point)
   >>> # or
   >>> op.inputs.number_sampling_point(my_number_sampling_point)






