





:class:`InputsPartErodedKineticEnergy`
======================================

.. py:class:: ansys.dpf.core.operators.result.part_eroded_kinetic_energy.InputsPartErodedKineticEnergy(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   part_eroded_kinetic_energy operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.part_eroded_kinetic_energy()
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_entity_scoping = dpf.Scoping()
   >>> op.inputs.entity_scoping.connect(my_entity_scoping)
   >>> my_unit_system = int()
   >>> op.inputs.unit_system.connect(my_unit_system)



.. py:currentmodule:: InputsPartErodedKineticEnergy

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~entity_scoping`
            - Allows to connect entity_scoping input to the operator.
          * - :py:attr:`~unit_system`
            - Allows to connect unit_system input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.part_eroded_kinetic_energy import InputsPartErodedKineticEnergy

Property detail
---------------

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   Result file container allowed to be kept open
   to cache data

   :param my_streams_container:
   :type my_streams_container: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.part_eroded_kinetic_energy()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Result file path container, used if no
   streams are set

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.part_eroded_kinetic_energy()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: entity_scoping

   Allows to connect entity_scoping input to the operator.

   Entity (part for matsum, interface for
   rcforc) where the result will be
   scoped

   :param my_entity_scoping:
   :type my_entity_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.part_eroded_kinetic_energy()
   >>> op.inputs.entity_scoping.connect(my_entity_scoping)
   >>> # or
   >>> op.inputs.entity_scoping(my_entity_scoping)

.. py:property:: unit_system

   Allows to connect unit_system input to the operator.

   Unit system id (int), semicolon-separated
   list of base unit strings (str) or
   unitsystem instance

   :param my_unit_system:
   :type my_unit_system: int or str or UnitSystem

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.part_eroded_kinetic_energy()
   >>> op.inputs.unit_system.connect(my_unit_system)
   >>> # or
   >>> op.inputs.unit_system(my_unit_system)






