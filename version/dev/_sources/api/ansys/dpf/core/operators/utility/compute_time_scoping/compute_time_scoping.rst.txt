





:class:`compute_time_scoping`
=============================

.. py:class:: ansys.dpf.core.operators.utility.compute_time_scoping.compute_time_scoping(time_freq_values=None, step=None, interpolation_type=None, time_freq_support=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the time frequency scoping (made of set IDs) necessary to
   interpolate on a list of time or frequencies.

   :param time_freq_values: List of frequencies or times needed. to
                            specify load steps, put a field (and
                            not a list) in input with a scoping
                            located on "timefreq_steps".
   :type time_freq_values: float or Field or TimeFreqSupport
   :param step:
   :type step: int, optional
   :param interpolation_type: 1:ramped' or 2:stepped', default is ramped
   :type interpolation_type: int, optional
   :param time_freq_support:
   :type time_freq_support: TimeFreqSupport

   :returns: * **scoping** (*Scoping*) -- Time_scoping
             * **field** (*Field*) -- Time_freq_values

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.compute_time_scoping()

   >>> # Make input connections
   >>> my_time_freq_values = float()
   >>> op.inputs.time_freq_values.connect(my_time_freq_values)
   >>> my_step = int()
   >>> op.inputs.step.connect(my_step)
   >>> my_interpolation_type = int()
   >>> op.inputs.interpolation_type.connect(my_interpolation_type)
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.compute_time_scoping(
   ...     time_freq_values=my_time_freq_values,
   ...     step=my_step,
   ...     interpolation_type=my_interpolation_type,
   ...     time_freq_support=my_time_freq_support,
   ... )

   >>> # Get output data
   >>> result_scoping = op.outputs.scoping()
   >>> result_field = op.outputs.field()




.. py:currentmodule:: compute_time_scoping

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.compute_time_scoping import compute_time_scoping

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsComputeTimeScoping

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsComputeTimeScoping




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





