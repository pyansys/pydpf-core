





:class:`InputsTimeIntegration`
==============================

.. py:class:: ansys.dpf.core.operators.math.time_integration.InputsTimeIntegration(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   time_integration operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_resample_output = bool()
   >>> op.inputs.resample_output.connect(my_resample_output)
   >>> my_absolute_error = float()
   >>> op.inputs.absolute_error.connect(my_absolute_error)
   >>> my_minimum_step_size = float()
   >>> op.inputs.minimum_step_size.connect(my_minimum_step_size)
   >>> my_integration_constant = float()
   >>> op.inputs.integration_constant.connect(my_integration_constant)



.. py:currentmodule:: InputsTimeIntegration

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field`
            - Allows to connect field input to the operator.
          * - :py:attr:`~resample_output`
            - Allows to connect resample_output input to the operator.
          * - :py:attr:`~absolute_error`
            - Allows to connect absolute_error input to the operator.
          * - :py:attr:`~minimum_step_size`
            - Allows to connect minimum_step_size input to the operator.
          * - :py:attr:`~integration_constant`
            - Allows to connect integration_constant input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.time_integration import InputsTimeIntegration

Property detail
---------------

.. py:property:: field

   Allows to connect field input to the operator.

   Field

   :param my_field:
   :type my_field: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.field.connect(my_field)
   >>> # or
   >>> op.inputs.field(my_field)

.. py:property:: resample_output

   Allows to connect resample_output input to the operator.

   Resample the output

   :param my_resample_output:
   :type my_resample_output: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.resample_output.connect(my_resample_output)
   >>> # or
   >>> op.inputs.resample_output(my_resample_output)

.. py:property:: absolute_error

   Allows to connect absolute_error input to the operator.

   Absolute error for the resampling

   :param my_absolute_error:
   :type my_absolute_error: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.absolute_error.connect(my_absolute_error)
   >>> # or
   >>> op.inputs.absolute_error(my_absolute_error)

.. py:property:: minimum_step_size

   Allows to connect minimum_step_size input to the operator.

   Minimum time step size for the resamplig

   :param my_minimum_step_size:
   :type my_minimum_step_size: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.minimum_step_size.connect(my_minimum_step_size)
   >>> # or
   >>> op.inputs.minimum_step_size(my_minimum_step_size)

.. py:property:: integration_constant

   Allows to connect integration_constant input to the operator.

   Constant to be added to the integrated field

   :param my_integration_constant:
   :type my_integration_constant: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.time_integration()
   >>> op.inputs.integration_constant.connect(my_integration_constant)
   >>> # or
   >>> op.inputs.integration_constant(my_integration_constant)






