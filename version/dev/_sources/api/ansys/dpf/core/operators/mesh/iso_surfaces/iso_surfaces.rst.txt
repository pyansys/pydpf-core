





:class:`iso_surfaces`
=====================

.. py:class:: ansys.dpf.core.operators.mesh.iso_surfaces.iso_surfaces(field=None, num_surfaces=None, mesh=None, slice_surfaces=None, vector_iso_values=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Extract multiple iso-contours from mesh_cut operator and set it into a
   meshes container. If pin 1 is provided, 'num_surfaces' iso-
   contours will be computed, ranging from 'min_value' to 'max_value'
   linearly. If pin 4 is provided, the iso-values are the one set by
   the user. The iso-values are stored into a FieldsContainer.

   :param field: Field containing the values for the iso-
                 surface computation. the mesh can be
                 retrieved from this field's support
                 or through pin 2.
   :type field: Field
   :param num_surfaces: If provided, iso_values are linearly computed
                        between the min and the max of the
                        field of results. if not, iso_values
                        must be provided by the user through
                        pin 4
   :type num_surfaces: int, optional
   :param mesh: Mesh to compute the iso-surface from. used
                when not given through the support of
                the field in pin 0.
   :type mesh: MeshedRegion, optional
   :param slice_surfaces: True: slicing will also take into account
                          shell and skin elements. false:
                          slicing will ignore shell and skin
                          elements. the default is true.
   :type slice_surfaces: bool
   :param vector_iso_values: If provided, user defined iso_values to
                             compute. if not provided, iso_values
                             are linearly compute between the min
                             and the max of the field of results.
   :type vector_iso_values: optional

   :returns: * **meshes** (*MeshesContainer*)
             * **fields_container** (*FieldsContainer*)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.iso_surfaces()

   >>> # Make input connections
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_num_surfaces = int()
   >>> op.inputs.num_surfaces.connect(my_num_surfaces)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_slice_surfaces = bool()
   >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)
   >>> my_vector_iso_values = dpf.()
   >>> op.inputs.vector_iso_values.connect(my_vector_iso_values)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.iso_surfaces(
   ...     field=my_field,
   ...     num_surfaces=my_num_surfaces,
   ...     mesh=my_mesh,
   ...     slice_surfaces=my_slice_surfaces,
   ...     vector_iso_values=my_vector_iso_values,
   ... )

   >>> # Get output data
   >>> result_meshes = op.outputs.meshes()
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: iso_surfaces

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.iso_surfaces import iso_surfaces

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsIsoSurfaces

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsIsoSurfaces




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





