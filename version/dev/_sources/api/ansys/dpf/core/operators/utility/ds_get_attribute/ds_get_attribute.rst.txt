





:class:`ds_get_attribute`
=========================

.. py:class:: ansys.dpf.core.operators.utility.ds_get_attribute.ds_get_attribute(data_sources=None, property_name=None, property_index=None, property_key=None, property_result_key=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   A DataSources in pin 0 and a property name (string) in pin 1 are
   expected in input. An index refering to the property can also be
   provided.

   :param data_sources:
   :type data_sources: DataSources
   :param property_name: Accepted inputs are: 'file_path' (returns
                         string), 'result_file_name' (returns
                         string), 'domain_file_path' (returns
                         string), 'domain_result_file_name'
                         (returns string), 'num_keys' (returns
                         int), num_result_key (returns int),
                         num_file_path (returns int),
                         'num_result_file_path' (returns int),
                         'key_by_index' (returns string),
                         'result_key_by_index' (returns
                         string), 'path_by_index' (returns
                         string), 'path_key_by_index' (returns
                         string).
   :type property_name: str
   :param property_index: Index for the property. must be set for
                          'domain_file_path',
                          'domain_result_file_name'
                          'key_by_index',
                          'result_key_by_index',
                          'path_by_index' and
                          'path_key_by_index' properties.
   :type property_index: int, optional
   :param property_key: Key to look for. must be set for 'file_path'
                        and 'domain_file_path' properties.
   :type property_key: str, optional
   :param property_result_key: Result key to look for. can be used for
                               'file_path', 'result_file_name',
                               'domain_file_path' and
                               'domain_result_file_name'.
   :type property_result_key: str, optional

   :returns: **property** -- Property value.
   :rtype: str or int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.ds_get_attribute()

   >>> # Make input connections
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_index = int()
   >>> op.inputs.property_index.connect(my_property_index)
   >>> my_property_key = str()
   >>> op.inputs.property_key.connect(my_property_key)
   >>> my_property_result_key = str()
   >>> op.inputs.property_result_key.connect(my_property_result_key)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.ds_get_attribute(
   ...     data_sources=my_data_sources,
   ...     property_name=my_property_name,
   ...     property_index=my_property_index,
   ...     property_key=my_property_key,
   ...     property_result_key=my_property_result_key,
   ... )

   >>> # Get output data
   >>> result_property = op.outputs.property()




.. py:currentmodule:: ds_get_attribute

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.ds_get_attribute import ds_get_attribute

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsDsGetAttribute

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsDsGetAttribute




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





