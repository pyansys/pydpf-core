





:class:`merge_time_freq_supports`
=================================

.. py:class:: ansys.dpf.core.operators.utility.merge_time_freq_supports.merge_time_freq_supports(time_freq_supports1=None, time_freq_supports2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Assembles a set of time/frequency supports into a unique one.

   :param time_freq_supports1: A vector of time/frequency supports to merge
                               or time/frequency supports from pin 0
                               to ...
   :type time_freq_supports1: TimeFreqSupport
   :param time_freq_supports2: A vector of time/frequency supports to merge
                               or time/frequency supports from pin 0
                               to ...
   :type time_freq_supports2: TimeFreqSupport

   :returns: **merged_support**
   :rtype: TimeFreqSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.merge_time_freq_supports()

   >>> # Make input connections
   >>> my_time_freq_supports1 = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_supports1.connect(my_time_freq_supports1)
   >>> my_time_freq_supports2 = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_supports2.connect(my_time_freq_supports2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.merge_time_freq_supports(
   ...     time_freq_supports1=my_time_freq_supports1,
   ...     time_freq_supports2=my_time_freq_supports2,
   ... )

   >>> # Get output data
   >>> result_merged_support = op.outputs.merged_support()




.. py:currentmodule:: merge_time_freq_supports

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_time_freq_supports import merge_time_freq_supports

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMergeTimeFreqSupports

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMergeTimeFreqSupports




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





