





:class:`extract_sub_fc`
=======================

.. py:class:: ansys.dpf.core.operators.utility.extract_sub_fc.extract_sub_fc(fields_container=None, label_space=None, collapse_labels=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Creates a new fields container with all the fields corresponding to
   the label space in input 1. If pin 1 is not defined, pin 0 input
   will be copied to the output.

   :param fields_container: Fields_container
   :type fields_container: FieldsContainer
   :param label_space: Label space, or scoping defining the label
                       space (scoping location), values to
                       keep (scoping ids)
   :type label_space: dict or Scoping, optional
   :param collapse_labels: If set to true (default) the input label
                           space (scoping location) is
                           suppressed from the output fields
                           container, otherwise, label space is
                           kept.
   :type collapse_labels: bool, optional

   :returns: **fields_container** -- Fields_container
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.extract_sub_fc()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_label_space = dict()
   >>> op.inputs.label_space.connect(my_label_space)
   >>> my_collapse_labels = bool()
   >>> op.inputs.collapse_labels.connect(my_collapse_labels)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.extract_sub_fc(
   ...     fields_container=my_fields_container,
   ...     label_space=my_label_space,
   ...     collapse_labels=my_collapse_labels,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: extract_sub_fc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.extract_sub_fc import extract_sub_fc

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsExtractSubFc

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsExtractSubFc




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





