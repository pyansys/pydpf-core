





:class:`InputsFromMesh`
=======================

.. py:class:: ansys.dpf.core.operators.scoping.from_mesh.InputsFromMesh(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   from_mesh operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.from_mesh()
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)



.. py:currentmodule:: InputsFromMesh

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.from_mesh import InputsFromMesh

Property detail
---------------

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.from_mesh()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: requested_location

   Allows to connect requested_location input to the operator.

   If nothing the operator returns the nodes
   scoping, possible locations are:
   nodal(default) or elemental

   :param my_requested_location:
   :type my_requested_location: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.from_mesh()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)






