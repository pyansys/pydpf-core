





:class:`InputsBeamAxialPlasticStrain`
=====================================

.. py:class:: ansys.dpf.core.operators.result.beam_axial_plastic_strain.InputsBeamAxialPlasticStrain(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   beam_axial_plastic_strain operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.beam_axial_plastic_strain()
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.ScopingsContainer()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_integration_point = int()
   >>> op.inputs.integration_point.connect(my_integration_point)
   >>> my_unit_system = int()
   >>> op.inputs.unit_system.connect(my_unit_system)



.. py:currentmodule:: InputsBeamAxialPlasticStrain

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~integration_point`
            - Allows to connect integration_point input to the operator.
          * - :py:attr:`~unit_system`
            - Allows to connect unit_system input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.beam_axial_plastic_strain import InputsBeamAxialPlasticStrain

Property detail
---------------

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   Time/freq values (use doubles or field),
   time/freq set ids (use ints or
   scoping) or time/freq step ids (use
   scoping with timefreq_steps location)
   required in output. to specify
   time/freq values at specific load
   steps, put a field (and not a list)
   in input with a scoping located on
   "timefreq_steps". linear time freq
   intrapolation is performed if the
   values are not in the result files
   and the data at the max time or freq
   is taken when time/freqs are higher
   than available time/freqs in result
   files.

   :param my_time_scoping:
   :type my_time_scoping: Scoping or int or float or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.beam_axial_plastic_strain()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   Elements scoping required in output.

   :param my_mesh_scoping:
   :type my_mesh_scoping: ScopingsContainer or Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.beam_axial_plastic_strain()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   Result file container allowed to be kept open
   to cache data

   :param my_streams_container:
   :type my_streams_container: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.beam_axial_plastic_strain()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Result file path container, used if no
   streams are set

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.beam_axial_plastic_strain()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: integration_point

   Allows to connect integration_point input to the operator.

   Integration point where the result will be
   read from. default value: 0 (first
   integration point).

   :param my_integration_point:
   :type my_integration_point: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.beam_axial_plastic_strain()
   >>> op.inputs.integration_point.connect(my_integration_point)
   >>> # or
   >>> op.inputs.integration_point(my_integration_point)

.. py:property:: unit_system

   Allows to connect unit_system input to the operator.

   Unit system id (int), semicolon-separated
   list of base unit strings (str) or
   unitsystem instance

   :param my_unit_system:
   :type my_unit_system: int or str or UnitSystem

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.beam_axial_plastic_strain()
   >>> op.inputs.unit_system.connect(my_unit_system)
   >>> # or
   >>> op.inputs.unit_system(my_unit_system)






