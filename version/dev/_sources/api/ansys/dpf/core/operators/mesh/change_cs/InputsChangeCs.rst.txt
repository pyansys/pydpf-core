





:class:`InputsChangeCs`
=======================

.. py:class:: ansys.dpf.core.operators.mesh.change_cs.InputsChangeCs(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   change_cs operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.change_cs()
   >>> my_meshes = dpf.MeshedRegion()
   >>> op.inputs.meshes.connect(my_meshes)
   >>> my_coordinate_system = dpf.Field()
   >>> op.inputs.coordinate_system.connect(my_coordinate_system)



.. py:currentmodule:: InputsChangeCs

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~meshes`
            - Allows to connect meshes input to the operator.
          * - :py:attr:`~coordinate_system`
            - Allows to connect coordinate_system input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.change_cs import InputsChangeCs

Property detail
---------------

.. py:property:: meshes

   Allows to connect meshes input to the operator.

   :param my_meshes:
   :type my_meshes: MeshedRegion or MeshesContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.change_cs()
   >>> op.inputs.meshes.connect(my_meshes)
   >>> # or
   >>> op.inputs.meshes(my_meshes)

.. py:property:: coordinate_system

   Allows to connect coordinate_system input to the operator.

   3-3 rotation matrix + 3 translations (x, y,
   z)

   :param my_coordinate_system:
   :type my_coordinate_system: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.change_cs()
   >>> op.inputs.coordinate_system.connect(my_coordinate_system)
   >>> # or
   >>> op.inputs.coordinate_system(my_coordinate_system)






