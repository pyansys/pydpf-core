





:class:`beam_properties`
========================

.. py:class:: ansys.dpf.core.operators.mesh.beam_properties.beam_properties(streams=None, data_sources=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Reads the beam's properties from the result files contained in the
   streams or data sources.

   :param streams: Result file container allowed to be kept open
                   to cache data.
   :type streams: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set.
   :type data_sources: DataSources

   :returns: * **mesh_out** (*MeshedRegion*) -- This mesh updates a new map containing a
               field of the beam's properties if
               there is at least one beam in mesh.
             * **field_type_section_id** (*Field*) -- This field contains the section id of beams.
               1:rec; 3:csolid, 4:ctube, 5:chan,
               6:z, 7:l, 8:i, 9:t, 11:hats, 12:hrec.
             * **field_area** (*Field*) -- This field contains the area of beams.
             * **field_moment_inertia** (*Field*) -- This field contains the inertia moment of
               beams. iyy, iyz, izz.
             * **field_geometry** (*Field*) -- This field contains the geometry of beams.
               rec:b,h. csolid:ri. ctube:ri, re.
               chan:w1,w2,w3,t1,t2,t3.
               z:w1,w2,w3,t1,t2,t3. l:w1,w2,t1,t2.
               i:w1,w2,w3,t1,t2,t3. t:w1,w2,t1,t2.
               hats: w1,w2,w3,w4,t1,t2,t3,t4.
               hrec:w1,w2,t1,t2,t3,t4.
             * **field_young_modulus** (*Field*) -- This field contains the young's modulus of
               beams.
             * **field_poisson_ratio** (*Field*) -- This field contains the poisson's ratio of
               beams.
             * **field_shear_modulus** (*Field*) -- This field contains the shear modulus of
               beams.
             * **field_beam_length** (*Field*) -- This field contains the length of beams.
             * **field_torsion_constant** (*Field*) -- This field contains the torsion constant of
               beams.
             * **field_warping_constant** (*Field*) -- This field contains the warping constant of
               beams.
             * **field_offset_type** (*Field*) -- This field contains offset type of beams.
             * **field_offset_y** (*Field*) -- This field contains offset y of beams.
             * **field_offset_z** (*Field*) -- This field contains offset z of beams.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.beam_properties()

   >>> # Make input connections
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.beam_properties(
   ...     streams=my_streams,
   ...     data_sources=my_data_sources,
   ... )

   >>> # Get output data
   >>> result_mesh_out = op.outputs.mesh_out()
   >>> result_field_type_section_id = op.outputs.field_type_section_id()
   >>> result_field_area = op.outputs.field_area()
   >>> result_field_moment_inertia = op.outputs.field_moment_inertia()
   >>> result_field_geometry = op.outputs.field_geometry()
   >>> result_field_young_modulus = op.outputs.field_young_modulus()
   >>> result_field_poisson_ratio = op.outputs.field_poisson_ratio()
   >>> result_field_shear_modulus = op.outputs.field_shear_modulus()
   >>> result_field_beam_length = op.outputs.field_beam_length()
   >>> result_field_torsion_constant = op.outputs.field_torsion_constant()
   >>> result_field_warping_constant = op.outputs.field_warping_constant()
   >>> result_field_offset_type = op.outputs.field_offset_type()
   >>> result_field_offset_y = op.outputs.field_offset_y()
   >>> result_field_offset_z = op.outputs.field_offset_z()




.. py:currentmodule:: beam_properties

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.beam_properties import beam_properties

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsBeamProperties

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsBeamProperties




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





