





:class:`InputsExportSymbolicWorkflow`
=====================================

.. py:class:: ansys.dpf.core.operators.serialization.export_symbolic_workflow.InputsExportSymbolicWorkflow(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   export_symbolic_workflow operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.export_symbolic_workflow()
   >>> my_workflow = dpf.Workflow()
   >>> op.inputs.workflow.connect(my_workflow)
   >>> my_path = str()
   >>> op.inputs.path.connect(my_path)
   >>> my_format = int()
   >>> op.inputs.format.connect(my_format)
   >>> my_options = int()
   >>> op.inputs.options.connect(my_options)



.. py:currentmodule:: InputsExportSymbolicWorkflow

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~workflow`
            - Allows to connect workflow input to the operator.
          * - :py:attr:`~path`
            - Allows to connect path input to the operator.
          * - :py:attr:`~format`
            - Allows to connect format input to the operator.
          * - :py:attr:`~options`
            - Allows to connect options input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.export_symbolic_workflow import InputsExportSymbolicWorkflow

Property detail
---------------

.. py:property:: workflow

   Allows to connect workflow input to the operator.

   :param my_workflow:
   :type my_workflow: Workflow

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.export_symbolic_workflow()
   >>> op.inputs.workflow.connect(my_workflow)
   >>> # or
   >>> op.inputs.workflow(my_workflow)

.. py:property:: path

   Allows to connect path input to the operator.

   :param my_path:
   :type my_path: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.export_symbolic_workflow()
   >>> op.inputs.path.connect(my_path)
   >>> # or
   >>> op.inputs.path(my_path)

.. py:property:: format

   Allows to connect format input to the operator.

   0 is ascii format and 1 is binary, default is
   0.

   :param my_format:
   :type my_format: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.export_symbolic_workflow()
   >>> op.inputs.format.connect(my_format)
   >>> # or
   >>> op.inputs.format(my_format)

.. py:property:: options

   Allows to connect options input to the operator.

   1 copies connections with its data, 2
   forwards named inputs and outputs
   names, 7 copies connections of named
   inputs and ouputs with their data.
   default is 7.

   :param my_options:
   :type my_options: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.export_symbolic_workflow()
   >>> op.inputs.options.connect(my_options)
   >>> # or
   >>> op.inputs.options(my_options)






