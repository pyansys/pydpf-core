





:class:`InputsMakeForEachRange`
===============================

.. py:class:: ansys.dpf.core.operators.utility.make_for_each_range.InputsMakeForEachRange(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   make_for_each_range operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> my_try_generate_iterable = bool()
   >>> op.inputs.try_generate_iterable.connect(my_try_generate_iterable)
   >>> my_iterable = dpf.()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> my_operator_to_iterate = dpf.Operator()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> my_pin_index = int()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> my_valueA = dpf.()
   >>> op.inputs.valueA.connect(my_valueA)
   >>> my_valueB = dpf.()
   >>> op.inputs.valueB.connect(my_valueB)
   >>> my_valueC1 = dpf.()
   >>> op.inputs.valueC1.connect(my_valueC1)
   >>> my_valueC2 = dpf.()
   >>> op.inputs.valueC2.connect(my_valueC2)



.. py:currentmodule:: InputsMakeForEachRange

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~try_generate_iterable`
            - Allows to connect try_generate_iterable input to the operator.
          * - :py:attr:`~iterable`
            - Allows to connect iterable input to the operator.
          * - :py:attr:`~operator_to_iterate`
            - Allows to connect operator_to_iterate input to the operator.
          * - :py:attr:`~pin_index`
            - Allows to connect pin_index input to the operator.
          * - :py:attr:`~valueA`
            - Allows to connect valueA input to the operator.
          * - :py:attr:`~valueB`
            - Allows to connect valueB input to the operator.
          * - :py:attr:`~valueC1`
            - Allows to connect valueC1 input to the operator.
          * - :py:attr:`~valueC2`
            - Allows to connect valueC2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.make_for_each_range import InputsMakeForEachRange

Property detail
---------------

.. py:property:: try_generate_iterable

   Allows to connect try_generate_iterable input to the operator.

   If true, already iterable values connected in
   pin 3 like vectors, scoping,
   timefreqsupport, containers and
   datasources are split to iterate on
   it (default is true)

   :param my_try_generate_iterable:
   :type my_try_generate_iterable: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.try_generate_iterable.connect(my_try_generate_iterable)
   >>> # or
   >>> op.inputs.try_generate_iterable(my_try_generate_iterable)

.. py:property:: iterable

   Allows to connect iterable input to the operator.

   Iterable object, generated by
   make_for_each_range oeprator, that
   can be combined with the one
   currently generated.

   :param my_iterable:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> # or
   >>> op.inputs.iterable(my_iterable)

.. py:property:: operator_to_iterate

   Allows to connect operator_to_iterate input to the operator.

   Operator that must be reconnected with the
   range values.

   :param my_operator_to_iterate:
   :type my_operator_to_iterate: Operator

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> # or
   >>> op.inputs.operator_to_iterate(my_operator_to_iterate)

.. py:property:: pin_index

   Allows to connect pin_index input to the operator.

   :param my_pin_index:
   :type my_pin_index: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> # or
   >>> op.inputs.pin_index(my_pin_index)

.. py:property:: valueA

   Allows to connect valueA input to the operator.

   :param my_valueA:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.valueA.connect(my_valueA)
   >>> # or
   >>> op.inputs.valueA(my_valueA)

.. py:property:: valueB

   Allows to connect valueB input to the operator.

   :param my_valueB:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.valueB.connect(my_valueB)
   >>> # or
   >>> op.inputs.valueB(my_valueB)

.. py:property:: valueC1

   Allows to connect valueC1 input to the operator.

   :param my_valueC1:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.valueC1.connect(my_valueC1)
   >>> # or
   >>> op.inputs.valueC1(my_valueC1)

.. py:property:: valueC2

   Allows to connect valueC2 input to the operator.

   :param my_valueC2:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_for_each_range()
   >>> op.inputs.valueC2.connect(my_valueC2)
   >>> # or
   >>> op.inputs.valueC2(my_valueC2)






