





:class:`force_summation`
========================

.. py:class:: ansys.dpf.core.operators.averaging.force_summation.force_summation(time_scoping=None, nodal_scoping=None, elemental_scoping=None, data_sources=None, force_type=None, spoint=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the sum of elemental forces contribution on a set of nodes in
   Global Coordinate System. Equivalent to MAPDL FSUM & NFORCE
   commands. Supports Static, Transient, Modal & Harmonic analysis
   for thermal and structural degrees of freedom.

   :param time_scoping: Default = all time steps
   :type time_scoping: Scoping, optional
   :param nodal_scoping: Nodal scoping. set of nodes in which
                         elemental contribution forces will be
                         accumulated (default = all nodes)
   :type nodal_scoping: Scoping, optional
   :param elemental_scoping: Elemental scoping. set of elements
                             contributing to the force calcuation.
                             (default = all elements)
   :type elemental_scoping: Scoping, optional
   :param data_sources:
   :type data_sources: DataSources
   :param force_type: Type of force to be processed (0 - default:
                      total forces (static, damping, and
                      inertia)., 1: static forces, 2:
                      damping forces, 3: inertia forces)
   :type force_type: int, optional
   :param spoint: Coordinate field of a point for moment
                  summations. defaults to (0,0,0).
   :type spoint: Field, optional

   :returns: * **force_accumulation** (*FieldsContainer*)
             * **moment_accumulation** (*FieldsContainer*)
             * **heat_accumulation** (*FieldsContainer*)
             * **forces_on_nodes** (*FieldsContainer*)
             * **moments_on_nodes** (*FieldsContainer*)
             * **heats_on_nodes** (*FieldsContainer*)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.averaging.force_summation()

   >>> # Make input connections
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_nodal_scoping = dpf.Scoping()
   >>> op.inputs.nodal_scoping.connect(my_nodal_scoping)
   >>> my_elemental_scoping = dpf.Scoping()
   >>> op.inputs.elemental_scoping.connect(my_elemental_scoping)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_force_type = int()
   >>> op.inputs.force_type.connect(my_force_type)
   >>> my_spoint = dpf.Field()
   >>> op.inputs.spoint.connect(my_spoint)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.averaging.force_summation(
   ...     time_scoping=my_time_scoping,
   ...     nodal_scoping=my_nodal_scoping,
   ...     elemental_scoping=my_elemental_scoping,
   ...     data_sources=my_data_sources,
   ...     force_type=my_force_type,
   ...     spoint=my_spoint,
   ... )

   >>> # Get output data
   >>> result_force_accumulation = op.outputs.force_accumulation()
   >>> result_moment_accumulation = op.outputs.moment_accumulation()
   >>> result_heat_accumulation = op.outputs.heat_accumulation()
   >>> result_forces_on_nodes = op.outputs.forces_on_nodes()
   >>> result_moments_on_nodes = op.outputs.moments_on_nodes()
   >>> result_heats_on_nodes = op.outputs.heats_on_nodes()




.. py:currentmodule:: force_summation

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.force_summation import force_summation

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsForceSummation

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsForceSummation




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





