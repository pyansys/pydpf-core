





:class:`merge_supports`
=======================

.. py:class:: ansys.dpf.core.operators.utility.merge_supports.merge_supports(should_merge_named_selections=None, supports1=None, supports2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Assembles a set of supports into a unique one.

   :param should_merge_named_selections: For some result files (such as rst), the
                                         scoping on names selection is
                                         duplicated through all the
                                         distributed files.if this pin is
                                         false, the merging process is
                                         skipped. if it is true, this scoping
                                         is merged. default is true.
   :type should_merge_named_selections: bool, optional
   :param supports1: A vector of supports to merge or supports
                     from pin 0 to ...
   :type supports1: AbstractFieldSupport
   :param supports2: A vector of supports to merge or supports
                     from pin 0 to ...
   :type supports2: AbstractFieldSupport

   :returns: **merged_support**
   :rtype: AbstractFieldSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.merge_supports()

   >>> # Make input connections
   >>> my_should_merge_named_selections = bool()
   >>> op.inputs.should_merge_named_selections.connect(my_should_merge_named_selections)
   >>> my_supports1 = dpf.AbstractFieldSupport()
   >>> op.inputs.supports1.connect(my_supports1)
   >>> my_supports2 = dpf.AbstractFieldSupport()
   >>> op.inputs.supports2.connect(my_supports2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.merge_supports(
   ...     should_merge_named_selections=my_should_merge_named_selections,
   ...     supports1=my_supports1,
   ...     supports2=my_supports2,
   ... )

   >>> # Get output data
   >>> result_merged_support = op.outputs.merged_support()




.. py:currentmodule:: merge_supports

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.merge_supports import merge_supports

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMergeSupports

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMergeSupports




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





