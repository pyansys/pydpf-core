





:class:`InputsAccumulate`
=========================

.. py:class:: ansys.dpf.core.operators.math.accumulate.InputsAccumulate(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   accumulate operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulate()
   >>> my_fieldA = dpf.Field()
   >>> op.inputs.fieldA.connect(my_fieldA)
   >>> my_ponderation = dpf.Field()
   >>> op.inputs.ponderation.connect(my_ponderation)
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)



.. py:currentmodule:: InputsAccumulate

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fieldA`
            - Allows to connect fieldA input to the operator.
          * - :py:attr:`~ponderation`
            - Allows to connect ponderation input to the operator.
          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.accumulate import InputsAccumulate

Property detail
---------------

.. py:property:: fieldA

   Allows to connect fieldA input to the operator.

   Field or fields container with only one field
   is expected

   :param my_fieldA:
   :type my_fieldA: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulate()
   >>> op.inputs.fieldA.connect(my_fieldA)
   >>> # or
   >>> op.inputs.fieldA(my_fieldA)

.. py:property:: ponderation

   Allows to connect ponderation input to the operator.

   Field containing weights, one weight per
   entity

   :param my_ponderation:
   :type my_ponderation: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulate()
   >>> op.inputs.ponderation.connect(my_ponderation)
   >>> # or
   >>> op.inputs.ponderation(my_ponderation)

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   Time_scoping

   :param my_time_scoping:
   :type my_time_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.math.accumulate()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)






