





:class:`beam_axial_plastic_strain`
==================================

.. py:class:: ansys.dpf.core.operators.result.beam_axial_plastic_strain.beam_axial_plastic_strain(time_scoping=None, mesh_scoping=None, streams_container=None, data_sources=None, integration_point=None, unit_system=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Read Beam Axial Plastic strain (LSDyna) by calling the readers defined
   by the datasources.

   :param time_scoping: Time/freq values (use doubles or field),
                        time/freq set ids (use ints or
                        scoping) or time/freq step ids (use
                        scoping with timefreq_steps location)
                        required in output. to specify
                        time/freq values at specific load
                        steps, put a field (and not a list)
                        in input with a scoping located on
                        "timefreq_steps". linear time freq
                        intrapolation is performed if the
                        values are not in the result files
                        and the data at the max time or freq
                        is taken when time/freqs are higher
                        than available time/freqs in result
                        files.
   :type time_scoping: Scoping or int or float or Field, optional
   :param mesh_scoping: Elements scoping required in output.
   :type mesh_scoping: ScopingsContainer or Scoping, optional
   :param streams_container: Result file container allowed to be kept open
                             to cache data
   :type streams_container: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set
   :type data_sources: DataSources
   :param integration_point: Integration point where the result will be
                             read from. default value: 0 (first
                             integration point).
   :type integration_point: int, optional
   :param unit_system: Unit system id (int), semicolon-separated
                       list of base unit strings (str) or
                       unitsystem instance
   :type unit_system: int or str or UnitSystem, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.beam_axial_plastic_strain()

   >>> # Make input connections
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.ScopingsContainer()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_integration_point = int()
   >>> op.inputs.integration_point.connect(my_integration_point)
   >>> my_unit_system = int()
   >>> op.inputs.unit_system.connect(my_unit_system)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.beam_axial_plastic_strain(
   ...     time_scoping=my_time_scoping,
   ...     mesh_scoping=my_mesh_scoping,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ...     integration_point=my_integration_point,
   ...     unit_system=my_unit_system,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: beam_axial_plastic_strain

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.beam_axial_plastic_strain import beam_axial_plastic_strain

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsBeamAxialPlasticStrain

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsBeamAxialPlasticStrain




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





