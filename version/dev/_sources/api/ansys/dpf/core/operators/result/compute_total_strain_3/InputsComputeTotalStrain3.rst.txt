





:class:`InputsComputeTotalStrain3`
==================================

.. py:class:: ansys.dpf.core.operators.result.compute_total_strain_3.InputsComputeTotalStrain3(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   compute_total_strain_3 operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_extrapolate = int()
   >>> op.inputs.extrapolate.connect(my_extrapolate)
   >>> my_nonlinear = int()
   >>> op.inputs.nonlinear.connect(my_nonlinear)
   >>> my_abstract_meshed_region = dpf.MeshedRegion()
   >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_displacement = dpf.FieldsContainer()
   >>> op.inputs.displacement.connect(my_displacement)



.. py:currentmodule:: InputsComputeTotalStrain3

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~scoping`
            - Allows to connect scoping input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~extrapolate`
            - Allows to connect extrapolate input to the operator.
          * - :py:attr:`~nonlinear`
            - Allows to connect nonlinear input to the operator.
          * - :py:attr:`~abstract_meshed_region`
            - Allows to connect abstract_meshed_region input to the operator.
          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.
          * - :py:attr:`~displacement`
            - Allows to connect displacement input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.compute_total_strain_3 import InputsComputeTotalStrain3

Property detail
---------------

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   Time/freq values (use doubles or field),
   time/freq set ids (use ints or
   scoping) or time/freq step ids (use
   scoping with timefreq_steps location)
   required in output. to specify
   time/freq values at specific load
   steps, put a field (and not a list)
   in input with a scoping located on
   "timefreq_steps". linear time freq
   intrapolation is performed if the
   values are not in the result files
   and the data at the max time or freq
   is taken when time/freqs are higher
   than available time/freqs in result
   files.. will only be used if no
   displacement input is given (will be
   applied on displacement operator).

   :param my_time_scoping:
   :type my_time_scoping: Scoping or int or float or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: scoping

   Allows to connect scoping input to the operator.

   The element scoping on which the result is
   computed.

   :param my_scoping:
   :type my_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> # or
   >>> op.inputs.scoping(my_scoping)

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   Optional if a mesh or a data_sources have
   been connected. required if no
   displacement input have been
   connected.

   :param my_streams_container:
   :type my_streams_container: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Optional if a mesh or a streams_container
   have been connected, or if the
   displacement's field has a mesh
   support. required if no displacement
   input have been connected.

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: extrapolate

   Allows to connect extrapolate input to the operator.

   Whether to extrapolate the data from the
   integration points to the nodes.

   :param my_extrapolate:
   :type my_extrapolate: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.extrapolate.connect(my_extrapolate)
   >>> # or
   >>> op.inputs.extrapolate(my_extrapolate)

.. py:property:: nonlinear

   Allows to connect nonlinear input to the operator.

   Whether to use nonlinear geometry or
   nonlinear material (1 = large strain,
   2 = hyperelasticity).

   :param my_nonlinear:
   :type my_nonlinear: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.nonlinear.connect(my_nonlinear)
   >>> # or
   >>> op.inputs.nonlinear(my_nonlinear)

.. py:property:: abstract_meshed_region

   Allows to connect abstract_meshed_region input to the operator.

   The underlying mesh. optional if a
   data_sources or a streams_container
   have been connected, or if the
   displacement's field has a mesh
   support.

   :param my_abstract_meshed_region:
   :type my_abstract_meshed_region: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
   >>> # or
   >>> op.inputs.abstract_meshed_region(my_abstract_meshed_region)

.. py:property:: requested_location

   Allows to connect requested_location input to the operator.

   Average the elemental nodal result to the
   requested location.

   :param my_requested_location:
   :type my_requested_location: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)

.. py:property:: displacement

   Allows to connect displacement input to the operator.

   Field/or fields container containing only the
   displacement field (nodal). if none
   specified, read displacements from
   result file using the data_sources.

   :param my_displacement:
   :type my_displacement: FieldsContainer or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.compute_total_strain_3()
   >>> op.inputs.displacement.connect(my_displacement)
   >>> # or
   >>> op.inputs.displacement(my_displacement)






