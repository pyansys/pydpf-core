





:class:`filtering_max_over_time`
================================

.. py:class:: ansys.dpf.core.operators.filter.filtering_max_over_time.filtering_max_over_time(invariant_fc_operator=None, output_pin=None, list_of_results=None, threshold=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Creates a filtering workflow that will filter results based on a
   threshold of a selected invariant.

   :param invariant_fc_operator: Name of the invariant operator to be used to
                                 calculate filter (available: eqv_fc,
                                 invariants_deriv_fc, invariants_fc).
   :type invariant_fc_operator: str
   :param output_pin: Output pin of the invariant operator. default
                      = 0.
   :type output_pin: int, optional
   :param list_of_results: If no result is given, filter will be applied
                           on stresses and strains
   :type list_of_results: str, optional
   :param threshold: Threshold from which the operator will
                     filter.
   :type threshold: float, optional

   :returns: **workflow**
   :rtype: Workflow

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.filter.filtering_max_over_time()

   >>> # Make input connections
   >>> my_invariant_fc_operator = str()
   >>> op.inputs.invariant_fc_operator.connect(my_invariant_fc_operator)
   >>> my_output_pin = int()
   >>> op.inputs.output_pin.connect(my_output_pin)
   >>> my_list_of_results = str()
   >>> op.inputs.list_of_results.connect(my_list_of_results)
   >>> my_threshold = float()
   >>> op.inputs.threshold.connect(my_threshold)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.filter.filtering_max_over_time(
   ...     invariant_fc_operator=my_invariant_fc_operator,
   ...     output_pin=my_output_pin,
   ...     list_of_results=my_list_of_results,
   ...     threshold=my_threshold,
   ... )

   >>> # Get output data
   >>> result_workflow = op.outputs.workflow()




.. py:currentmodule:: filtering_max_over_time

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.filter.filtering_max_over_time import filtering_max_over_time

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsFilteringMaxOverTime

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsFilteringMaxOverTime




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





