





:class:`zfp_decompress`
=======================

.. py:class:: ansys.dpf.core.operators.compression.zfp_decompress.zfp_decompress(dataIn=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   zfp decompression using the information about compression written into
   the properties of the field(s)

   :param dataIn: Custom type field container from
                  zfp_compression operator to
                  decompress
   :type dataIn: CustomTypeFieldsContainer

   :returns: * **dataOut** (*Field or FieldsContainer*) -- The output entity is a field or a fields
               container; it contains decompressed
               data
             * **decompress_speed** (*float*) -- The output entity is a double, containing
               decompression speed (mb/sec)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.compression.zfp_decompress()

   >>> # Make input connections
   >>> my_dataIn = dpf.CustomTypeFieldsContainer()
   >>> op.inputs.dataIn.connect(my_dataIn)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.compression.zfp_decompress(
   ...     dataIn=my_dataIn,
   ... )

   >>> # Get output data
   >>> result_dataOut = op.outputs.dataOut()
   >>> result_decompress_speed = op.outputs.decompress_speed()




.. py:currentmodule:: zfp_decompress

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.compression.zfp_decompress import zfp_decompress

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsZfpDecompress

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsZfpDecompress




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





