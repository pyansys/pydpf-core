





:class:`InputsErpRadiationEfficiency`
=====================================

.. py:class:: ansys.dpf.core.operators.result.erp_radiation_efficiency.InputsErpRadiationEfficiency(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   erp_radiation_efficiency operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.erp_radiation_efficiency()
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_time_scoping = int()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mass_density = float()
   >>> op.inputs.mass_density.connect(my_mass_density)
   >>> my_speed_of_sound = float()
   >>> op.inputs.speed_of_sound.connect(my_speed_of_sound)



.. py:currentmodule:: InputsErpRadiationEfficiency

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~mass_density`
            - Allows to connect mass_density input to the operator.
          * - :py:attr:`~speed_of_sound`
            - Allows to connect speed_of_sound input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.erp_radiation_efficiency import InputsErpRadiationEfficiency

Property detail
---------------

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   The input field container expects
   displacements fields

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.erp_radiation_efficiency()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   The meshes region in this pin has to be
   boundary or skin mesh

   :param my_mesh:
   :type my_mesh: MeshedRegion or MeshesContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.erp_radiation_efficiency()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   Load step number (if it's specified, the erp
   is computed only on the substeps of
   this step) or time scoping

   :param my_time_scoping:
   :type my_time_scoping: int or Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.erp_radiation_efficiency()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: mass_density

   Allows to connect mass_density input to the operator.

   Mass density (if it's not specified, default
   value of the air is applied).

   :param my_mass_density:
   :type my_mass_density: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.erp_radiation_efficiency()
   >>> op.inputs.mass_density.connect(my_mass_density)
   >>> # or
   >>> op.inputs.mass_density(my_mass_density)

.. py:property:: speed_of_sound

   Allows to connect speed_of_sound input to the operator.

   Speed of sound (if it's not specified,
   default value of the speed of sound
   in the air is applied).

   :param my_speed_of_sound:
   :type my_speed_of_sound: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.erp_radiation_efficiency()
   >>> op.inputs.speed_of_sound.connect(my_speed_of_sound)
   >>> # or
   >>> op.inputs.speed_of_sound(my_speed_of_sound)






