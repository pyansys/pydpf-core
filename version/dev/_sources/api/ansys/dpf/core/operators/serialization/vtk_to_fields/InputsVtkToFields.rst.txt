





:class:`InputsVtkToFields`
==========================

.. py:class:: ansys.dpf.core.operators.serialization.vtk_to_fields.InputsVtkToFields(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   vtk_to_fields operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_to_fields()
   >>> my_field_name = str()
   >>> op.inputs.field_name.connect(my_field_name)
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)



.. py:currentmodule:: InputsVtkToFields

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field_name`
            - Allows to connect field_name input to the operator.
          * - :py:attr:`~streams`
            - Allows to connect streams input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.vtk_to_fields import InputsVtkToFields

Property detail
---------------

.. py:property:: field_name

   Allows to connect field_name input to the operator.

   Name of the field in the vtk file

   :param my_field_name:
   :type my_field_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_to_fields()
   >>> op.inputs.field_name.connect(my_field_name)
   >>> # or
   >>> op.inputs.field_name(my_field_name)

.. py:property:: streams

   Allows to connect streams input to the operator.

   :param my_streams:
   :type my_streams: StreamsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_to_fields()
   >>> op.inputs.streams.connect(my_streams)
   >>> # or
   >>> op.inputs.streams(my_streams)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.vtk_to_fields()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)






