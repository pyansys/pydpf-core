





:class:`minus_fc`
=================

.. py:class:: ansys.dpf.core.operators.math.minus_fc.minus_fc(field_or_fields_container_A=None, field_or_fields_container_B=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the difference of two fields. If one field's scoping has an
   'overall' location, then this field's values are applied on the
   other field entirely. When using a constant or 'work_by_index',
   you can use 'inplace' to reuse one of the fields.

   :param field_or_fields_container_A: Field or fields container with only one field
                                       is expected
   :type field_or_fields_container_A: Field or FieldsContainer or float
   :param field_or_fields_container_B: Field or fields container with only one field
                                       is expected
   :type field_or_fields_container_B: Field or FieldsContainer or float

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.math.minus_fc()

   >>> # Make input connections
   >>> my_field_or_fields_container_A = dpf.Field()
   >>> op.inputs.field_or_fields_container_A.connect(my_field_or_fields_container_A)
   >>> my_field_or_fields_container_B = dpf.Field()
   >>> op.inputs.field_or_fields_container_B.connect(my_field_or_fields_container_B)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.math.minus_fc(
   ...     field_or_fields_container_A=my_field_or_fields_container_A,
   ...     field_or_fields_container_B=my_field_or_fields_container_B,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: minus_fc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.math.minus_fc import minus_fc

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMinusFc

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMinusFc




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





