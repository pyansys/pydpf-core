





:class:`InputsComputeTimeScoping`
=================================

.. py:class:: ansys.dpf.core.operators.utility.compute_time_scoping.InputsComputeTimeScoping(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   compute_time_scoping operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.compute_time_scoping()
   >>> my_time_freq_values = float()
   >>> op.inputs.time_freq_values.connect(my_time_freq_values)
   >>> my_step = int()
   >>> op.inputs.step.connect(my_step)
   >>> my_interpolation_type = int()
   >>> op.inputs.interpolation_type.connect(my_interpolation_type)
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)



.. py:currentmodule:: InputsComputeTimeScoping

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_freq_values`
            - Allows to connect time_freq_values input to the operator.
          * - :py:attr:`~step`
            - Allows to connect step input to the operator.
          * - :py:attr:`~interpolation_type`
            - Allows to connect interpolation_type input to the operator.
          * - :py:attr:`~time_freq_support`
            - Allows to connect time_freq_support input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.compute_time_scoping import InputsComputeTimeScoping

Property detail
---------------

.. py:property:: time_freq_values

   Allows to connect time_freq_values input to the operator.

   List of frequencies or times needed. to
   specify load steps, put a field (and
   not a list) in input with a scoping
   located on "timefreq_steps".

   :param my_time_freq_values:
   :type my_time_freq_values: float or Field or TimeFreqSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.compute_time_scoping()
   >>> op.inputs.time_freq_values.connect(my_time_freq_values)
   >>> # or
   >>> op.inputs.time_freq_values(my_time_freq_values)

.. py:property:: step

   Allows to connect step input to the operator.

   :param my_step:
   :type my_step: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.compute_time_scoping()
   >>> op.inputs.step.connect(my_step)
   >>> # or
   >>> op.inputs.step(my_step)

.. py:property:: interpolation_type

   Allows to connect interpolation_type input to the operator.

   1:ramped' or 2:stepped', default is ramped

   :param my_interpolation_type:
   :type my_interpolation_type: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.compute_time_scoping()
   >>> op.inputs.interpolation_type.connect(my_interpolation_type)
   >>> # or
   >>> op.inputs.interpolation_type(my_interpolation_type)

.. py:property:: time_freq_support

   Allows to connect time_freq_support input to the operator.

   :param my_time_freq_support:
   :type my_time_freq_support: TimeFreqSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.compute_time_scoping()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> # or
   >>> op.inputs.time_freq_support(my_time_freq_support)






