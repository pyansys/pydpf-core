





:class:`InputsMakeLabelSpace`
=============================

.. py:class:: ansys.dpf.core.operators.utility.make_label_space.InputsMakeLabelSpace(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   make_label_space operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_label_space()
   >>> my_base_label = dict()
   >>> op.inputs.base_label.connect(my_base_label)
   >>> my_label_name = str()
   >>> op.inputs.label_name.connect(my_label_name)
   >>> my_label_value1 = int()
   >>> op.inputs.label_value1.connect(my_label_value1)
   >>> my_label_value2 = int()
   >>> op.inputs.label_value2.connect(my_label_value2)



.. py:currentmodule:: InputsMakeLabelSpace

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~base_label`
            - Allows to connect base_label input to the operator.
          * - :py:attr:`~label_name`
            - Allows to connect label_name input to the operator.
          * - :py:attr:`~label_value1`
            - Allows to connect label_value1 input to the operator.
          * - :py:attr:`~label_value2`
            - Allows to connect label_value2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.make_label_space import InputsMakeLabelSpace

Property detail
---------------

.. py:property:: base_label

   Allows to connect base_label input to the operator.

   Used as a base label (extracted from
   fields/scoping container, or directly
   from label space) that is
   concatenated with provided values.

   :param my_base_label:
   :type my_base_label: dict or FieldsContainer or ScopingsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_label_space()
   >>> op.inputs.base_label.connect(my_base_label)
   >>> # or
   >>> op.inputs.base_label(my_base_label)

.. py:property:: label_name

   Allows to connect label_name input to the operator.

   :param my_label_name:
   :type my_label_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_label_space()
   >>> op.inputs.label_name.connect(my_label_name)
   >>> # or
   >>> op.inputs.label_name(my_label_name)

.. py:property:: label_value1

   Allows to connect label_value1 input to the operator.

   :param my_label_value1:
   :type my_label_value1: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_label_space()
   >>> op.inputs.label_value1.connect(my_label_value1)
   >>> # or
   >>> op.inputs.label_value1(my_label_value1)

.. py:property:: label_value2

   Allows to connect label_value2 input to the operator.

   :param my_label_value2:
   :type my_label_value2: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.utility.make_label_space()
   >>> op.inputs.label_value2.connect(my_label_value2)
   >>> # or
   >>> op.inputs.label_value2(my_label_value2)






