





:class:`weighted_merge_fields_by_label`
=======================================

.. py:class:: ansys.dpf.core.operators.utility.weighted_merge_fields_by_label.weighted_merge_fields_by_label(fields_container=None, label=None, merged_field_support=None, sum_merge=None, weights1=None, weights2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Performs a weighted merge on fields of a fields container that share
   the same label value.

   :param fields_container:
   :type fields_container: FieldsContainer
   :param label: Label identifier that should be merged.
   :type label: str
   :param merged_field_support: The fieldscontainer's support that has
                                already been merged.
   :type merged_field_support: AbstractFieldSupport, optional
   :param sum_merge: Default is false. if true, redundant
                     quantities are summed instead of
                     being ignored.
   :type sum_merge: bool, optional
   :param weights1: Weights to apply to each field from pin 1000
                    to ...
   :type weights1: PropertyField
   :param weights2: Weights to apply to each field from pin 1000
                    to ...
   :type weights2: PropertyField

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.weighted_merge_fields_by_label()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_label = str()
   >>> op.inputs.label.connect(my_label)
   >>> my_merged_field_support = dpf.AbstractFieldSupport()
   >>> op.inputs.merged_field_support.connect(my_merged_field_support)
   >>> my_sum_merge = bool()
   >>> op.inputs.sum_merge.connect(my_sum_merge)
   >>> my_weights1 = dpf.PropertyField()
   >>> op.inputs.weights1.connect(my_weights1)
   >>> my_weights2 = dpf.PropertyField()
   >>> op.inputs.weights2.connect(my_weights2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.weighted_merge_fields_by_label(
   ...     fields_container=my_fields_container,
   ...     label=my_label,
   ...     merged_field_support=my_merged_field_support,
   ...     sum_merge=my_sum_merge,
   ...     weights1=my_weights1,
   ...     weights2=my_weights2,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: weighted_merge_fields_by_label

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.weighted_merge_fields_by_label import weighted_merge_fields_by_label

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsWeightedMergeFieldsByLabel

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsWeightedMergeFieldsByLabel




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





