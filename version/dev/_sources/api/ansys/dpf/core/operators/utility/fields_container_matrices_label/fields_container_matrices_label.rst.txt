





:class:`fields_container_matrices_label`
========================================

.. py:class:: ansys.dpf.core.operators.utility.fields_container_matrices_label.fields_container_matrices_label(fields_container=None, label=None, time_scoping=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Merge fields of fields container into field matrices. The output is a
   fields container of field matrices.

   :param fields_container: Fields container to be merged
   :type fields_container: FieldsContainer
   :param label: Label where the merge is required
   :type label: str
   :param time_scoping: If it's specified, fields container of field
                        matrices is constructed only on the
                        specified time scoping
   :type time_scoping: int or Scoping, optional

   :returns: **fields_container** -- Fields container of field matrices obtained
             after merging.
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.fields_container_matrices_label()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_label = str()
   >>> op.inputs.label.connect(my_label)
   >>> my_time_scoping = int()
   >>> op.inputs.time_scoping.connect(my_time_scoping)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.fields_container_matrices_label(
   ...     fields_container=my_fields_container,
   ...     label=my_label,
   ...     time_scoping=my_time_scoping,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: fields_container_matrices_label

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.fields_container_matrices_label import fields_container_matrices_label

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsFieldsContainerMatricesLabel

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsFieldsContainerMatricesLabel




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





