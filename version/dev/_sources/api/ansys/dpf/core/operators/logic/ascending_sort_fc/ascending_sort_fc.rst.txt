





:class:`ascending_sort_fc`
==========================

.. py:class:: ansys.dpf.core.operators.logic.ascending_sort_fc.ascending_sort_fc(fields_container=None, component_priority_table=None, sort_by_scoping=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Sort a field (in 0) in ascending order with an optional component
   priority table, or a boolean, to enable sort by scoping (in 1).
   This operator does not support multiple elementary data per
   entity.

   :param fields_container: Field or fields container with only one field
                            is expected
   :type fields_container: FieldsContainer
   :param component_priority_table: Component priority table (vector of int)
   :type component_priority_table: optional
   :param sort_by_scoping: If true, uses scoping to sort the field
                           (default is false)
   :type sort_by_scoping: bool, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.logic.ascending_sort_fc()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_component_priority_table = dpf.()
   >>> op.inputs.component_priority_table.connect(my_component_priority_table)
   >>> my_sort_by_scoping = bool()
   >>> op.inputs.sort_by_scoping.connect(my_sort_by_scoping)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.logic.ascending_sort_fc(
   ...     fields_container=my_fields_container,
   ...     component_priority_table=my_component_priority_table,
   ...     sort_by_scoping=my_sort_by_scoping,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: ascending_sort_fc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.logic.ascending_sort_fc import ascending_sort_fc

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsAscendingSortFc

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsAscendingSortFc




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





