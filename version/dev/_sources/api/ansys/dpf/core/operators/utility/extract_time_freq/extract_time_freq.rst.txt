





:class:`extract_time_freq`
==========================

.. py:class:: ansys.dpf.core.operators.utility.extract_time_freq.extract_time_freq(time_freq_support=None, time_scoping=None, real_or_complex=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Extract timefreqs with sets scoping from a time freq support

   :param time_freq_support:
   :type time_freq_support: TimeFreqSupport
   :param time_scoping:
   :type time_scoping: Scoping, optional
   :param real_or_complex: False for real only (default). true for
                           complex output.
   :type real_or_complex: bool, optional

   :returns: **field**
   :rtype: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.extract_time_freq()

   >>> # Make input connections
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_real_or_complex = bool()
   >>> op.inputs.real_or_complex.connect(my_real_or_complex)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.extract_time_freq(
   ...     time_freq_support=my_time_freq_support,
   ...     time_scoping=my_time_scoping,
   ...     real_or_complex=my_real_or_complex,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: extract_time_freq

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.extract_time_freq import extract_time_freq

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsExtractTimeFreq

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsExtractTimeFreq




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





