





:class:`members_in_compression_not_certified`
=============================================

.. py:class:: ansys.dpf.core.operators.result.members_in_compression_not_certified.members_in_compression_not_certified(time_scoping=None, field_yield_strength=None, field_end_condition=None, streams=None, data_sources=None, manufacture=None, partial_factor=None, mesh=None, axial_force=None, fabrication_type=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   This operator is a non-certified example of buckling resistance
   verification for the compression members for Class I, 2 and 3
   cross-sections. It is only provided as an example if you want to
   develop your own compute norm operator. The results computed by
   this beta operator have not been certified by ANSYS. ANSYS
   declines all responsibility for the use of this operator.

   :param time_scoping: Time/freq set ids (use ints or scoping)
   :type time_scoping: Scoping or int, optional
   :param field_yield_strength: This pin contains file csv or field of beam's
                                yield strength.
   :type field_yield_strength: DataSources or Field
   :param field_end_condition: This pin contains file csv or field of beam's
                               end condition defined by the user. if
                               no input at this pin found, it would
                               take end condition's value of all
                               beams as 1.
   :type field_end_condition: DataSources or Field
   :param streams: result file container allowed to be kept open
                   to cache data.
   :type streams: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set.
   :type data_sources: DataSources, optional
   :param manufacture: Manufacturing processus:hot finished if true
                       or cold formed if false. default
                       value : hot finished.
   :type manufacture: bool
   :param partial_factor: Partial safety factor for resistance of
                          members to instability assessed by
                          member checks. default value: 1.
   :type partial_factor: float
   :param mesh: mesh containing beam's properties defined by
                user
   :type mesh: MeshedRegion
   :param axial_force: Fields container of axial force defined by
                       user
   :type axial_force: FieldsContainer
   :param fabrication_type: If there is beam i in the structure, please
                            define its fabrication type. true:
                            rolled section, false: welded section
   :type fabrication_type: bool

   :returns: * **buckling_resistance_compression_yy** (*FieldsContainer*) -- Fields container of buckling resistance
               factor on axis y-y in case of
               compression. these factors should be
               less than 1 and positive.
             * **buckling_resistance_compression_zz** (*FieldsContainer*) -- Fields container of buckling resistance
               factor on axis z-z in case of
               compression. these factors should be
               less than 1 and positive.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.members_in_compression_not_certified()

   >>> # Make input connections
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_field_yield_strength = dpf.DataSources()
   >>> op.inputs.field_yield_strength.connect(my_field_yield_strength)
   >>> my_field_end_condition = dpf.DataSources()
   >>> op.inputs.field_end_condition.connect(my_field_end_condition)
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_manufacture = bool()
   >>> op.inputs.manufacture.connect(my_manufacture)
   >>> my_partial_factor = float()
   >>> op.inputs.partial_factor.connect(my_partial_factor)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_axial_force = dpf.FieldsContainer()
   >>> op.inputs.axial_force.connect(my_axial_force)
   >>> my_fabrication_type = bool()
   >>> op.inputs.fabrication_type.connect(my_fabrication_type)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.members_in_compression_not_certified(
   ...     time_scoping=my_time_scoping,
   ...     field_yield_strength=my_field_yield_strength,
   ...     field_end_condition=my_field_end_condition,
   ...     streams=my_streams,
   ...     data_sources=my_data_sources,
   ...     manufacture=my_manufacture,
   ...     partial_factor=my_partial_factor,
   ...     mesh=my_mesh,
   ...     axial_force=my_axial_force,
   ...     fabrication_type=my_fabrication_type,
   ... )

   >>> # Get output data
   >>> result_buckling_resistance_compression_yy = op.outputs.buckling_resistance_compression_yy()
   >>> result_buckling_resistance_compression_zz = op.outputs.buckling_resistance_compression_zz()




.. py:currentmodule:: members_in_compression_not_certified

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.members_in_compression_not_certified import members_in_compression_not_certified

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMembersInCompressionNotCertified

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMembersInCompressionNotCertified




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





