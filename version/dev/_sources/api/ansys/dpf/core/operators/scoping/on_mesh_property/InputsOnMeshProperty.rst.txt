





:class:`InputsOnMeshProperty`
=============================

.. py:class:: ansys.dpf.core.operators.scoping.on_mesh_property.InputsOnMeshProperty(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   on_mesh_property operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_id = int()
   >>> op.inputs.property_id.connect(my_property_id)
   >>> my_inclusive = int()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)



.. py:currentmodule:: InputsOnMeshProperty

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.
          * - :py:attr:`~property_name`
            - Allows to connect property_name input to the operator.
          * - :py:attr:`~property_id`
            - Allows to connect property_id input to the operator.
          * - :py:attr:`~inclusive`
            - Allows to connect inclusive input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.on_mesh_property import InputsOnMeshProperty

Property detail
---------------

.. py:property:: requested_location

   Allows to connect requested_location input to the operator.

   Nodal or elemental location are expected

   :param my_requested_location:
   :type my_requested_location: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)

.. py:property:: property_name

   Allows to connect property_name input to the operator.

   Ex "apdl_element_type", "elprops", "mat",
   "eltype", "connectivity",
   "shell_elements", "solid_elements",
   "skin_elements", "beam_elements",
   "point_elements"...

   :param my_property_name:
   :type my_property_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> # or
   >>> op.inputs.property_name(my_property_name)

.. py:property:: property_id

   Allows to connect property_id input to the operator.

   :param my_property_id:
   :type my_property_id: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.property_id.connect(my_property_id)
   >>> # or
   >>> op.inputs.property_id(my_property_id)

.. py:property:: inclusive

   Allows to connect inclusive input to the operator.

   Default is 1 (inclusive is true). only used
   if 'shape_values' property is
   requested. if inclusive is set to 1
   and 'elprops' property field is
   available, it will select all
   elements that are set on the
   corresponding property. if inclusive
   is set to 0 (exclusive) and 'elprops'
   property field is available, it will
   select the elements that are only set
   on this property.

   :param my_inclusive:
   :type my_inclusive: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> # or
   >>> op.inputs.inclusive(my_inclusive)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.on_mesh_property()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)






