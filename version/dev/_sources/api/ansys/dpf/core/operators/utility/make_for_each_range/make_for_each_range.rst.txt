





:class:`make_for_each_range`
============================

.. py:class:: ansys.dpf.core.operators.utility.make_for_each_range.make_for_each_range(try_generate_iterable=None, iterable=None, operator_to_iterate=None, pin_index=None, valueA=None, valueB=None, valueC1=None, valueC2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Generate a range that can be consumed by the for_each operator

   :param try_generate_iterable: If true, already iterable values connected in
                                 pin 3 like vectors, scoping,
                                 timefreqsupport, containers and
                                 datasources are split to iterate on
                                 it (default is true)
   :type try_generate_iterable: bool, optional
   :param iterable: Iterable object, generated by
                    make_for_each_range oeprator, that
                    can be combined with the one
                    currently generated.
   :type iterable: optional
   :param operator_to_iterate: Operator that must be reconnected with the
                               range values.
   :type operator_to_iterate: Operator
   :param pin_index:
   :type pin_index: int
   :param valueA:
   :param valueB:
   :param valueC1:
   :param valueC2:

   :rtype: output

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.make_for_each_range()

   >>> # Make input connections
   >>> my_try_generate_iterable = bool()
   >>> op.inputs.try_generate_iterable.connect(my_try_generate_iterable)
   >>> my_iterable = dpf.()
   >>> op.inputs.iterable.connect(my_iterable)
   >>> my_operator_to_iterate = dpf.Operator()
   >>> op.inputs.operator_to_iterate.connect(my_operator_to_iterate)
   >>> my_pin_index = int()
   >>> op.inputs.pin_index.connect(my_pin_index)
   >>> my_valueA = dpf.()
   >>> op.inputs.valueA.connect(my_valueA)
   >>> my_valueB = dpf.()
   >>> op.inputs.valueB.connect(my_valueB)
   >>> my_valueC1 = dpf.()
   >>> op.inputs.valueC1.connect(my_valueC1)
   >>> my_valueC2 = dpf.()
   >>> op.inputs.valueC2.connect(my_valueC2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.make_for_each_range(
   ...     try_generate_iterable=my_try_generate_iterable,
   ...     iterable=my_iterable,
   ...     operator_to_iterate=my_operator_to_iterate,
   ...     pin_index=my_pin_index,
   ...     valueA=my_valueA,
   ...     valueB=my_valueB,
   ...     valueC1=my_valueC1,
   ...     valueC2=my_valueC2,
   ... )

   >>> # Get output data
   >>> result_output = op.outputs.output()




.. py:currentmodule:: make_for_each_range

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.make_for_each_range import make_for_each_range

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMakeForEachRange

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMakeForEachRange




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





