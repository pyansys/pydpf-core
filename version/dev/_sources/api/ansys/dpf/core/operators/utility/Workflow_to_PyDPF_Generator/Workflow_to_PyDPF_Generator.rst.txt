





:class:`Workflow_to_PyDPF_Generator`
====================================

.. py:class:: ansys.dpf.core.operators.utility.Workflow_to_PyDPF_Generator.Workflow_to_PyDPF_Generator(workflow=None, output_path=None, output_file_name=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Generates .py python file that contains the PyDPF script of a Workflow
   object.

   :param workflow:
   :type workflow: Workflow
   :param output_path:
   :type output_path: str, optional
   :param output_file_name:
   :type output_file_name: str, optional

   :returns: **pydpf_code**
   :rtype: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator()

   >>> # Make input connections
   >>> my_workflow = dpf.Workflow()
   >>> op.inputs.workflow.connect(my_workflow)
   >>> my_output_path = str()
   >>> op.inputs.output_path.connect(my_output_path)
   >>> my_output_file_name = str()
   >>> op.inputs.output_file_name.connect(my_output_file_name)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.Workflow_to_PyDPF_Generator(
   ...     workflow=my_workflow,
   ...     output_path=my_output_path,
   ...     output_file_name=my_output_file_name,
   ... )

   >>> # Get output data
   >>> result_pydpf_code = op.outputs.pydpf_code()




.. py:currentmodule:: Workflow_to_PyDPF_Generator

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.Workflow_to_PyDPF_Generator import Workflow_to_PyDPF_Generator

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsWorkflowToPydpfGenerator

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsWorkflowToPydpfGenerator




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





