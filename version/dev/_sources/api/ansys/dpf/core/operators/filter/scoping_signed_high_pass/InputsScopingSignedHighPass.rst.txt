





:class:`InputsScopingSignedHighPass`
====================================

.. py:class:: ansys.dpf.core.operators.filter.scoping_signed_high_pass.InputsScopingSignedHighPass(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   scoping_signed_high_pass operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.scoping_signed_high_pass()
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_threshold = float()
   >>> op.inputs.threshold.connect(my_threshold)
   >>> my_both = bool()
   >>> op.inputs.both.connect(my_both)



.. py:currentmodule:: InputsScopingSignedHighPass

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field`
            - Allows to connect field input to the operator.
          * - :py:attr:`~threshold`
            - Allows to connect threshold input to the operator.
          * - :py:attr:`~both`
            - Allows to connect both input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.filter.scoping_signed_high_pass import InputsScopingSignedHighPass

Property detail
---------------

.. py:property:: field

   Allows to connect field input to the operator.

   Field or fields container with only one field
   is expected

   :param my_field:
   :type my_field: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.scoping_signed_high_pass()
   >>> op.inputs.field.connect(my_field)
   >>> # or
   >>> op.inputs.field(my_field)

.. py:property:: threshold

   Allows to connect threshold input to the operator.

   A threshold scalar or a field containing one
   value is expected.

   :param my_threshold:
   :type my_threshold: float or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.scoping_signed_high_pass()
   >>> op.inputs.threshold.connect(my_threshold)
   >>> # or
   >>> op.inputs.threshold(my_threshold)

.. py:property:: both

   Allows to connect both input to the operator.

   The default is false. if set to true, the
   complement of the filtered fields
   container is returned on output pin
   1.

   :param my_both:
   :type my_both: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.filter.scoping_signed_high_pass()
   >>> op.inputs.both.connect(my_both)
   >>> # or
   >>> op.inputs.both(my_both)






