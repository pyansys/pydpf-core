





:class:`InputsImportSymbolicWorkflow`
=====================================

.. py:class:: ansys.dpf.core.operators.serialization.import_symbolic_workflow.InputsImportSymbolicWorkflow(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   import_symbolic_workflow operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.import_symbolic_workflow()
   >>> my_string_or_path = str()
   >>> op.inputs.string_or_path.connect(my_string_or_path)
   >>> my_format = int()
   >>> op.inputs.format.connect(my_format)



.. py:currentmodule:: InputsImportSymbolicWorkflow

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~string_or_path`
            - Allows to connect string_or_path input to the operator.
          * - :py:attr:`~format`
            - Allows to connect format input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.serialization.import_symbolic_workflow import InputsImportSymbolicWorkflow

Property detail
---------------

.. py:property:: string_or_path

   Allows to connect string_or_path input to the operator.

   :param my_string_or_path:
   :type my_string_or_path: str or DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.import_symbolic_workflow()
   >>> op.inputs.string_or_path.connect(my_string_or_path)
   >>> # or
   >>> op.inputs.string_or_path(my_string_or_path)

.. py:property:: format

   Allows to connect format input to the operator.

   -1 is auto-detection, 0 is ascii format, 1 is
   binary, 2 is json, default is -1
   (auto-detection).

   :param my_format:
   :type my_format: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.serialization.import_symbolic_workflow()
   >>> op.inputs.format.connect(my_format)
   >>> # or
   >>> op.inputs.format(my_format)






