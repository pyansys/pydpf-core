





:class:`InputsSplitOnPropertyType`
==================================

.. py:class:: ansys.dpf.core.operators.scoping.split_on_property_type.InputsSplitOnPropertyType(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   split_on_property_type operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.split_on_property_type()
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_requested_location = str()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> my_skin_case = int()
   >>> op.inputs.skin_case.connect(my_skin_case)
   >>> my_label1 = str()
   >>> op.inputs.label1.connect(my_label1)
   >>> my_label2 = str()
   >>> op.inputs.label2.connect(my_label2)



.. py:currentmodule:: InputsSplitOnPropertyType

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~requested_location`
            - Allows to connect requested_location input to the operator.
          * - :py:attr:`~skin_case`
            - Allows to connect skin_case input to the operator.
          * - :py:attr:`~label1`
            - Allows to connect label1 input to the operator.
          * - :py:attr:`~label2`
            - Allows to connect label2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.scoping.split_on_property_type import InputsSplitOnPropertyType

Property detail
---------------

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   Scoping

   :param my_mesh_scoping:
   :type my_mesh_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.split_on_property_type()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   Mesh region

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.split_on_property_type()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: requested_location

   Allows to connect requested_location input to the operator.

   Location (default is elemental)

   :param my_requested_location:
   :type my_requested_location: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.split_on_property_type()
   >>> op.inputs.requested_location.connect(my_requested_location)
   >>> # or
   >>> op.inputs.requested_location(my_requested_location)

.. py:property:: skin_case

   Allows to connect skin_case input to the operator.

   Set to 0: to have skin elements in their own
   group, 1: merge skin and solid
   elements, 2: merge skin and shell
   elements (default)

   :param my_skin_case:
   :type my_skin_case: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.split_on_property_type()
   >>> op.inputs.skin_case.connect(my_skin_case)
   >>> # or
   >>> op.inputs.skin_case(my_skin_case)

.. py:property:: label1

   Allows to connect label1 input to the operator.

   Properties to apply the filtering 'mat'
   and/or 'elshape' (since 2025r1 it
   supports any property name contained
   in the mesh property fields) (default
   is 'elshape')

   :param my_label1:
   :type my_label1: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.split_on_property_type()
   >>> op.inputs.label1.connect(my_label1)
   >>> # or
   >>> op.inputs.label1(my_label1)

.. py:property:: label2

   Allows to connect label2 input to the operator.

   Properties to apply the filtering 'mat'
   and/or 'elshape' (since 2025r1 it
   supports any property name contained
   in the mesh property fields) (default
   is 'elshape')

   :param my_label2:
   :type my_label2: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.scoping.split_on_property_type()
   >>> op.inputs.label2.connect(my_label2)
   >>> # or
   >>> op.inputs.label2(my_label2)






