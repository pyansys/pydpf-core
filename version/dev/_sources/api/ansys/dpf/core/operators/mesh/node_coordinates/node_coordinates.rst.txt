





:class:`node_coordinates`
=========================

.. py:class:: ansys.dpf.core.operators.mesh.node_coordinates.node_coordinates(mesh=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Returns the node coordinates of the mesh(es) in input.

   :param mesh:
   :type mesh: MeshedRegion or MeshesContainer

   :returns: **coordinates** -- If the input is a meshed region, a field of
             coordinates is the output, else if
             the input is a  meshes container, a
             fields container (one field by mesh)
             is the output
   :rtype: Field or FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.node_coordinates()

   >>> # Make input connections
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.node_coordinates(
   ...     mesh=my_mesh,
   ... )

   >>> # Get output data
   >>> result_coordinates = op.outputs.coordinates()




.. py:currentmodule:: node_coordinates

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.node_coordinates import node_coordinates

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsNodeCoordinates

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsNodeCoordinates




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





