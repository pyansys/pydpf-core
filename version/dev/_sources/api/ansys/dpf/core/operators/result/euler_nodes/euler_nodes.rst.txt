





:class:`euler_nodes`
====================

.. py:class:: ansys.dpf.core.operators.result.euler_nodes.euler_nodes(streams_container=None, data_sources=None, filter_zeros=None, coord_and_euler=None, mesh=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Reads a field made of 3 coordinates and 3 Euler angles (6 dofs) by
   node from the result file.

   :param streams_container:
   :type streams_container: StreamsContainer or Stream, optional
   :param data_sources:
   :type data_sources: DataSources
   :param filter_zeros: If true, then the field will only contain the
                        scoping if any rotation is not zero.
                        (default is false).
   :type filter_zeros: bool
   :param coord_and_euler: If true, then the field has ncomp=6 with 3
                           coordinates and 3 euler angles, else
                           there is only the euler angles
                           (default is true).
   :type coord_and_euler: bool
   :param mesh:
   :type mesh: MeshedRegion, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.result.euler_nodes()

   >>> # Make input connections
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_filter_zeros = bool()
   >>> op.inputs.filter_zeros.connect(my_filter_zeros)
   >>> my_coord_and_euler = bool()
   >>> op.inputs.coord_and_euler.connect(my_coord_and_euler)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.result.euler_nodes(
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ...     filter_zeros=my_filter_zeros,
   ...     coord_and_euler=my_coord_and_euler,
   ...     mesh=my_mesh,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: euler_nodes

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.euler_nodes import euler_nodes

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsEulerNodes

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsEulerNodes




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





