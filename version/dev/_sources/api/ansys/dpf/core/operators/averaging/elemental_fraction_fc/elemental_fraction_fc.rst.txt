





:class:`elemental_fraction_fc`
==============================

.. py:class:: ansys.dpf.core.operators.averaging.elemental_fraction_fc.elemental_fraction_fc(fields_container=None, mesh=None, scoping=None, denominator=None, collapse_shell_layers=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Transforms Elemental Nodal fields into Elemental fields. Each
   elemental value is the fraction between the elemental difference
   and the entity average. The result is computed on a given
   element's scoping.

   :param fields_container:
   :type fields_container: FieldsContainer
   :param mesh: The mesh region in this pin is used to
                perform the averaging. it is used if
                there is no fields support.
   :type mesh: MeshedRegion, optional
   :param scoping: Average only on these elements. if it is a
                   scoping container, the label must
                   correspond to the one of the fields
                   containers.
   :type scoping: Scoping, optional
   :param denominator: If a fields container is set in this pin, it
                       is used as the denominator of the
                       fraction instead of
                       entity_average_fc.
   :type denominator: FieldsContainer, optional
   :param collapse_shell_layers: The elemental difference and the entity
                                 average are taken through the
                                 different shell layers if true
                                 (default is false).
   :type collapse_shell_layers: bool, optional

   :returns: **fields_container**
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.averaging.elemental_fraction_fc()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> my_denominator = dpf.FieldsContainer()
   >>> op.inputs.denominator.connect(my_denominator)
   >>> my_collapse_shell_layers = bool()
   >>> op.inputs.collapse_shell_layers.connect(my_collapse_shell_layers)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.averaging.elemental_fraction_fc(
   ...     fields_container=my_fields_container,
   ...     mesh=my_mesh,
   ...     scoping=my_scoping,
   ...     denominator=my_denominator,
   ...     collapse_shell_layers=my_collapse_shell_layers,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: elemental_fraction_fc

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.elemental_fraction_fc import elemental_fraction_fc

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsElementalFractionFc

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsElementalFractionFc




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





