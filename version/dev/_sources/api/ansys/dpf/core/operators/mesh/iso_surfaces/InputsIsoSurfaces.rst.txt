





:class:`InputsIsoSurfaces`
==========================

.. py:class:: ansys.dpf.core.operators.mesh.iso_surfaces.InputsIsoSurfaces(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   iso_surfaces operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.iso_surfaces()
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_num_surfaces = int()
   >>> op.inputs.num_surfaces.connect(my_num_surfaces)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_slice_surfaces = bool()
   >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)
   >>> my_vector_iso_values = dpf.()
   >>> op.inputs.vector_iso_values.connect(my_vector_iso_values)



.. py:currentmodule:: InputsIsoSurfaces

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field`
            - Allows to connect field input to the operator.
          * - :py:attr:`~num_surfaces`
            - Allows to connect num_surfaces input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~slice_surfaces`
            - Allows to connect slice_surfaces input to the operator.
          * - :py:attr:`~vector_iso_values`
            - Allows to connect vector_iso_values input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.iso_surfaces import InputsIsoSurfaces

Property detail
---------------

.. py:property:: field

   Allows to connect field input to the operator.

   Field containing the values for the iso-
   surface computation. the mesh can be
   retrieved from this field's support
   or through pin 2.

   :param my_field:
   :type my_field: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.iso_surfaces()
   >>> op.inputs.field.connect(my_field)
   >>> # or
   >>> op.inputs.field(my_field)

.. py:property:: num_surfaces

   Allows to connect num_surfaces input to the operator.

   If provided, iso_values are linearly computed
   between the min and the max of the
   field of results. if not, iso_values
   must be provided by the user through
   pin 4

   :param my_num_surfaces:
   :type my_num_surfaces: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.iso_surfaces()
   >>> op.inputs.num_surfaces.connect(my_num_surfaces)
   >>> # or
   >>> op.inputs.num_surfaces(my_num_surfaces)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   Mesh to compute the iso-surface from. used
   when not given through the support of
   the field in pin 0.

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.iso_surfaces()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: slice_surfaces

   Allows to connect slice_surfaces input to the operator.

   True: slicing will also take into account
   shell and skin elements. false:
   slicing will ignore shell and skin
   elements. the default is true.

   :param my_slice_surfaces:
   :type my_slice_surfaces: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.iso_surfaces()
   >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)
   >>> # or
   >>> op.inputs.slice_surfaces(my_slice_surfaces)

.. py:property:: vector_iso_values

   Allows to connect vector_iso_values input to the operator.

   If provided, user defined iso_values to
   compute. if not provided, iso_values
   are linearly compute between the min
   and the max of the field of results.

   :param my_vector_iso_values:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.iso_surfaces()
   >>> op.inputs.vector_iso_values.connect(my_vector_iso_values)
   >>> # or
   >>> op.inputs.vector_iso_values(my_vector_iso_values)






