





:class:`InputsMeshCut`
======================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_cut.InputsMeshCut(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   mesh_cut operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_cut()
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_iso_value = float()
   >>> op.inputs.iso_value.connect(my_iso_value)
   >>> my_closed_surface = int()
   >>> op.inputs.closed_surface.connect(my_closed_surface)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_slice_surfaces = bool()
   >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)



.. py:currentmodule:: InputsMeshCut

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~field`
            - Allows to connect field input to the operator.
          * - :py:attr:`~iso_value`
            - Allows to connect iso_value input to the operator.
          * - :py:attr:`~closed_surface`
            - Allows to connect closed_surface input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.
          * - :py:attr:`~slice_surfaces`
            - Allows to connect slice_surfaces input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_cut import InputsMeshCut

Property detail
---------------

.. py:property:: field

   Allows to connect field input to the operator.

   Field containing the values for the iso-
   surface computation. the mesh can be
   retrieved from this field's support
   or through pin 2.

   :param my_field:
   :type my_field: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_cut()
   >>> op.inputs.field.connect(my_field)
   >>> # or
   >>> op.inputs.field(my_field)

.. py:property:: iso_value

   Allows to connect iso_value input to the operator.

   Iso value

   :param my_iso_value:
   :type my_iso_value: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_cut()
   >>> op.inputs.iso_value.connect(my_iso_value)
   >>> # or
   >>> op.inputs.iso_value(my_iso_value)

.. py:property:: closed_surface

   Allows to connect closed_surface input to the operator.

   1: closed surface, 0: iso surface.

   :param my_closed_surface:
   :type my_closed_surface: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_cut()
   >>> op.inputs.closed_surface.connect(my_closed_surface)
   >>> # or
   >>> op.inputs.closed_surface(my_closed_surface)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   Mesh to compute the iso-surface from. used
   when not given through the support of
   the field in pin 0.

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_cut()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)

.. py:property:: slice_surfaces

   Allows to connect slice_surfaces input to the operator.

   True: slicing will also take into account
   shell and skin elements. false:
   slicing will ignore shell and skin
   elements. the default is true.

   :param my_slice_surfaces:
   :type my_slice_surfaces: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.mesh_cut()
   >>> op.inputs.slice_surfaces.connect(my_slice_surfaces)
   >>> # or
   >>> op.inputs.slice_surfaces(my_slice_surfaces)






