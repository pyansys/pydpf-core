





:class:`mesh_to_graphics`
=========================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_to_graphics.mesh_to_graphics(mesh_scoping=None, node_normals=None, mesh=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Generate tessellation for input mesh

   :param mesh_scoping:
   :type mesh_scoping: Scoping, optional
   :param node_normals: Average element normals for node normals
                        (default no, use element normals for
                        node normals)
   :type node_normals: bool, optional
   :param mesh:
   :type mesh: MeshedRegion

   :returns: * **nodes** (*Field*) -- Node coordinates
             * **normals** (*Field*) -- Node normals
             * **connectivity** (*PropertyField*)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.mesh_to_graphics()

   >>> # Make input connections
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_node_normals = bool()
   >>> op.inputs.node_normals.connect(my_node_normals)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.mesh_to_graphics(
   ...     mesh_scoping=my_mesh_scoping,
   ...     node_normals=my_node_normals,
   ...     mesh=my_mesh,
   ... )

   >>> # Get output data
   >>> result_nodes = op.outputs.nodes()
   >>> result_normals = op.outputs.normals()
   >>> result_connectivity = op.outputs.connectivity()




.. py:currentmodule:: mesh_to_graphics

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_to_graphics import mesh_to_graphics

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMeshToGraphics

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMeshToGraphics




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





