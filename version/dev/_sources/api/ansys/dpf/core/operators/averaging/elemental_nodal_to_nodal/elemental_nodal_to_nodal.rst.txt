





:class:`elemental_nodal_to_nodal`
=================================

.. py:class:: ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal.elemental_nodal_to_nodal(field=None, mesh_scoping=None, should_average=None, extend_to_mid_nodes=None, extend_weights_to_mid_nodes=None, mesh=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Transforms an Elemental Nodal field into a Nodal field using an
   averaging process. The result is computed on a given node's
   scoping.

   :param field: Field or fields container with only one field
                 is expected
   :type field: Field or FieldsContainer
   :param mesh_scoping: Average only on these entities
   :type mesh_scoping: Scoping, optional
   :param should_average: Each nodal value is divided by the number of
                          elements linked to this node (default
                          is true for discrete quantities).
   :type should_average: bool, optional
   :param extend_to_mid_nodes: Compute mid nodes (when available) by
                               averaging the neighbour primary
                               nodes.
   :type extend_to_mid_nodes: bool, optional
   :param extend_weights_to_mid_nodes: Extends weights to mid nodes (when
                                       available). default is false.
   :type extend_weights_to_mid_nodes: bool, optional
   :param mesh:
   :type mesh: MeshedRegion, optional

   :returns: * **field** (*Field*)
             * **weight** (*PropertyField*) -- Provides the number of times it was found in
               the elemental nodal field, for each
               node. can be used to average later.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal()

   >>> # Make input connections
   >>> my_field = dpf.Field()
   >>> op.inputs.field.connect(my_field)
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_should_average = bool()
   >>> op.inputs.should_average.connect(my_should_average)
   >>> my_extend_to_mid_nodes = bool()
   >>> op.inputs.extend_to_mid_nodes.connect(my_extend_to_mid_nodes)
   >>> my_extend_weights_to_mid_nodes = bool()
   >>> op.inputs.extend_weights_to_mid_nodes.connect(my_extend_weights_to_mid_nodes)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.averaging.elemental_nodal_to_nodal(
   ...     field=my_field,
   ...     mesh_scoping=my_mesh_scoping,
   ...     should_average=my_should_average,
   ...     extend_to_mid_nodes=my_extend_to_mid_nodes,
   ...     extend_weights_to_mid_nodes=my_extend_weights_to_mid_nodes,
   ...     mesh=my_mesh,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()
   >>> result_weight = op.outputs.weight()




.. py:currentmodule:: elemental_nodal_to_nodal

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.averaging.elemental_nodal_to_nodal import elemental_nodal_to_nodal

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsElementalNodalToNodal

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsElementalNodalToNodal




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





