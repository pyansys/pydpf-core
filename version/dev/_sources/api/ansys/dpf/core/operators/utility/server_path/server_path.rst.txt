





:class:`server_path`
====================

.. py:class:: ansys.dpf.core.operators.utility.server_path.server_path(subpath=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Returns the platform-specific path to a folder in the Dpf server

   :param subpath: Subpath of the dpf server. supported values:
                   0 (default): root of the server, 1:
                   "dpf/bin/platform", 2:
                   "aisol/bin(dll)/platform", 3:
                   "dpf/plugins", 4: "dpf/workflows".
   :type subpath: int, optional

   :returns: **path** -- Path to the requested folder in the dpf
             server
   :rtype: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.server_path()

   >>> # Make input connections
   >>> my_subpath = int()
   >>> op.inputs.subpath.connect(my_subpath)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.server_path(
   ...     subpath=my_subpath,
   ... )

   >>> # Get output data
   >>> result_path = op.outputs.path()




.. py:currentmodule:: server_path

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.server_path import server_path

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsServerPath

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsServerPath




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





