





:class:`split_streams`
======================

.. py:class:: ansys.dpf.core.operators.logic.split_streams.split_streams(streams=None, output_count=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Splits a Streams into multiple coherent streams, actual number of
   outputs is always less or equal to the given desired number of
   ouputs.

   :param streams: Streams to split.
   :type streams: StreamsContainer
   :param output_count: Number of desired outputs.
   :type output_count: int

   :returns: * **output_count** (*int*) -- Actual number of outputs.
             * **outputs1** (*StreamsContainer*) -- Streams outputs.
             * **outputs2** (*StreamsContainer*) -- Streams outputs.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.logic.split_streams()

   >>> # Make input connections
   >>> my_streams = dpf.StreamsContainer()
   >>> op.inputs.streams.connect(my_streams)
   >>> my_output_count = int()
   >>> op.inputs.output_count.connect(my_output_count)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.logic.split_streams(
   ...     streams=my_streams,
   ...     output_count=my_output_count,
   ... )

   >>> # Get output data
   >>> result_output_count = op.outputs.output_count()
   >>> result_outputs1 = op.outputs.outputs1()
   >>> result_outputs2 = op.outputs.outputs2()




.. py:currentmodule:: split_streams

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.logic.split_streams import split_streams

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsSplitStreams

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsSplitStreams




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





