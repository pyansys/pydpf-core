





:class:`change_shell_layers`
============================

.. py:class:: ansys.dpf.core.operators.utility.change_shell_layers.change_shell_layers(fields_container=None, e_shell_layer=None, mesh=None, merge=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Extract the expected shell layers from the input fields. If the fields
   contain only one layer and the permissive configuration input is
   set to true then it returns the input fields. If permissive
   configuration input is set to false, any change which should not
   be permitted won't be achieved and corresponding field in output
   will be empty. If permissive configuration input is set to true
   (default), carefully check the result.

   :param fields_container:
   :type fields_container: FieldsContainer or Field
   :param e_shell_layer: 0:top, 1: bottom, 2: bottomtop, 3:mid,
                         4:bottomtopmid
   :type e_shell_layer: int
   :param mesh: Mesh support of the input fields_container,
                in case it does not have one defined.
                if the fields_container contains
                mixed shell/solid results, the mesh
                is required (either by connecting
                this pin or in the support).
   :type mesh: MeshedRegion or MeshesContainer, optional
   :param merge: If set to true, merge shells and solids
                 regarding the shell layer set in
                 s_shell_layer pin (false by default).
   :type merge: bool, optional

   :returns: **fields_container**
   :rtype: FieldsContainer or Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.change_shell_layers()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_e_shell_layer = int()
   >>> op.inputs.e_shell_layer.connect(my_e_shell_layer)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> my_merge = bool()
   >>> op.inputs.merge.connect(my_merge)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.change_shell_layers(
   ...     fields_container=my_fields_container,
   ...     e_shell_layer=my_e_shell_layer,
   ...     mesh=my_mesh,
   ...     merge=my_merge,
   ... )

   >>> # Get output data
   >>> result_fields_container = op.outputs.fields_container()




.. py:currentmodule:: change_shell_layers

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.change_shell_layers import change_shell_layers

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsChangeShellLayers

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsChangeShellLayers




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





