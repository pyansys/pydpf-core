





:class:`InputsPoyntingVectorSurface`
====================================

.. py:class:: ansys.dpf.core.operators.result.poynting_vector_surface.InputsPoyntingVectorSurface(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   poynting_vector_surface operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.poynting_vector_surface()
   >>> my_fields_containerA = dpf.FieldsContainer()
   >>> op.inputs.fields_containerA.connect(my_fields_containerA)
   >>> my_fields_containerB = dpf.FieldsContainer()
   >>> op.inputs.fields_containerB.connect(my_fields_containerB)
   >>> my_fields_containerC = dpf.FieldsContainer()
   >>> op.inputs.fields_containerC.connect(my_fields_containerC)
   >>> my_fields_containerD = dpf.FieldsContainer()
   >>> op.inputs.fields_containerD.connect(my_fields_containerD)
   >>> my_abstract_meshed_region = dpf.MeshedRegion()
   >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
   >>> my_int32 = int()
   >>> op.inputs.int32.connect(my_int32)



.. py:currentmodule:: InputsPoyntingVectorSurface

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~fields_containerA`
            - Allows to connect fields_containerA input to the operator.
          * - :py:attr:`~fields_containerB`
            - Allows to connect fields_containerB input to the operator.
          * - :py:attr:`~fields_containerC`
            - Allows to connect fields_containerC input to the operator.
          * - :py:attr:`~fields_containerD`
            - Allows to connect fields_containerD input to the operator.
          * - :py:attr:`~abstract_meshed_region`
            - Allows to connect abstract_meshed_region input to the operator.
          * - :py:attr:`~int32`
            - Allows to connect int32 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.poynting_vector_surface import InputsPoyntingVectorSurface

Property detail
---------------

.. py:property:: fields_containerA

   Allows to connect fields_containerA input to the operator.

   :param my_fields_containerA:
   :type my_fields_containerA: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.poynting_vector_surface()
   >>> op.inputs.fields_containerA.connect(my_fields_containerA)
   >>> # or
   >>> op.inputs.fields_containerA(my_fields_containerA)

.. py:property:: fields_containerB

   Allows to connect fields_containerB input to the operator.

   :param my_fields_containerB:
   :type my_fields_containerB: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.poynting_vector_surface()
   >>> op.inputs.fields_containerB.connect(my_fields_containerB)
   >>> # or
   >>> op.inputs.fields_containerB(my_fields_containerB)

.. py:property:: fields_containerC

   Allows to connect fields_containerC input to the operator.

   :param my_fields_containerC:
   :type my_fields_containerC: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.poynting_vector_surface()
   >>> op.inputs.fields_containerC.connect(my_fields_containerC)
   >>> # or
   >>> op.inputs.fields_containerC(my_fields_containerC)

.. py:property:: fields_containerD

   Allows to connect fields_containerD input to the operator.

   :param my_fields_containerD:
   :type my_fields_containerD: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.poynting_vector_surface()
   >>> op.inputs.fields_containerD.connect(my_fields_containerD)
   >>> # or
   >>> op.inputs.fields_containerD(my_fields_containerD)

.. py:property:: abstract_meshed_region

   Allows to connect abstract_meshed_region input to the operator.

   The mesh region in this pin have to be
   boundary or skin mesh

   :param my_abstract_meshed_region:
   :type my_abstract_meshed_region: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.poynting_vector_surface()
   >>> op.inputs.abstract_meshed_region.connect(my_abstract_meshed_region)
   >>> # or
   >>> op.inputs.abstract_meshed_region(my_abstract_meshed_region)

.. py:property:: int32

   Allows to connect int32 input to the operator.

   Load step number, if it's specified, the
   poynting vector is computed only on
   the substeps of this step

   :param my_int32:
   :type my_int32: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.poynting_vector_surface()
   >>> op.inputs.int32.connect(my_int32)
   >>> # or
   >>> op.inputs.int32(my_int32)






