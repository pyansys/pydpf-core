





:class:`cyclic_mesh_expansion`
==============================

.. py:class:: ansys.dpf.core.operators.metadata.cyclic_mesh_expansion.cyclic_mesh_expansion(sector_meshed_region=None, cyclic_support=None, sectors_to_expand=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Expand the mesh.

   :param sector_meshed_region:
   :type sector_meshed_region: MeshedRegion or MeshesContainer, optional
   :param cyclic_support:
   :type cyclic_support: CyclicSupport
   :param sectors_to_expand: Sectors to expand (start at 0), for
                             multistage: use scopings container
                             with 'stage' label.
   :type sectors_to_expand: Scoping or ScopingsContainer, optional

   :returns: * **meshed_region** (*MeshedRegion*) -- Expanded meshed region.
             * **cyclic_support** (*CyclicSupport*) -- Input cyclic support modified in place
               containing the new expanded meshed
               regions.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.metadata.cyclic_mesh_expansion()

   >>> # Make input connections
   >>> my_sector_meshed_region = dpf.MeshedRegion()
   >>> op.inputs.sector_meshed_region.connect(my_sector_meshed_region)
   >>> my_cyclic_support = dpf.CyclicSupport()
   >>> op.inputs.cyclic_support.connect(my_cyclic_support)
   >>> my_sectors_to_expand = dpf.Scoping()
   >>> op.inputs.sectors_to_expand.connect(my_sectors_to_expand)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.metadata.cyclic_mesh_expansion(
   ...     sector_meshed_region=my_sector_meshed_region,
   ...     cyclic_support=my_cyclic_support,
   ...     sectors_to_expand=my_sectors_to_expand,
   ... )

   >>> # Get output data
   >>> result_meshed_region = op.outputs.meshed_region()
   >>> result_cyclic_support = op.outputs.cyclic_support()




.. py:currentmodule:: cyclic_mesh_expansion

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.metadata.cyclic_mesh_expansion import cyclic_mesh_expansion

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsCyclicMeshExpansion

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsCyclicMeshExpansion




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





