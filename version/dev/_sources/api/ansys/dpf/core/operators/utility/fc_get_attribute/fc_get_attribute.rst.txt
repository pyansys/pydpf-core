





:class:`fc_get_attribute`
=========================

.. py:class:: ansys.dpf.core.operators.utility.fc_get_attribute.fc_get_attribute(fields_container=None, property_name=None, property_identifier=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Uses the FieldsContainer APIs to return a given attribute of the mesh
   in input.

   :param fields_container:
   :type fields_container: FieldsContainer
   :param property_name: Supported property names are:
                         "label_scoping", "label_values",
                         "time_freq_support", "labels",
                         "field_scoping" .
   :type property_name: str
   :param property_identifier: Additional pin for some property : the label
                               name for "label_scoping" or
                               "label_values", the field index
                               (default 0) for "field_scoping".
   :type property_identifier: str or int, optional

   :returns: **property** -- Returns a scoping for property:
             "label_scoping", a vector of int for
             "label_values", a time freq support
             for "time_freq_support", a vector of
             string for "labels", a labelspace for
             "field_scoping".
   :rtype: Scoping or TimeFreqSupport or dict

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.fc_get_attribute()

   >>> # Make input connections
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_identifier = str()
   >>> op.inputs.property_identifier.connect(my_property_identifier)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.fc_get_attribute(
   ...     fields_container=my_fields_container,
   ...     property_name=my_property_name,
   ...     property_identifier=my_property_identifier,
   ... )

   >>> # Get output data
   >>> result_property = op.outputs.property()




.. py:currentmodule:: fc_get_attribute

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.fc_get_attribute import fc_get_attribute

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsFcGetAttribute

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsFcGetAttribute




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





