





:class:`time_freq_support_get_attribute`
========================================

.. py:class:: ansys.dpf.core.operators.metadata.time_freq_support_get_attribute.time_freq_support_get_attribute(time_freq_support=None, property_name=None, property_identifier=None, property_identifier_2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Uses the TimeFreqSupport APIs to return a given attribute of the
   scoping in input.

   :param time_freq_support:
   :type time_freq_support: TimeFreqSupport
   :param property_name: Supported property names are: "time_freqs",
                         "imaginary_freqs",
                         "frequency_tolerance", "set_id",
                         "cummulative_index", "sets_freqs".
   :type property_name: str
   :param property_identifier: Additional pin for properties "set_id" and
                               "cummulative_index": the step id, for
                               "sets_freqs": the sets scoping.
   :type property_identifier: int, optional
   :param property_identifier_2: Additional pin for properties "set_id" and
                                 "cummulative_index": the substep id
                                 (if none, last substep is
                                 considered).
   :type property_identifier_2: int, optional

   :returns: **property** -- Returns a double for property:
             "frequency_tolerance", a single-value
             scoping for properties for "set_id"
             and "cummulative_index", and a field
             otherwise.
   :rtype: float or Field or Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.metadata.time_freq_support_get_attribute()

   >>> # Make input connections
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_identifier = int()
   >>> op.inputs.property_identifier.connect(my_property_identifier)
   >>> my_property_identifier_2 = int()
   >>> op.inputs.property_identifier_2.connect(my_property_identifier_2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.metadata.time_freq_support_get_attribute(
   ...     time_freq_support=my_time_freq_support,
   ...     property_name=my_property_name,
   ...     property_identifier=my_property_identifier,
   ...     property_identifier_2=my_property_identifier_2,
   ... )

   >>> # Get output data
   >>> result_property = op.outputs.property()




.. py:currentmodule:: time_freq_support_get_attribute

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.metadata.time_freq_support_get_attribute import time_freq_support_get_attribute

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsTimeFreqSupportGetAttribute

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsTimeFreqSupportGetAttribute




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





