





:class:`InputsTransformInvariantTermsRbd`
=========================================

.. py:class:: ansys.dpf.core.operators.result.transform_invariant_terms_rbd.InputsTransformInvariantTermsRbd(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   transform_invariant_terms_rbd operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> my_rotation_matrix = dpf.Field()
   >>> op.inputs.rotation_matrix.connect(my_rotation_matrix)
   >>> my_coordinate_system = dpf.Field()
   >>> op.inputs.coordinate_system.connect(my_coordinate_system)
   >>> my_model_data = dpf.PropertyField()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> my_center_of_mass = dpf.Field()
   >>> op.inputs.center_of_mass.connect(my_center_of_mass)
   >>> my_inertia_relief = dpf.Field()
   >>> op.inputs.inertia_relief.connect(my_inertia_relief)
   >>> my_model_size = float()
   >>> op.inputs.model_size.connect(my_model_size)
   >>> my_master_node_coordinates = dpf.()
   >>> op.inputs.master_node_coordinates.connect(my_master_node_coordinates)
   >>> my_v_trsf = dpf.()
   >>> op.inputs.v_trsf.connect(my_v_trsf)
   >>> my_k_mat = dpf.Field()
   >>> op.inputs.k_mat.connect(my_k_mat)
   >>> my_mass_mat = dpf.Field()
   >>> op.inputs.mass_mat.connect(my_mass_mat)
   >>> my_c_mat = dpf.Field()
   >>> op.inputs.c_mat.connect(my_c_mat)
   >>> my_rhs = dpf.Field()
   >>> op.inputs.rhs.connect(my_rhs)
   >>> my_dn = dpf.()
   >>> op.inputs.dn.connect(my_dn)
   >>> my_dr_cross_n = dpf.()
   >>> op.inputs.dr_cross_n.connect(my_dr_cross_n)
   >>> my_drn = dpf.()
   >>> op.inputs.drn.connect(my_drn)
   >>> my_dn_cross_n = dpf.()
   >>> op.inputs.dn_cross_n.connect(my_dn_cross_n)
   >>> my_dnx_y = dpf.()
   >>> op.inputs.dnx_y.connect(my_dnx_y)
   >>> my_dny_y = dpf.()
   >>> op.inputs.dny_y.connect(my_dny_y)
   >>> my_dnz_y = dpf.()
   >>> op.inputs.dnz_y.connect(my_dnz_y)
   >>> my_dyx_n = dpf.()
   >>> op.inputs.dyx_n.connect(my_dyx_n)
   >>> my_dyy_n = dpf.()
   >>> op.inputs.dyy_n.connect(my_dyy_n)
   >>> my_dyz_n = dpf.()
   >>> op.inputs.dyz_n.connect(my_dyz_n)
   >>> my_dnxn = dpf.()
   >>> op.inputs.dnxn.connect(my_dnxn)
   >>> my_dnyn = dpf.()
   >>> op.inputs.dnyn.connect(my_dnyn)
   >>> my_dnzn = dpf.()
   >>> op.inputs.dnzn.connect(my_dnzn)



.. py:currentmodule:: InputsTransformInvariantTermsRbd

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~rotation_matrix`
            - Allows to connect rotation_matrix input to the operator.
          * - :py:attr:`~coordinate_system`
            - Allows to connect coordinate_system input to the operator.
          * - :py:attr:`~model_data`
            - Allows to connect model_data input to the operator.
          * - :py:attr:`~center_of_mass`
            - Allows to connect center_of_mass input to the operator.
          * - :py:attr:`~inertia_relief`
            - Allows to connect inertia_relief input to the operator.
          * - :py:attr:`~model_size`
            - Allows to connect model_size input to the operator.
          * - :py:attr:`~master_node_coordinates`
            - Allows to connect master_node_coordinates input to the operator.
          * - :py:attr:`~v_trsf`
            - Allows to connect v_trsf input to the operator.
          * - :py:attr:`~k_mat`
            - Allows to connect k_mat input to the operator.
          * - :py:attr:`~mass_mat`
            - Allows to connect mass_mat input to the operator.
          * - :py:attr:`~c_mat`
            - Allows to connect c_mat input to the operator.
          * - :py:attr:`~rhs`
            - Allows to connect rhs input to the operator.
          * - :py:attr:`~dn`
            - Allows to connect dn input to the operator.
          * - :py:attr:`~dr_cross_n`
            - Allows to connect dr_cross_n input to the operator.
          * - :py:attr:`~drn`
            - Allows to connect drn input to the operator.
          * - :py:attr:`~dn_cross_n`
            - Allows to connect dn_cross_n input to the operator.
          * - :py:attr:`~dnx_y`
            - Allows to connect dnx_y input to the operator.
          * - :py:attr:`~dny_y`
            - Allows to connect dny_y input to the operator.
          * - :py:attr:`~dnz_y`
            - Allows to connect dnz_y input to the operator.
          * - :py:attr:`~dyx_n`
            - Allows to connect dyx_n input to the operator.
          * - :py:attr:`~dyy_n`
            - Allows to connect dyy_n input to the operator.
          * - :py:attr:`~dyz_n`
            - Allows to connect dyz_n input to the operator.
          * - :py:attr:`~dnxn`
            - Allows to connect dnxn input to the operator.
          * - :py:attr:`~dnyn`
            - Allows to connect dnyn input to the operator.
          * - :py:attr:`~dnzn`
            - Allows to connect dnzn input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.transform_invariant_terms_rbd import InputsTransformInvariantTermsRbd

Property detail
---------------

.. py:property:: rotation_matrix

   Allows to connect rotation_matrix input to the operator.

   3-3 rotation matrix.

   :param my_rotation_matrix:
   :type my_rotation_matrix: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.rotation_matrix.connect(my_rotation_matrix)
   >>> # or
   >>> op.inputs.rotation_matrix(my_rotation_matrix)

.. py:property:: coordinate_system

   Allows to connect coordinate_system input to the operator.

   Origin of the new coordinate system.

   :param my_coordinate_system:
   :type my_coordinate_system: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.coordinate_system.connect(my_coordinate_system)
   >>> # or
   >>> op.inputs.coordinate_system(my_coordinate_system)

.. py:property:: model_data

   Allows to connect model_data input to the operator.

   Data describing the finite element model

   :param my_model_data:
   :type my_model_data: PropertyField

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.model_data.connect(my_model_data)
   >>> # or
   >>> op.inputs.model_data(my_model_data)

.. py:property:: center_of_mass

   Allows to connect center_of_mass input to the operator.

   Center of mass of the body

   :param my_center_of_mass:
   :type my_center_of_mass: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.center_of_mass.connect(my_center_of_mass)
   >>> # or
   >>> op.inputs.center_of_mass(my_center_of_mass)

.. py:property:: inertia_relief

   Allows to connect inertia_relief input to the operator.

   Inertia matrix

   :param my_inertia_relief:
   :type my_inertia_relief: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.inertia_relief.connect(my_inertia_relief)
   >>> # or
   >>> op.inputs.inertia_relief(my_inertia_relief)

.. py:property:: model_size

   Allows to connect model_size input to the operator.

   Size of the diagonal box containing the body

   :param my_model_size:
   :type my_model_size: float

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.model_size.connect(my_model_size)
   >>> # or
   >>> op.inputs.model_size(my_model_size)

.. py:property:: master_node_coordinates

   Allows to connect master_node_coordinates input to the operator.

   :param my_master_node_coordinates:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.master_node_coordinates.connect(my_master_node_coordinates)
   >>> # or
   >>> op.inputs.master_node_coordinates(my_master_node_coordinates)

.. py:property:: v_trsf

   Allows to connect v_trsf input to the operator.

   Translational and rotational shape functions

   :param my_v_trsf:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.v_trsf.connect(my_v_trsf)
   >>> # or
   >>> op.inputs.v_trsf(my_v_trsf)

.. py:property:: k_mat

   Allows to connect k_mat input to the operator.

   :param my_k_mat:
   :type my_k_mat: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.k_mat.connect(my_k_mat)
   >>> # or
   >>> op.inputs.k_mat(my_k_mat)

.. py:property:: mass_mat

   Allows to connect mass_mat input to the operator.

   :param my_mass_mat:
   :type my_mass_mat: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.mass_mat.connect(my_mass_mat)
   >>> # or
   >>> op.inputs.mass_mat(my_mass_mat)

.. py:property:: c_mat

   Allows to connect c_mat input to the operator.

   :param my_c_mat:
   :type my_c_mat: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.c_mat.connect(my_c_mat)
   >>> # or
   >>> op.inputs.c_mat(my_c_mat)

.. py:property:: rhs

   Allows to connect rhs input to the operator.

   :param my_rhs:
   :type my_rhs: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.rhs.connect(my_rhs)
   >>> # or
   >>> op.inputs.rhs(my_rhs)

.. py:property:: dn

   Allows to connect dn input to the operator.

   :param my_dn:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dn.connect(my_dn)
   >>> # or
   >>> op.inputs.dn(my_dn)

.. py:property:: dr_cross_n

   Allows to connect dr_cross_n input to the operator.

   :param my_dr_cross_n:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dr_cross_n.connect(my_dr_cross_n)
   >>> # or
   >>> op.inputs.dr_cross_n(my_dr_cross_n)

.. py:property:: drn

   Allows to connect drn input to the operator.

   :param my_drn:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.drn.connect(my_drn)
   >>> # or
   >>> op.inputs.drn(my_drn)

.. py:property:: dn_cross_n

   Allows to connect dn_cross_n input to the operator.

   :param my_dn_cross_n:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dn_cross_n.connect(my_dn_cross_n)
   >>> # or
   >>> op.inputs.dn_cross_n(my_dn_cross_n)

.. py:property:: dnx_y

   Allows to connect dnx_y input to the operator.

   :param my_dnx_y:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dnx_y.connect(my_dnx_y)
   >>> # or
   >>> op.inputs.dnx_y(my_dnx_y)

.. py:property:: dny_y

   Allows to connect dny_y input to the operator.

   :param my_dny_y:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dny_y.connect(my_dny_y)
   >>> # or
   >>> op.inputs.dny_y(my_dny_y)

.. py:property:: dnz_y

   Allows to connect dnz_y input to the operator.

   :param my_dnz_y:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dnz_y.connect(my_dnz_y)
   >>> # or
   >>> op.inputs.dnz_y(my_dnz_y)

.. py:property:: dyx_n

   Allows to connect dyx_n input to the operator.

   :param my_dyx_n:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dyx_n.connect(my_dyx_n)
   >>> # or
   >>> op.inputs.dyx_n(my_dyx_n)

.. py:property:: dyy_n

   Allows to connect dyy_n input to the operator.

   :param my_dyy_n:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dyy_n.connect(my_dyy_n)
   >>> # or
   >>> op.inputs.dyy_n(my_dyy_n)

.. py:property:: dyz_n

   Allows to connect dyz_n input to the operator.

   :param my_dyz_n:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dyz_n.connect(my_dyz_n)
   >>> # or
   >>> op.inputs.dyz_n(my_dyz_n)

.. py:property:: dnxn

   Allows to connect dnxn input to the operator.

   :param my_dnxn:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dnxn.connect(my_dnxn)
   >>> # or
   >>> op.inputs.dnxn(my_dnxn)

.. py:property:: dnyn

   Allows to connect dnyn input to the operator.

   :param my_dnyn:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dnyn.connect(my_dnyn)
   >>> # or
   >>> op.inputs.dnyn(my_dnyn)

.. py:property:: dnzn

   Allows to connect dnzn input to the operator.

   :param my_dnzn:

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.transform_invariant_terms_rbd()
   >>> op.inputs.dnzn.connect(my_dnzn)
   >>> # or
   >>> op.inputs.dnzn(my_dnzn)






