





:class:`property_field_provider_by_name`
========================================

.. py:class:: ansys.dpf.core.operators.metadata.property_field_provider_by_name.property_field_provider_by_name(mesh_scoping=None, streams_container=None, data_sources=None, property_name=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Provides the property values for a set of elements for a defined
   property name.

   :param mesh_scoping: Scoping that defines the set of elements to
                        fetch the property values for. if not
                        specified, applied on all the
                        elements of the mesh.
   :type mesh_scoping: Scoping, optional
   :param streams_container: Optional if using a datasources
   :type streams_container: StreamsContainer, optional
   :param data_sources: Optional if using a streamscontainer
   :type data_sources: DataSources
   :param property_name: Property to read, that can be the following:
                         elements_connectivity,
                         nodes_connectivity, material,
                         element_type, apdl_section_id,
                         apdl_real_id, apdl_esys_id,
                         mapdl_element_type,
                         mapdl_element_type_id,
                         harmonic_index, step, substep,
                         keyopt_i (i = 1 -> 18).
   :type property_name: str

   :returns: **property_field** -- Property field
   :rtype: PropertyField

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.metadata.property_field_provider_by_name()

   >>> # Make input connections
   >>> my_mesh_scoping = dpf.Scoping()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.metadata.property_field_provider_by_name(
   ...     mesh_scoping=my_mesh_scoping,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ...     property_name=my_property_name,
   ... )

   >>> # Get output data
   >>> result_property_field = op.outputs.property_field()




.. py:currentmodule:: property_field_provider_by_name

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.metadata.property_field_provider_by_name import property_field_provider_by_name

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsPropertyFieldProviderByName

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsPropertyFieldProviderByName




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





