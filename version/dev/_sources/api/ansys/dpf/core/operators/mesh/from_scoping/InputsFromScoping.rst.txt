





:class:`InputsFromScoping`
==========================

.. py:class:: ansys.dpf.core.operators.mesh.from_scoping.InputsFromScoping(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   from_scoping operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.from_scoping()
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> my_inclusive = int()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> my_nodes_only = bool()
   >>> op.inputs.nodes_only.connect(my_nodes_only)
   >>> my_mesh = dpf.MeshedRegion()
   >>> op.inputs.mesh.connect(my_mesh)



.. py:currentmodule:: InputsFromScoping

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~scoping`
            - Allows to connect scoping input to the operator.
          * - :py:attr:`~inclusive`
            - Allows to connect inclusive input to the operator.
          * - :py:attr:`~nodes_only`
            - Allows to connect nodes_only input to the operator.
          * - :py:attr:`~mesh`
            - Allows to connect mesh input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.from_scoping import InputsFromScoping

Property detail
---------------

.. py:property:: scoping

   Allows to connect scoping input to the operator.

   If nodal/face scoping, then the scoping is
   transposed respecting the inclusive
   pin

   :param my_scoping:
   :type my_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.from_scoping()
   >>> op.inputs.scoping.connect(my_scoping)
   >>> # or
   >>> op.inputs.scoping(my_scoping)

.. py:property:: inclusive

   Allows to connect inclusive input to the operator.

   If inclusive == 1 then all the elements/faces
   adjacent to the nodes/faces ids in
   input are added, if inclusive == 0,
   only the elements/faces which have
   all their nodes/faces in the scoping
   are included

   :param my_inclusive:
   :type my_inclusive: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.from_scoping()
   >>> op.inputs.inclusive.connect(my_inclusive)
   >>> # or
   >>> op.inputs.inclusive(my_inclusive)

.. py:property:: nodes_only

   Allows to connect nodes_only input to the operator.

   Returns mesh with nodes only (without any
   elements or property fields). default
   is false.

   :param my_nodes_only:
   :type my_nodes_only: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.from_scoping()
   >>> op.inputs.nodes_only.connect(my_nodes_only)
   >>> # or
   >>> op.inputs.nodes_only(my_nodes_only)

.. py:property:: mesh

   Allows to connect mesh input to the operator.

   :param my_mesh:
   :type my_mesh: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.mesh.from_scoping()
   >>> op.inputs.mesh.connect(my_mesh)
   >>> # or
   >>> op.inputs.mesh(my_mesh)






