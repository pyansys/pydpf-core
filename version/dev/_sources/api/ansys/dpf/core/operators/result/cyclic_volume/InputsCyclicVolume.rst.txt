





:class:`InputsCyclicVolume`
===========================

.. py:class:: ansys.dpf.core.operators.result.cyclic_volume.InputsCyclicVolume(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   cyclic_volume operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> my_time_scoping = dpf.Scoping()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_mesh_scoping = dpf.ScopingsContainer()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> my_fields_container = dpf.FieldsContainer()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_bool_rotate_to_global = bool()
   >>> op.inputs.bool_rotate_to_global.connect(my_bool_rotate_to_global)
   >>> my_all_dofs = bool()
   >>> op.inputs.all_dofs.connect(my_all_dofs)
   >>> my_sector_mesh = dpf.MeshedRegion()
   >>> op.inputs.sector_mesh.connect(my_sector_mesh)
   >>> my_read_cyclic = int()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> my_expanded_meshed_region = dpf.MeshedRegion()
   >>> op.inputs.expanded_meshed_region.connect(my_expanded_meshed_region)
   >>> my_cyclic_support = dpf.CyclicSupport()
   >>> op.inputs.cyclic_support.connect(my_cyclic_support)



.. py:currentmodule:: InputsCyclicVolume

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_scoping`
            - Allows to connect time_scoping input to the operator.
          * - :py:attr:`~mesh_scoping`
            - Allows to connect mesh_scoping input to the operator.
          * - :py:attr:`~fields_container`
            - Allows to connect fields_container input to the operator.
          * - :py:attr:`~streams_container`
            - Allows to connect streams_container input to the operator.
          * - :py:attr:`~data_sources`
            - Allows to connect data_sources input to the operator.
          * - :py:attr:`~bool_rotate_to_global`
            - Allows to connect bool_rotate_to_global input to the operator.
          * - :py:attr:`~all_dofs`
            - Allows to connect all_dofs input to the operator.
          * - :py:attr:`~sector_mesh`
            - Allows to connect sector_mesh input to the operator.
          * - :py:attr:`~read_cyclic`
            - Allows to connect read_cyclic input to the operator.
          * - :py:attr:`~expanded_meshed_region`
            - Allows to connect expanded_meshed_region input to the operator.
          * - :py:attr:`~cyclic_support`
            - Allows to connect cyclic_support input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.result.cyclic_volume import InputsCyclicVolume

Property detail
---------------

.. py:property:: time_scoping

   Allows to connect time_scoping input to the operator.

   :param my_time_scoping:
   :type my_time_scoping: Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> # or
   >>> op.inputs.time_scoping(my_time_scoping)

.. py:property:: mesh_scoping

   Allows to connect mesh_scoping input to the operator.

   :param my_mesh_scoping:
   :type my_mesh_scoping: ScopingsContainer or Scoping

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.mesh_scoping.connect(my_mesh_scoping)
   >>> # or
   >>> op.inputs.mesh_scoping(my_mesh_scoping)

.. py:property:: fields_container

   Allows to connect fields_container input to the operator.

   Fieldscontainer already allocated modified
   inplace

   :param my_fields_container:
   :type my_fields_container: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.fields_container.connect(my_fields_container)
   >>> # or
   >>> op.inputs.fields_container(my_fields_container)

.. py:property:: streams_container

   Allows to connect streams_container input to the operator.

   Streams containing the result file.

   :param my_streams_container:
   :type my_streams_container: StreamsContainer or Stream

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> # or
   >>> op.inputs.streams_container(my_streams_container)

.. py:property:: data_sources

   Allows to connect data_sources input to the operator.

   Data sources containing the result file.

   :param my_data_sources:
   :type my_data_sources: DataSources

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> # or
   >>> op.inputs.data_sources(my_data_sources)

.. py:property:: bool_rotate_to_global

   Allows to connect bool_rotate_to_global input to the operator.

   If true the field is rotated to global
   coordinate system (default true)

   :param my_bool_rotate_to_global:
   :type my_bool_rotate_to_global: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.bool_rotate_to_global.connect(my_bool_rotate_to_global)
   >>> # or
   >>> op.inputs.bool_rotate_to_global(my_bool_rotate_to_global)

.. py:property:: all_dofs

   Allows to connect all_dofs input to the operator.

   If this pin is set to true, all the dofs are
   retrieved. by default this pin is set
   to false and only the translational
   dofs are retrieved.

   :param my_all_dofs:
   :type my_all_dofs: bool

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.all_dofs.connect(my_all_dofs)
   >>> # or
   >>> op.inputs.all_dofs(my_all_dofs)

.. py:property:: sector_mesh

   Allows to connect sector_mesh input to the operator.

   Mesh of the base sector (can be a skin).

   :param my_sector_mesh:
   :type my_sector_mesh: MeshedRegion or MeshesContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.sector_mesh.connect(my_sector_mesh)
   >>> # or
   >>> op.inputs.sector_mesh(my_sector_mesh)

.. py:property:: read_cyclic

   Allows to connect read_cyclic input to the operator.

   If 0 cyclic symmetry is ignored, if 1 cyclic
   sector is read, if 2 cyclic expansion
   is done, if 3 cyclic expansion is
   done and stages are merged (default
   is 1)

   :param my_read_cyclic:
   :type my_read_cyclic: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> # or
   >>> op.inputs.read_cyclic(my_read_cyclic)

.. py:property:: expanded_meshed_region

   Allows to connect expanded_meshed_region input to the operator.

   Mesh expanded.

   :param my_expanded_meshed_region:
   :type my_expanded_meshed_region: MeshedRegion or MeshesContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.expanded_meshed_region.connect(my_expanded_meshed_region)
   >>> # or
   >>> op.inputs.expanded_meshed_region(my_expanded_meshed_region)

.. py:property:: cyclic_support

   Allows to connect cyclic_support input to the operator.

   :param my_cyclic_support:
   :type my_cyclic_support: CyclicSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.result.cyclic_volume()
   >>> op.inputs.cyclic_support.connect(my_cyclic_support)
   >>> # or
   >>> op.inputs.cyclic_support(my_cyclic_support)






