





:class:`InputsTimeFreqSupportGetAttribute`
==========================================

.. py:class:: ansys.dpf.core.operators.metadata.time_freq_support_get_attribute.InputsTimeFreqSupportGetAttribute(op: ansys.dpf.core.dpf_operator.Operator)

   Bases: :py:obj:`ansys.dpf.core.inputs._Inputs`


   Intermediate class used to connect user inputs to
   time_freq_support_get_attribute operator.

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.metadata.time_freq_support_get_attribute()
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> my_property_name = str()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> my_property_identifier = int()
   >>> op.inputs.property_identifier.connect(my_property_identifier)
   >>> my_property_identifier_2 = int()
   >>> op.inputs.property_identifier_2.connect(my_property_identifier_2)



.. py:currentmodule:: InputsTimeFreqSupportGetAttribute

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~time_freq_support`
            - Allows to connect time_freq_support input to the operator.
          * - :py:attr:`~property_name`
            - Allows to connect property_name input to the operator.
          * - :py:attr:`~property_identifier`
            - Allows to connect property_identifier input to the operator.
          * - :py:attr:`~property_identifier_2`
            - Allows to connect property_identifier_2 input to the operator.







Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.metadata.time_freq_support_get_attribute import InputsTimeFreqSupportGetAttribute

Property detail
---------------

.. py:property:: time_freq_support

   Allows to connect time_freq_support input to the operator.

   :param my_time_freq_support:
   :type my_time_freq_support: TimeFreqSupport

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.metadata.time_freq_support_get_attribute()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> # or
   >>> op.inputs.time_freq_support(my_time_freq_support)

.. py:property:: property_name

   Allows to connect property_name input to the operator.

   Supported property names are: "time_freqs",
   "imaginary_freqs",
   "frequency_tolerance", "set_id",
   "cummulative_index", "sets_freqs".

   :param my_property_name:
   :type my_property_name: str

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.metadata.time_freq_support_get_attribute()
   >>> op.inputs.property_name.connect(my_property_name)
   >>> # or
   >>> op.inputs.property_name(my_property_name)

.. py:property:: property_identifier

   Allows to connect property_identifier input to the operator.

   Additional pin for properties "set_id" and
   "cummulative_index": the step id, for
   "sets_freqs": the sets scoping.

   :param my_property_identifier:
   :type my_property_identifier: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.metadata.time_freq_support_get_attribute()
   >>> op.inputs.property_identifier.connect(my_property_identifier)
   >>> # or
   >>> op.inputs.property_identifier(my_property_identifier)

.. py:property:: property_identifier_2

   Allows to connect property_identifier_2 input to the operator.

   Additional pin for properties "set_id" and
   "cummulative_index": the substep id
   (if none, last substep is
   considered).

   :param my_property_identifier_2:
   :type my_property_identifier_2: int

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf
   >>> op = dpf.operators.metadata.time_freq_support_get_attribute()
   >>> op.inputs.property_identifier_2.connect(my_property_identifier_2)
   >>> # or
   >>> op.inputs.property_identifier_2(my_property_identifier_2)






