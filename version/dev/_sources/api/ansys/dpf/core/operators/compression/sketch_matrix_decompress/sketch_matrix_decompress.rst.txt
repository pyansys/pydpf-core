





:class:`sketch_matrix_decompress`
=================================

.. py:class:: ansys.dpf.core.operators.compression.sketch_matrix_decompress.sketch_matrix_decompress(dataIn=None, sketch_matrix=None, shell_field=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Decompress fields container using an orthonormal randomized (Gaussian
   distribution) sketch matrix.

   :param dataIn: Fields container to be decompressed. it is
                  assumed that all fields have the same
                  structure (scoping, num_entities).
   :type dataIn: FieldsContainer
   :param sketch_matrix: Field containing the sketch matrix.
   :type sketch_matrix: Field
   :param shell_field: Empty field containing the shell of the field
                       of decompressed data.
   :type shell_field: Field

   :returns: **dataOut** -- The output matrix is a 'fields_container';
             each field correspond to the
             multiplication of the sketch matrix
             by the original fields.
   :rtype: FieldsContainer

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.compression.sketch_matrix_decompress()

   >>> # Make input connections
   >>> my_dataIn = dpf.FieldsContainer()
   >>> op.inputs.dataIn.connect(my_dataIn)
   >>> my_sketch_matrix = dpf.Field()
   >>> op.inputs.sketch_matrix.connect(my_sketch_matrix)
   >>> my_shell_field = dpf.Field()
   >>> op.inputs.shell_field.connect(my_shell_field)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.compression.sketch_matrix_decompress(
   ...     dataIn=my_dataIn,
   ...     sketch_matrix=my_sketch_matrix,
   ...     shell_field=my_shell_field,
   ... )

   >>> # Get output data
   >>> result_dataOut = op.outputs.dataOut()




.. py:currentmodule:: sketch_matrix_decompress

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.compression.sketch_matrix_decompress import sketch_matrix_decompress

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsSketchMatrixDecompress

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsSketchMatrixDecompress




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





