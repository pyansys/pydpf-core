





:class:`max_by_component`
=========================

.. py:class:: ansys.dpf.core.operators.min_max.max_by_component.max_by_component(use_absolute_value=None, field1=None, field2=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Give the maximum for each element rank by comparing several fields.

   :param use_absolute_value: Use_absolute_value
   :type use_absolute_value: bool
   :param field1: Field or fields container with only one field
                  is expected
   :type field1: Field or FieldsContainer
   :param field2: Field or fields container with only one field
                  is expected
   :type field2: Field or FieldsContainer

   :returns: **field**
   :rtype: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.min_max.max_by_component()

   >>> # Make input connections
   >>> my_use_absolute_value = bool()
   >>> op.inputs.use_absolute_value.connect(my_use_absolute_value)
   >>> my_field1 = dpf.Field()
   >>> op.inputs.field1.connect(my_field1)
   >>> my_field2 = dpf.Field()
   >>> op.inputs.field2.connect(my_field2)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.min_max.max_by_component(
   ...     use_absolute_value=my_use_absolute_value,
   ...     field1=my_field1,
   ...     field2=my_field2,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: max_by_component

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.min_max.max_by_component import max_by_component

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMaxByComponent

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMaxByComponent




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





