





:class:`mesh_provider`
======================

.. py:class:: ansys.dpf.core.operators.mesh.mesh_provider.mesh_provider(time_scoping=None, streams_container=None, data_sources=None, read_cyclic=None, region_scoping=None, laziness=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Reads a mesh from result files.

   :param time_scoping: Optional time/frequency set id of the mesh,
                        supported for adaptative meshes.
   :type time_scoping: int, optional
   :param streams_container: Result file container allowed to be kept open
                             to cache data
   :type streams_container: StreamsContainer, optional
   :param data_sources: Result file path container, used if no
                        streams are set
   :type data_sources: DataSources
   :param read_cyclic: If 1, cyclic symmetry is ignored. if 2,
                       cyclic expansion is done (default is
                       1).
   :type read_cyclic: int, optional
   :param region_scoping: Region id (integer) or vector of region ids
                          with one entity (vector) or region
                          scoping with one id (scoping) (region
                          corresponds to zone for fluid results
                          or part for lsdyna results).
   :type region_scoping: Scoping or int, optional
   :param laziness: Configurate whether lazy evaluation can be
                    performed and to what extent.
                    supported attributes are:  -
                    "num_named_selections"->num named
                    selection to read (-1 is all, int32,
                    default si -1), careful: the other
                    named selections will not be
                    available, use mesh_property_provider
                    operator to read them. - all mesh
                    property fields "mat",
                    "named_selection",
                    "apdl_element_type", "section"-> if
                    set to 1 these properties will not be
                    read and a workflow will be bounded
                    to the properties to be evaluated on
                    demand, with 0 they are read (default
                    is 0). - "all_available_properties"
                    option set to 0 will return all
                    possible properties
   :type laziness: DataTree, optional

   :returns: **mesh**
   :rtype: MeshedRegion

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.mesh.mesh_provider()

   >>> # Make input connections
   >>> my_time_scoping = int()
   >>> op.inputs.time_scoping.connect(my_time_scoping)
   >>> my_streams_container = dpf.StreamsContainer()
   >>> op.inputs.streams_container.connect(my_streams_container)
   >>> my_data_sources = dpf.DataSources()
   >>> op.inputs.data_sources.connect(my_data_sources)
   >>> my_read_cyclic = int()
   >>> op.inputs.read_cyclic.connect(my_read_cyclic)
   >>> my_region_scoping = dpf.Scoping()
   >>> op.inputs.region_scoping.connect(my_region_scoping)
   >>> my_laziness = dpf.DataTree()
   >>> op.inputs.laziness.connect(my_laziness)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.mesh.mesh_provider(
   ...     time_scoping=my_time_scoping,
   ...     streams_container=my_streams_container,
   ...     data_sources=my_data_sources,
   ...     read_cyclic=my_read_cyclic,
   ...     region_scoping=my_region_scoping,
   ...     laziness=my_laziness,
   ... )

   >>> # Get output data
   >>> result_mesh = op.outputs.mesh()




.. py:currentmodule:: mesh_provider

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.mesh.mesh_provider import mesh_provider

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsMeshProvider

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsMeshProvider




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





