





:class:`scalars_to_field`
=========================

.. py:class:: ansys.dpf.core.operators.utility.scalars_to_field.scalars_to_field(double_or_vector_double=None, unit=None, location=None, num_entity=None, num_comp=None, scoping=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Create scalar or vector Field.

   :param double_or_vector_double: Data of the field, default is 0-field.
                                   specify a double to have a field of
                                   same value or specify directly the
                                   data vector.
   :type double_or_vector_double: float, optional
   :param unit: Unit symbol (m, hz, kg, ...)
   :type unit: str, optional
   :param location: Location of the field ex 'nodal',
                    'elementalnodal', 'elemental'...
                    default is 'numeric'.
   :type location: str, optional
   :param num_entity: Number of field entities. default is 1 or the
                      size of the scoping in input if
                      specified.
   :type num_entity: int, optional
   :param num_comp: Number of field components. default is 1.
   :type num_comp: int, optional
   :param scoping: Scoping.
   :type scoping: Scoping, optional

   :returns: **field**
   :rtype: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.utility.scalars_to_field()

   >>> # Make input connections
   >>> my_double_or_vector_double = float()
   >>> op.inputs.double_or_vector_double.connect(my_double_or_vector_double)
   >>> my_unit = str()
   >>> op.inputs.unit.connect(my_unit)
   >>> my_location = str()
   >>> op.inputs.location.connect(my_location)
   >>> my_num_entity = int()
   >>> op.inputs.num_entity.connect(my_num_entity)
   >>> my_num_comp = int()
   >>> op.inputs.num_comp.connect(my_num_comp)
   >>> my_scoping = dpf.Scoping()
   >>> op.inputs.scoping.connect(my_scoping)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.utility.scalars_to_field(
   ...     double_or_vector_double=my_double_or_vector_double,
   ...     unit=my_unit,
   ...     location=my_location,
   ...     num_entity=my_num_entity,
   ...     num_comp=my_num_comp,
   ...     scoping=my_scoping,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: scalars_to_field

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.utility.scalars_to_field import scalars_to_field

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsScalarsToField

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsScalarsToField




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





