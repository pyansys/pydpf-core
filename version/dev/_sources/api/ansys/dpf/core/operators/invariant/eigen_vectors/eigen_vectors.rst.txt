





:class:`eigen_vectors`
======================

.. py:class:: ansys.dpf.core.operators.invariant.eigen_vectors.eigen_vectors(field=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   Computes the element-wise Eigen vectors for each tensor in the field.

   :param field: Field or fields container with only one field
                 is expected
   :type field: FieldsContainer or Field

   :returns: **field**
   :rtype: Field

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.invariant.eigen_vectors()

   >>> # Make input connections
   >>> my_field = dpf.FieldsContainer()
   >>> op.inputs.field.connect(my_field)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.invariant.eigen_vectors(
   ...     field=my_field,
   ... )

   >>> # Get output data
   >>> result_field = op.outputs.field()




.. py:currentmodule:: eigen_vectors

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.invariant.eigen_vectors import eigen_vectors

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsEigenVectors

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsEigenVectors




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





