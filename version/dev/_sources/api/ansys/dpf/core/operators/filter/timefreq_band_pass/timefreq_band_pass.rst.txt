





:class:`timefreq_band_pass`
===========================

.. py:class:: ansys.dpf.core.operators.filter.timefreq_band_pass.timefreq_band_pass(time_freq_support=None, min_threshold=None, max_threshold=None, config=None, server=None)

   Bases: :py:obj:`ansys.dpf.core.dpf_operator.Operator`


   The band pass filter returns all the values above (but not equal to)
   the minimum threshold value and below (but not equal to) the
   maximum threshold value in input.

   :param time_freq_support:
   :type time_freq_support: TimeFreqSupport
   :param min_threshold: A minimum threshold scalar or a field
                         containing one value is expected.
   :type min_threshold: float or Field
   :param max_threshold: A maximum threshold scalar or a field
                         containing one value is expected.
   :type max_threshold: float or Field, optional

   :returns: * **time_freq_support** (*TimeFreqSupport*)
             * **scoping** (*Scoping*)

   .. rubric:: Examples

   >>> from ansys.dpf import core as dpf

   >>> # Instantiate operator
   >>> op = dpf.operators.filter.timefreq_band_pass()

   >>> # Make input connections
   >>> my_time_freq_support = dpf.TimeFreqSupport()
   >>> op.inputs.time_freq_support.connect(my_time_freq_support)
   >>> my_min_threshold = float()
   >>> op.inputs.min_threshold.connect(my_min_threshold)
   >>> my_max_threshold = float()
   >>> op.inputs.max_threshold.connect(my_max_threshold)

   >>> # Instantiate operator and connect inputs in one line
   >>> op = dpf.operators.filter.timefreq_band_pass(
   ...     time_freq_support=my_time_freq_support,
   ...     min_threshold=my_min_threshold,
   ...     max_threshold=my_max_threshold,
   ... )

   >>> # Get output data
   >>> result_time_freq_support = op.outputs.time_freq_support()
   >>> result_scoping = op.outputs.scoping()




.. py:currentmodule:: timefreq_band_pass

Overview
--------

.. tab-set::




   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~inputs`
            - Enables to connect inputs to the operator
          * - :py:attr:`~outputs`
            - Enables to get outputs of the operator by evaluating it



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~default_config`
            - Returns the default config of the operator.





Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.operators.filter.timefreq_band_pass import timefreq_band_pass

Property detail
---------------

.. py:property:: inputs

   Enables to connect inputs to the operator

   :returns: **inputs**
   :rtype: InputsTimefreqBandPass

.. py:property:: outputs

   Enables to get outputs of the operator by evaluating it

   :returns: **outputs**
   :rtype: OutputsTimefreqBandPass




Method detail
-------------

.. py:method:: default_config(server=None)
   :staticmethod:


   Returns the default config of the operator.

   This config can then be changed to the user needs and be used to
   instantiate the operator. The Configuration allows to customize
   how the operation will be processed by the operator.

   :param server: Server with channel connected to the remote or local instance. When
                  ``None``, attempts to use the global server.
   :type server: server.DPFServer, optional





