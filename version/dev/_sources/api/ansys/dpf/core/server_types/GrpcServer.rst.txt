





:class:`GrpcServer`
===================

.. py:class:: ansys.dpf.core.server_types.GrpcServer(ansys_path: Union[str, None] = None, ip: str = LOCALHOST, port: str = DPF_DEFAULT_PORT, timeout: float = 10.0, as_global: bool = True, load_operators: bool = True, launch_server: bool = True, docker_config: ansys.dpf.core.server_factory.DockerConfig = RUNNING_DOCKER, use_pypim: bool = True, num_connection_tryouts: int = 3, context: ansys.dpf.core.server_context.AvailableServerContexts = server_context.SERVER_CONTEXT)

   Bases: :py:obj:`CServer`


   Server using the gRPC communication protocol.




.. py:currentmodule:: GrpcServer

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~shutdown`
            - Shutdown the server instance.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~version`
            - Get the version of the server.
          * - :py:attr:`~os`
            - Get the operating system on which the server is running.
          * - :py:attr:`~client`
            - Get the client associated with the server.
          * - :py:attr:`~address`
            - Address of the server.
          * - :py:attr:`~ip`
            - IP address of the server.
          * - :py:attr:`~port`
            - Port of the server.
          * - :py:attr:`~external_ip`
            - Public IP address of the server.
          * - :py:attr:`~external_port`
            - Public Port of the server.
          * - :py:attr:`~local_server`
            - Get whether the server is running locally.
          * - :py:attr:`~config`
            - Get the server configuration for the gRPC server.


   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~live`
            - 



   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__eq__`
            - Return true, if ***** are equals.




Import detail
-------------

.. code-block:: python

    from ansys.dpf.core.server_types import GrpcServer

Property detail
---------------

.. py:property:: version

   Get the version of the server.

   :returns: **version** -- The version of the server in 'major.minor' format.
   :rtype: str

.. py:property:: os

   Get the operating system on which the server is running.

.. py:property:: client

   Get the client associated with the server.

   :returns: **client** -- The GrpcClient instance associated with the server.
   :rtype: GrpcClient

.. py:property:: address

   Address of the server.

   :returns: **address**
   :rtype: str

.. py:property:: ip

   IP address of the server.

   :returns: **ip**
   :rtype: str

.. py:property:: port

   Port of the server.

   :returns: **port**
   :rtype: int

.. py:property:: external_ip

   Public IP address of the server.

   Is the same as  :func:`ansys.dpf.core.GrpcServer.ip` in all cases except
   for servers using a gateway:
   for example, servers running in Docker Images might have an internal
   :func:`ansys.dpf.core.GrpcServer.ip` different from the public
   :func:`ansys.dpf.core.GrpcServer.external_ip`, the latter should be used to get
   connected to the server from outside the Docker Image.

   :returns: **external_ip**
   :rtype: str

.. py:property:: external_port

   Public Port of the server.

   Is the same as  :func:`ansys.dpf.core.GrpcServer.port` in all cases except
   for servers using a gateway:
   for example, servers running in Docker Images might have an internal
   :func:`ansys.dpf.core.GrpcServer.port` different from the public
   :func:`ansys.dpf.core.GrpcServer.external_port`, the latter should be used to get
   connected to the server from outside the Docker Image.

   :returns: **port**
   :rtype: int

.. py:property:: local_server

   Get whether the server is running locally.

   :returns: **local_server** -- True if the server is running locally, False otherwise.
   :rtype: bool

.. py:property:: config

   Get the server configuration for the gRPC server.

   :returns: **config** -- The server configuration for the gRPC server from the AvailableServerConfigs.
   :rtype: AvailableServerConfigs



Attribute detail
----------------

.. py:attribute:: live
   :value: False




Method detail
-------------

.. py:method:: shutdown()

   Shutdown the server instance.


.. py:method:: __eq__(other_server)

   Return true, if ***** are equals.





